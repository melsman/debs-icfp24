(* Initial allows for other modules to be discharged at link time *)

local
    Initial.sml
    basis General =
      bas
        GENERAL.sig General.sml OPTION.sig Option.sml
      end

    basis List =
      let open General
      in bas
            LIST.sig List.sml LIST_PAIR.sml ListPair.sml
         end
      end

    basis ArrayVector =
        let open General List
            basis Poly =
              let wordtables.sml TableSlice.sml
              in bas
                    VECTOR.sig Vector.sml
                    VECTOR_SLICE.sml VectorSlice.sml
                    ARRAY.sig Array.sml
                    ARRAY_SLICE.sml ArraySlice.sml
                    ARRAY2.sig Array2.sml
                 end
              end
        in bas
              open Poly
              MONO_VECTOR.sml MONO_ARRAY.sml ByteTable.sml
	      MONO_VECTOR_SLICE.sml MONO_ARRAY_SLICE.sml ByteSlice.sml
           end
        end

    basis String =
       let open General ArrayVector
       in bas
             STRING_CVT.sml StringCvt.sml
             local open List
                   STR_BASE.sml StrBase.sml
             in
                Char.sml String.sml CHAR.sig STRING.sig String2.sml SUBSTRING.sig Substring.sml
             end
          end
       end

    basis Text =
       let open String ArrayVector
       in bas TEXT.sig Text.sml end
       end

    basis Bool =
       let open General String
       in bas BOOL.sig Bool.sml end
       end

    basis IntInfRep =
       let open General List
       in bas INT_INF_REP.sml IntInfRep.sml end
       end

    basis Word =
       let open General String IntInfRep
           basis W =
             bas
               WORD.sig Word32.sml Word8.sml Word31.sml
             end
           basis PW = let open ArrayVector W
                      in bas PACK_WORD.sml Pack32Little.sml Pack32Big.sml end
                      end
       in bas open W PW end
       end

    basis Byte =
       let open General String ArrayVector Word
       in bas BYTE.sig Byte.sml end
       end

    basis Int =
       let open General String IntInfRep
       in bas
            INTEGER.sml Int32.sml Int31.sml
          end
       end

    basis Real =
       let open General String Int
       in bas MATH.sig Math.sml REAL.sig Real.sml
	    local open Byte ArrayVector
            in PACK_REAL.sml PackRealLittle.sml PackRealBig.sml
            end
	  end
       end

    basis IntInf =
       let open General List ArrayVector String Word Int Real
       in bas ann safeLinkTimeElimination
              in INT_INF.sml IntInf.sml
              end
          end
       end

    basis System =
       let open General String Int
       in let basis Time = let open Int Real IntInf in bas TIME.sig Time.sml end end
              basis Random = let open Real in bas RANDOM.sig Random.sml end end
              basis Path = let open List in bas OS_PATH.sml Path.sml end end
              basis Os = let open Path in bas OS.sml end end
              basis Date = let open List Int Real Time IntInf in bas DATE.sig Date.sml end end
              basis Timer = let open Int Time IntInf in bas TIMER.sig Timer.sml end end
          in bas open Time Random Path Os Date Timer
             end
          end
       end
    basis Io =
       let open General List String ArrayVector
       in bas ann safeLinkTimeElimination
              in TEXT_IO.sml TextIO.sml
              end
              IO.sml end
       end
    basis Control =
       bas CONTROL.sig Control.sml end
in
  open General List ArrayVector String Bool Word Byte Text
       Int Real IntInf IntInfRep System Io Control
end
