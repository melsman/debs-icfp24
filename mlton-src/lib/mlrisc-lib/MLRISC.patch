diff --git a/Doc/html/mltex2html b/Doc/html/mltex2html
index 24d393f..6e58ea0 100755
--- a/Doc/html/mltex2html
+++ b/Doc/html/mltex2html
@@ -1,4 +1,4 @@
-#!/usr/local/bin/perl
+#!/usr/bin/perl
 #
 # This tool generates HTML pages in my own format given a stylized Latex file.
 #
diff --git a/README.mlton b/README.mlton
new file mode 100644
index 0000000..510e25d
--- /dev/null
+++ b/README.mlton
@@ -0,0 +1,8 @@
+The following changes were made to the MLRISC Library, in addition to
+deriving the `.mlb` files from the `.cm` files:
+
+* eliminate sequential `withtype` expansions: Most could be rewritten as a sequence of type definitions and datatype definitions.
+* eliminate higher-order functors: Every higher-order functor definition and application could be uncurried in the obvious way.
+* eliminate `where <str> = <str>`: Quite painful to expand out all the flexible types in the respective structures.  Furthermore, many of the implied type equalities aren't needed, but it's too hard to pick out the right ones.
+* `library/array-noneq.sml` (added, not exported): Implements `signature ARRAY_NONEQ`, similar to `signature ARRAY` from the Basis Library, but replacing the latter's `eqtype 'a array = 'a array` and `type 'a vector = 'a Vector.vector` with `type 'a array` and `type 'a vector`.  Thus, array-like containers may match `ARRAY_NONEQ`, whereas only the pervasive `'a array` container may match `ARRAY`.  (SML/NJ's implementation of `signature ARRAY` omits the type realizations.)
+* `library/dynamic-array.sml` and `library/hash-array.sml` (modifed): Replace `include ARRAY` with `include ARRAY_NONEQ`; see above.
diff --git a/Tools/nowhere/build.sh b/Tools/nowhere/build
similarity index 91%
rename from Tools/nowhere/build.sh
rename to Tools/nowhere/build
index da566c2..078c6c9 100755
--- a/Tools/nowhere/build.sh
+++ b/Tools/nowhere/build
@@ -1,7 +1,5 @@
 #!/bin/sh
 #
-# Copyright (c) 2018 The Fellowship of SML/NJ (https://smlnj.org)
-#
 # build script for nowhere
 #
 # options:
diff --git a/aliasing/pointsTo.sig b/aliasing/pointsTo.sig
index 9abcd4b..35655ef 100644
--- a/aliasing/pointsTo.sig
+++ b/aliasing/pointsTo.sig
@@ -7,18 +7,27 @@ signature POINTS_TO =
 sig
 
    eqtype edgekind 
-   structure C : CELLS_BASIS = CellsBasis
+   structure C : CELLS_BASIS (* = CellsBasis *)
+                 where type CellSet.cellset = CellsBasis.CellSet.cellset
+                   and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                   and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                   and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                   and type cell = CellsBasis.cell
+                   and type cellColor = CellsBasis.cellColor
+                   and type cellkind = CellsBasis.cellkind
+                   and type cellkindDesc = CellsBasis.cellkindDesc
+                   and type cellkindInfo = CellsBasis.cellkindInfo
 
    datatype cell = 
-     LINK  of region                             
-   | SREF  of C.cell * edges ref
-   | WREF  of C.cell * edges ref
-   | SCELL of C.cell * edges ref
-   | WCELL of C.cell * edges ref
+     LINK  of cell ref
+   | SREF  of C.cell * (edgekind * int * cell ref) list ref
+   | WREF  of C.cell * (edgekind * int * cell ref) list ref
+   | SCELL of C.cell * (edgekind * int * cell ref) list ref
+   | WCELL of C.cell * (edgekind * int * cell ref) list ref
    | TOP   of {mutable:bool, id:C.cell, name:string}
       (* a collapsed node *)
-   withtype region = cell ref
-   and      edges  = (edgekind * int * region) list
+   type region = cell ref
+   type edges  = (edgekind * int * region) list
 
    val reset    : (unit -> C.cell) -> unit
 
diff --git a/aliasing/pointsTo.sml b/aliasing/pointsTo.sml
index 5e6c79f..95821f0 100644
--- a/aliasing/pointsTo.sml
+++ b/aliasing/pointsTo.sml
@@ -10,16 +10,15 @@ struct
    structure C = CellsBasis
 
    datatype cell = 
-     LINK  of region
-   | SREF  of C.cell * edges ref
-   | WREF  of C.cell * edges ref
-   | SCELL of C.cell * edges ref
-   | WCELL of C.cell * edges ref
+     LINK  of cell ref
+   | SREF  of C.cell * (edgekind * int * cell ref) list ref
+   | WREF  of C.cell * (edgekind * int * cell ref) list ref
+   | SCELL of C.cell * (edgekind * int * cell ref) list ref
+   | WCELL of C.cell * (edgekind * int * cell ref) list ref
    | TOP   of {mutable:bool, id:C.cell, name:string}
       (* a collapsed node *)
-
-   withtype region = cell ref
-   and      edges  = (edgekind * int * region) list
+   type region = cell ref
+   type edges  = (edgekind * int * region) list
 
    fun error msg = MLRiscErrorMsg.error("PointsTo",msg)
 
diff --git a/alpha/backpatch/alphaJumps.sml b/alpha/backpatch/alphaJumps.sml
index df1d5ff..5636e24 100644
--- a/alpha/backpatch/alphaJumps.sml
+++ b/alpha/backpatch/alphaJumps.sml
@@ -5,10 +5,67 @@
  *)
 functor AlphaJumps
   (structure Instr : ALPHAINSTR
-   structure Shuffle : ALPHASHUFFLE 
-			   where I = Instr
-   structure MLTreeEval : MLTREE_EVAL 
-			   where T = Instr.T
+   structure Shuffle : ALPHASHUFFLE (* where I = Instr *)
+                       where type I.Constant.const = Instr.Constant.const
+                         and type I.Region.region = Instr.Region.region
+                         and type I.T.Basis.cond = Instr.T.Basis.cond
+                         and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                         and type I.T.Basis.ext = Instr.T.Basis.ext
+                         and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                         and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                         and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                         and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                         and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                         and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                         and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                         and type I.T.ccexp = Instr.T.ccexp
+                         and type I.T.fexp = Instr.T.fexp
+                         (* and type I.T.labexp = Instr.T.labexp *)
+                         and type I.T.mlrisc = Instr.T.mlrisc
+                         and type I.T.oper = Instr.T.oper
+                         and type I.T.rep = Instr.T.rep
+                         and type I.T.rexp = Instr.T.rexp
+                         and type I.T.stm = Instr.T.stm
+                         and type I.branch = Instr.branch
+                         and type I.cmove = Instr.cmove
+                         and type I.ea = Instr.ea
+                         and type I.fbranch = Instr.fbranch
+                         and type I.fcmove = Instr.fcmove
+                         and type I.fload = Instr.fload
+                         and type I.foperate = Instr.foperate
+                         and type I.foperateV = Instr.foperateV
+                         and type I.fstore = Instr.fstore
+                         and type I.funary = Instr.funary
+                         and type I.instr = Instr.instr
+                         and type I.instruction = Instr.instruction
+                         and type I.load = Instr.load
+                         and type I.operand = Instr.operand
+                         and type I.operate = Instr.operate
+                         and type I.operateV = Instr.operateV
+                         and type I.osf_user_palcode = Instr.osf_user_palcode
+                         and type I.pseudo_op = Instr.pseudo_op
+                         and type I.store = Instr.store
+   structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                          where type T.Basis.cond = Instr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = Instr.T.Basis.ext
+                            and type T.Basis.fcond = Instr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                            and type T.Constant.const = Instr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                            and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                            and type T.Region.region = Instr.T.Region.region
+                            and type T.ccexp = Instr.T.ccexp
+                            and type T.fexp = Instr.T.fexp
+                            (* and type T.labexp = Instr.T.labexp *)
+                            and type T.mlrisc = Instr.T.mlrisc
+                            and type T.oper = Instr.T.oper
+                            and type T.rep = Instr.T.rep
+                            and type T.rexp = Instr.T.rexp
+                            and type T.stm = Instr.T.stm
   ) : SDI_JUMPS = 
 struct
   structure I = Instr
diff --git a/alpha/emit/alphaAsm.sml b/alpha/emit/alphaAsm.sml
index e4a7e47..b9671b0 100644
--- a/alpha/emit/alphaAsm.sml
+++ b/alpha/emit/alphaAsm.sml
@@ -6,12 +6,88 @@
 
 
 functor AlphaAsmEmitter(structure S : INSTRUCTION_STREAM
-                        structure Instr : ALPHAINSTR
-                           where T = S.P.T
-                        structure Shuffle : ALPHASHUFFLE
-                           where I = Instr
-                        structure MLTreeEval : MLTREE_EVAL
-                           where T = Instr.T
+                        structure Instr : ALPHAINSTR (* where T = S.P.T *)
+                                          where type T.Basis.cond = S.P.T.Basis.cond
+                                            and type T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+                                            and type T.Basis.ext = S.P.T.Basis.ext
+                                            and type T.Basis.fcond = S.P.T.Basis.fcond
+                                            and type T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+                                            and type T.Constant.const = S.P.T.Constant.const
+                                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+                                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+                                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+                                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+                                            and type T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+                                            and type T.Region.region = S.P.T.Region.region
+                                            and type T.ccexp = S.P.T.ccexp
+                                            and type T.fexp = S.P.T.fexp
+                                            (* and type T.labexp = S.P.T.labexp *)
+                                            and type T.mlrisc = S.P.T.mlrisc
+                                            and type T.oper = S.P.T.oper
+                                            and type T.rep = S.P.T.rep
+                                            and type T.rexp = S.P.T.rexp
+                                            and type T.stm = S.P.T.stm
+                        structure Shuffle : ALPHASHUFFLE (* where I = Instr *)
+                                            where type I.Constant.const = Instr.Constant.const
+                                              and type I.Region.region = Instr.Region.region
+                                              and type I.T.Basis.cond = Instr.T.Basis.cond
+                                              and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                              and type I.T.Basis.ext = Instr.T.Basis.ext
+                                              and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                              and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                              and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                              and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                              and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                              and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                              and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                              and type I.T.ccexp = Instr.T.ccexp
+                                              and type I.T.fexp = Instr.T.fexp
+                                              (* and type I.T.labexp = Instr.T.labexp *)
+                                              and type I.T.mlrisc = Instr.T.mlrisc
+                                              and type I.T.oper = Instr.T.oper
+                                              and type I.T.rep = Instr.T.rep
+                                              and type I.T.rexp = Instr.T.rexp
+                                              and type I.T.stm = Instr.T.stm
+                                              and type I.branch = Instr.branch
+                                              and type I.cmove = Instr.cmove
+                                              and type I.ea = Instr.ea
+                                              and type I.fbranch = Instr.fbranch
+                                              and type I.fcmove = Instr.fcmove
+                                              and type I.fload = Instr.fload
+                                              and type I.foperate = Instr.foperate
+                                              and type I.foperateV = Instr.foperateV
+                                              and type I.fstore = Instr.fstore
+                                              and type I.funary = Instr.funary
+                                              and type I.instr = Instr.instr
+                                              and type I.instruction = Instr.instruction
+                                              and type I.load = Instr.load
+                                              and type I.operand = Instr.operand
+                                              and type I.operate = Instr.operate
+                                              and type I.operateV = Instr.operateV
+                                              and type I.osf_user_palcode = Instr.osf_user_palcode
+                                              and type I.pseudo_op = Instr.pseudo_op
+                                              and type I.store = Instr.store
+                        structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                               where type T.Basis.cond = Instr.T.Basis.cond
+                                                 and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                                 and type T.Basis.ext = Instr.T.Basis.ext
+                                                 and type T.Basis.fcond = Instr.T.Basis.fcond
+                                                 and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                                 and type T.Constant.const = Instr.T.Constant.const
+                                                 and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                                 and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                                 and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                                 and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                                 and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                                 and type T.Region.region = Instr.T.Region.region
+                                                 and type T.ccexp = Instr.T.ccexp
+                                                 and type T.fexp = Instr.T.fexp
+                                                 (* and type T.labexp = Instr.T.labexp *)
+                                                 and type T.mlrisc = Instr.T.mlrisc
+                                                 and type T.oper = Instr.T.oper
+                                                 and type T.rep = Instr.T.rep
+                                                 and type T.rexp = Instr.T.rexp
+                                                 and type T.stm = Instr.T.stm
                        ) : INSTRUCTION_EMITTER =
 struct
    structure I  = Instr
diff --git a/alpha/emit/alphaMC.sml b/alpha/emit/alphaMC.sml
index 60a010b..3f3ef65 100644
--- a/alpha/emit/alphaMC.sml
+++ b/alpha/emit/alphaMC.sml
@@ -6,7 +6,27 @@
 
 
 functor AlphaMCEmitter(structure Instr : ALPHAINSTR
-                       structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+                       structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                              where type T.Basis.cond = Instr.T.Basis.cond
+                                                and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                                and type T.Basis.ext = Instr.T.Basis.ext
+                                                and type T.Basis.fcond = Instr.T.Basis.fcond
+                                                and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                                and type T.Constant.const = Instr.T.Constant.const
+                                                and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                                and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                                and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                                and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                                and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                                and type T.Region.region = Instr.T.Region.region
+                                                and type T.ccexp = Instr.T.ccexp
+                                                and type T.fexp = Instr.T.fexp
+                                                (* and type T.labexp = Instr.T.labexp *)
+                                                and type T.mlrisc = Instr.T.mlrisc
+                                                and type T.oper = Instr.T.oper
+                                                and type T.rep = Instr.T.rep
+                                                and type T.rexp = Instr.T.rexp
+                                                and type T.stm = Instr.T.stm
                        structure Stream : INSTRUCTION_STREAM
                        structure CodeString : CODE_STRING
                       ) : INSTRUCTION_EMITTER =
diff --git a/alpha/flowgraph/alphaGasPseudoOps.sml b/alpha/flowgraph/alphaGasPseudoOps.sml
index 5f6a34c..d715a2b 100644
--- a/alpha/flowgraph/alphaGasPseudoOps.sml
+++ b/alpha/flowgraph/alphaGasPseudoOps.sml
@@ -1,6 +1,26 @@
 functor AlphaGasPseudoOps 
    ( structure T : MLTREE
-     structure MLTreeEval : MLTREE_EVAL  where T = T
+     structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                            where type T.Basis.cond = T.Basis.cond
+                              and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                              and type T.Basis.ext = T.Basis.ext
+                              and type T.Basis.fcond = T.Basis.fcond
+                              and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                              and type T.Constant.const = T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                              and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                              and type T.Region.region = T.Region.region
+                              and type T.ccexp = T.ccexp
+                              and type T.fexp = T.fexp
+                              (* and type T.labexp = T.labexp *)
+                              and type T.mlrisc = T.mlrisc
+                              and type T.oper = T.oper
+                              and type T.rep = T.rep
+                              and type T.rexp = T.rexp
+                              and type T.stm = T.stm
     ) : PSEUDO_OPS_BASIS = 
 
 struct
diff --git a/alpha/instructions/alphaInstr.sml b/alpha/instructions/alphaInstr.sml
index af0fb93..9c40c19 100644
--- a/alpha/instructions/alphaInstr.sml
+++ b/alpha/instructions/alphaInstr.sml
@@ -8,7 +8,16 @@
 signature ALPHAINSTR =
 sig
    structure C : ALPHACELLS
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    structure T : MLTREE
    structure Constant: CONSTANT
    structure Region : REGION
diff --git a/alpha/instructions/alphaProps.sml b/alpha/instructions/alphaProps.sml
index 8b6771e..6c39fa7 100644
--- a/alpha/instructions/alphaProps.sml
+++ b/alpha/instructions/alphaProps.sml
@@ -6,8 +6,48 @@
 
 functor AlphaProps
    (structure Instr : ALPHAINSTR
-    structure MLTreeHash :  MLTREE_HASH where T = Instr.T
-    structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+    structure MLTreeHash : MLTREE_HASH (* where T = Instr.T *)
+                           where type T.Basis.cond = Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = Instr.T.Basis.ext
+                             and type T.Basis.fcond = Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                             and type T.Region.region = Instr.T.Region.region
+                             and type T.ccexp = Instr.T.ccexp
+                             and type T.fexp = Instr.T.fexp
+                             (* and type T.labexp = Instr.T.labexp *)
+                             and type T.mlrisc = Instr.T.mlrisc
+                             and type T.oper = Instr.T.oper
+                             and type T.rep = Instr.T.rep
+                             and type T.rexp = Instr.T.rexp
+                             and type T.stm = Instr.T.stm
+    structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                           where type T.Basis.cond = Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = Instr.T.Basis.ext
+                             and type T.Basis.fcond = Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                             and type T.Region.region = Instr.T.Region.region
+                             and type T.ccexp = Instr.T.ccexp
+                             and type T.fexp = Instr.T.fexp
+                             (* and type T.labexp = Instr.T.labexp *)
+                             and type T.mlrisc = Instr.T.mlrisc
+                             and type T.oper = Instr.T.oper
+                             and type T.rep = Instr.T.rep
+                             and type T.rexp = Instr.T.rexp
+                             and type T.stm = Instr.T.stm
     ):INSN_PROPERTIES =
 struct
     structure I = Instr
diff --git a/alpha/mltree/alpha.sml b/alpha/mltree/alpha.sml
index c7b22a3..47c2f3b 100644
--- a/alpha/mltree/alpha.sml
+++ b/alpha/mltree/alpha.sml
@@ -11,11 +11,72 @@
 
 functor Alpha
    (structure AlphaInstr : ALPHAINSTR 
-    structure PseudoInstrs : ALPHA_PSEUDO_INSTR
-    			where I = AlphaInstr
-    structure ExtensionComp : MLTREE_EXTENSION_COMP
-    			where I = AlphaInstr
-			  and T = AlphaInstr.T
+    structure PseudoInstrs : ALPHA_PSEUDO_INSTR (* where I = AlphaInstr *)
+                             where type I.Constant.const = AlphaInstr.Constant.const
+                               and type I.Region.region = AlphaInstr.Region.region
+                               and type I.T.Basis.cond = AlphaInstr.T.Basis.cond
+                               and type I.T.Basis.div_rounding_mode = AlphaInstr.T.Basis.div_rounding_mode
+                               and type I.T.Basis.ext = AlphaInstr.T.Basis.ext
+                               and type I.T.Basis.fcond = AlphaInstr.T.Basis.fcond
+                               and type I.T.Basis.rounding_mode = AlphaInstr.T.Basis.rounding_mode
+                               and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) AlphaInstr.T.Extension.ccx
+                               and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) AlphaInstr.T.Extension.fx
+                               and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) AlphaInstr.T.Extension.rx
+                               and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) AlphaInstr.T.Extension.sx
+                               and type I.T.I.div_rounding_mode = AlphaInstr.T.I.div_rounding_mode
+                               and type I.T.ccexp = AlphaInstr.T.ccexp
+                               and type I.T.fexp = AlphaInstr.T.fexp
+                               (* and type I.T.labexp = AlphaInstr.T.labexp *)
+                               and type I.T.mlrisc = AlphaInstr.T.mlrisc
+                               and type I.T.oper = AlphaInstr.T.oper
+                               and type I.T.rep = AlphaInstr.T.rep
+                               and type I.T.rexp = AlphaInstr.T.rexp
+                               and type I.T.stm = AlphaInstr.T.stm
+                               and type I.branch = AlphaInstr.branch
+                               and type I.cmove = AlphaInstr.cmove
+                               and type I.ea = AlphaInstr.ea
+                               and type I.fbranch = AlphaInstr.fbranch
+                               and type I.fcmove = AlphaInstr.fcmove
+                               and type I.fload = AlphaInstr.fload
+                               and type I.foperate = AlphaInstr.foperate
+                               and type I.foperateV = AlphaInstr.foperateV
+                               and type I.fstore = AlphaInstr.fstore
+                               and type I.funary = AlphaInstr.funary
+                               and type I.instr = AlphaInstr.instr
+                               and type I.instruction = AlphaInstr.instruction
+                               and type I.load = AlphaInstr.load
+                               and type I.operand = AlphaInstr.operand
+                               and type I.operate = AlphaInstr.operate
+                               and type I.operateV = AlphaInstr.operateV
+                               and type I.osf_user_palcode = AlphaInstr.osf_user_palcode
+                               and type I.pseudo_op = AlphaInstr.pseudo_op
+                               and type I.store = AlphaInstr.store
+    structure ExtensionComp : MLTREE_EXTENSION_COMP (* where I = AlphaInstr and T = AlphaInstr.T *)
+                              where type I.addressing_mode = AlphaInstr.addressing_mode
+                                and type I.ea = AlphaInstr.ea
+                                and type I.instr = AlphaInstr.instr
+                                and type I.instruction = AlphaInstr.instruction
+                                and type I.operand = AlphaInstr.operand
+                              where type T.Basis.cond = AlphaInstr.T.Basis.cond
+                                and type T.Basis.div_rounding_mode = AlphaInstr.T.Basis.div_rounding_mode
+                                and type T.Basis.ext = AlphaInstr.T.Basis.ext
+                                and type T.Basis.fcond = AlphaInstr.T.Basis.fcond
+                                and type T.Basis.rounding_mode = AlphaInstr.T.Basis.rounding_mode
+                                and type T.Constant.const = AlphaInstr.T.Constant.const
+                                and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) AlphaInstr.T.Extension.ccx
+                                and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) AlphaInstr.T.Extension.fx
+                                and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) AlphaInstr.T.Extension.rx
+                                and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) AlphaInstr.T.Extension.sx
+                                and type T.I.div_rounding_mode = AlphaInstr.T.I.div_rounding_mode
+                                and type T.Region.region = AlphaInstr.T.Region.region
+                                and type T.ccexp = AlphaInstr.T.ccexp
+                                and type T.fexp = AlphaInstr.T.fexp
+                                (* and type T.labexp = AlphaInstr.T.labexp *)
+                                and type T.mlrisc = AlphaInstr.T.mlrisc
+                                and type T.oper = AlphaInstr.T.oper
+                                and type T.rep = AlphaInstr.T.rep
+                                and type T.rexp = AlphaInstr.T.rexp
+                                and type T.stm = AlphaInstr.T.stm
 
       (* Cost of multiplication in cycles *)
     val multCost : int ref
@@ -215,8 +276,10 @@ struct
    * Specialize the modules for multiplication/division 
    * by constant optimizations.
    *)
-  functor Multiply32 = MLTreeMult
-    (structure I = I
+
+  (* signed, trapping version of multiply and divide *)
+  structure Multiply32 = struct
+     structure I = I
      structure T = T
      structure CB = CellsBasis
 
@@ -256,10 +319,10 @@ struct
          in  [I.operate{oper=I.ADDL,ra=r,rb=zeroOpn,rc=tmp},
               I.operate{oper=I.SRA,ra=tmp,rb=I.IMMop i,rc=d}]
          end 
-    )
+  end
 
-  functor Multiply64 = MLTreeMult
-    (structure I = I
+  structure Multiply64 = struct
+     structure I = I
      structure T = T
      structure CB = CellsBasis
    
@@ -273,23 +336,25 @@ struct
      fun slli{r,i,d} = [I.operate{oper=I.SLL,ra=r,rb=I.IMMop i,rc=d}]
      fun srli{r,i,d} = [I.operate{oper=I.SRL,ra=r,rb=I.IMMop i,rc=d}]
      fun srai{r,i,d} = [I.operate{oper=I.SRA,ra=r,rb=I.IMMop i,rc=d}]
-    )
+  end
 
   (* signed, trapping version of multiply and divide *)
-  structure Mult32 = Multiply32
-    (val trapping = true
+  structure Mult32 = MLTreeMult
+    (open Multiply32
+     val trapping = true
      val multCost = multCost
      fun addv{r1,r2,d} = [I.operatev{oper=I.ADDLV,ra=r1,rb=I.REGop r2,rc=d}]
      fun subv{r1,r2,d} = [I.operatev{oper=I.SUBLV,ra=r1,rb=I.REGop r2,rc=d}]
      val sh1addv = NONE
      val sh2addv = NONE
      val sh3addv = NONE
-    )
-    (val signed = true)
+
+     val signed = true)
 
   (* non-trapping version of multiply and divide *)
-  functor Mul32 = Multiply32
-    (val trapping = false
+  structure Mul32 = struct
+     open Multiply32
+     val trapping = false
      val multCost = multCost
      fun addv{r1,r2,d} = [I.operate{oper=I.ADDL,ra=r1,rb=I.REGop r2,rc=d}]
      fun subv{r1,r2,d} = [I.operate{oper=I.SUBL,ra=r1,rb=I.REGop r2,rc=d}]
@@ -298,25 +363,27 @@ struct
                     [I.operate{oper=I.S4ADDL,ra=r1,rb=I.REGop r2,rc=d}])
      val sh3addv = SOME(fn {r1,r2,d} => 
                     [I.operate{oper=I.S8ADDL,ra=r1,rb=I.REGop r2,rc=d}])
-    )
-  structure Mulu32 = Mul32(val signed = false)
-  structure Muls32 = Mul32(val signed = true)
+  end
+  structure Mulu32 = MLTreeMult(open Mul32 val signed = false)
+  structure Muls32 = MLTreeMult(open Mul32 val signed = true)
 
   (* signed, trapping version of multiply and divide *)
-  structure Mult64 = Multiply64
-    (val trapping = true
+  structure Mult64 = MLTreeMult
+    (open Multiply64
+     val trapping = true
      val multCost = multCost
      fun addv{r1,r2,d} = [I.operatev{oper=I.ADDQV,ra=r1,rb=I.REGop r2,rc=d}]
      fun subv{r1,r2,d} = [I.operatev{oper=I.SUBQV,ra=r1,rb=I.REGop r2,rc=d}]
      val sh1addv = NONE
      val sh2addv = NONE
      val sh3addv = NONE
-    )
-    (val signed = true)
+
+     val signed = true)
 
   (* unsigned, non-trapping version of multiply and divide *)
-  functor Mul64 = Multiply64
-    (val trapping = false
+  structure Mul64 = struct
+     open Multiply64
+     val trapping = false
      val multCost = multCost
      fun addv{r1,r2,d} = [I.operate{oper=I.ADDQ,ra=r1,rb=I.REGop r2,rc=d}]
      fun subv{r1,r2,d} = [I.operate{oper=I.SUBQ,ra=r1,rb=I.REGop r2,rc=d}]
@@ -325,9 +392,9 @@ struct
                     [I.operate{oper=I.S4ADDQ,ra=r1,rb=I.REGop r2,rc=d}])
      val sh3addv = SOME(fn {r1,r2,d} => 
                     [I.operate{oper=I.S8ADDQ,ra=r1,rb=I.REGop r2,rc=d}])
-    )
-  structure Mulu64 = Mul64(val signed = false)
-  structure Muls64 = Mul64(val signed = true)
+  end
+  structure Mulu64 = MLTreeMult(open Mul64 val signed = false)
+  structure Muls64 = MLTreeMult(open Mul64  val signed = true)
 
   (* 
    * The main stuff
diff --git a/alpha/mltree/alphaPseudoInstr.sig b/alpha/mltree/alphaPseudoInstr.sig
index a22feeb..f9c584e 100644
--- a/alpha/mltree/alphaPseudoInstr.sig
+++ b/alpha/mltree/alphaPseudoInstr.sig
@@ -4,10 +4,39 @@ signature ALPHA_PSEUDO_INSTR =
 sig
    structure I : ALPHAINSTR
    structure T : MLTREE
+                 where type Basis.cond = I.T.Basis.cond
+                   and type Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                   and type Basis.ext = I.T.Basis.ext
+                   and type Basis.fcond = I.T.Basis.fcond
+                   and type Basis.rounding_mode = I.T.Basis.rounding_mode
+                   and type Constant.const = I.T.Constant.const
+                   and type ('s,'r,'f,'c) Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                   and type ('s,'r,'f,'c) Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                   and type ('s,'r,'f,'c) Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                   and type ('s,'r,'f,'c) Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                   and type I.div_rounding_mode = I.T.I.div_rounding_mode
+                   and type Region.region = I.T.Region.region
+                   and type ccexp = I.T.ccexp
+                   and type fexp = I.T.fexp
+                   (* and type labexp = I.T.labexp *)
+                   and type mlrisc = I.T.mlrisc
+                   and type oper = I.T.oper
+                   and type rep = I.T.rep
+                   and type rexp = I.T.rexp
+                   and type stm = I.T.stm
    structure C : ALPHACELLS
-     sharing C = I.C
-     sharing I.T = T
-   structure CB: CELLS_BASIS = CellsBasis
+     (* sharing C = I.C *)
+     (* sharing I.T = T *)
+   structure CB: CELLS_BASIS (* = CellsBasis *)
+                 where type CellSet.cellset = CellsBasis.CellSet.cellset
+                   and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                   and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                   and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                   and type cell = CellsBasis.cell
+                   and type cellColor = CellsBasis.cellColor
+                   and type cellkind = CellsBasis.cellkind
+                   and type cellkindDesc = CellsBasis.cellkindDesc
+                   and type cellkindInfo = CellsBasis.cellkindInfo
   
    type reduceOpnd = I.operand -> CB.cell
 
diff --git a/amd64/amd64MC.sml b/amd64/amd64MC.sml
index 9b28564..7b0b95c 100644
--- a/amd64/amd64MC.sml
+++ b/amd64/amd64MC.sml
@@ -9,9 +9,70 @@
 functor AMD64MCEmitter (
 
     structure Instr : AMD64INSTR
-    structure Shuffle : AMD64SHUFFLE where I = Instr
-    structure MLTreeEval : MLTREE_EVAL where T = Instr.T
-    structure AsmEmitter : INSTRUCTION_EMITTER where I = Instr
+    structure Shuffle : AMD64SHUFFLE (* where I = Instr *)
+                        where type I.Constant.const = Instr.Constant.const
+                          and type I.Region.region = Instr.Region.region
+                          and type I.T.Basis.cond = Instr.T.Basis.cond
+                          and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                          and type I.T.Basis.ext = Instr.T.Basis.ext
+                          and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                          and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                          and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                          and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                          and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                          and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                          and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                          and type I.T.ccexp = Instr.T.ccexp
+                          and type I.T.fexp = Instr.T.fexp
+                          (* and type I.T.labexp = Instr.T.labexp *)
+                          and type I.T.mlrisc = Instr.T.mlrisc
+                          and type I.T.oper = Instr.T.oper
+                          and type I.T.rep = Instr.T.rep
+                          and type I.T.rexp = Instr.T.rexp
+                          and type I.T.stm = Instr.T.stm
+                          (* and type I.addressing_mode = Instr.addressing_mode *)
+                          and type I.binaryOp = Instr.binaryOp
+                          and type I.bitOp = Instr.bitOp
+                          and type I.cond = Instr.cond
+                          and type I.fbin_op = Instr.fbin_op
+                          and type I.fcom_op = Instr.fcom_op
+                          and type I.fmove_op = Instr.fmove_op
+                          and type I.fsize = Instr.fsize
+                          and type I.instr = Instr.instr
+                          and type I.instruction = Instr.instruction
+                          and type I.isize = Instr.isize
+                          and type I.move = Instr.move
+                          and type I.multDivOp = Instr.multDivOp
+                          and type I.operand = Instr.operand
+                          and type I.shiftOp = Instr.shiftOp
+                          and type I.unaryOp = Instr.unaryOp
+    structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                           where type T.Basis.cond = Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = Instr.T.Basis.ext
+                             and type T.Basis.fcond = Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                             and type T.Region.region = Instr.T.Region.region
+                             and type T.ccexp = Instr.T.ccexp
+                             and type T.fexp = Instr.T.fexp
+                             (* and type T.labexp = Instr.T.labexp *)
+                             and type T.mlrisc = Instr.T.mlrisc
+                             and type T.oper = Instr.T.oper
+                             and type T.rep = Instr.T.rep
+                             and type T.rexp = Instr.T.rexp
+                             and type T.stm = Instr.T.stm
+    structure AsmEmitter : INSTRUCTION_EMITTER (* where I = Instr *)
+                           where type I.addressing_mode = Instr.addressing_mode
+                             and type I.ea = Instr.ea
+                             and type I.instr = Instr.instr
+                             and type I.instruction = Instr.instruction
+                             and type I.operand = Instr.operand
 
   ) : MC_EMIT = struct
     structure I = Instr
diff --git a/amd64/backpatch/amd64Jumps.sml b/amd64/backpatch/amd64Jumps.sml
index a99cf0c..1b14ed4 100644
--- a/amd64/backpatch/amd64Jumps.sml
+++ b/amd64/backpatch/amd64Jumps.sml
@@ -5,9 +5,71 @@
 
 functor AMD64Jumps
   (structure Instr : AMD64INSTR
-   structure Eval : MLTREE_EVAL where T = Instr.T
-   structure Shuffle : AMD64SHUFFLE where I = Instr
-   structure MCEmitter : MC_EMIT where I = Instr) : SDI_JUMPS = 
+   structure Eval : MLTREE_EVAL (* where T = Instr.T *)
+                    where type T.Basis.cond = Instr.T.Basis.cond
+                      and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                      and type T.Basis.ext = Instr.T.Basis.ext
+                      and type T.Basis.fcond = Instr.T.Basis.fcond
+                      and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                      and type T.Constant.const = Instr.T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                      and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                      and type T.Region.region = Instr.T.Region.region
+                      and type T.ccexp = Instr.T.ccexp
+                      and type T.fexp = Instr.T.fexp
+                      (* and type T.labexp = Instr.T.labexp *)
+                      and type T.mlrisc = Instr.T.mlrisc
+                      and type T.oper = Instr.T.oper
+                      and type T.rep = Instr.T.rep
+                      and type T.rexp = Instr.T.rexp
+                      and type T.stm = Instr.T.stm
+   structure Shuffle : AMD64SHUFFLE (* where I = Instr *)
+                       where type I.Constant.const = Instr.Constant.const
+                         and type I.Region.region = Instr.Region.region
+                         and type I.T.Basis.cond = Instr.T.Basis.cond
+                         and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                         and type I.T.Basis.ext = Instr.T.Basis.ext
+                         and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                         and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                         and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                         and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                         and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                         and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                         and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                         and type I.T.ccexp = Instr.T.ccexp
+                         and type I.T.fexp = Instr.T.fexp
+                         (* and type I.T.labexp = Instr.T.labexp *)
+                         and type I.T.mlrisc = Instr.T.mlrisc
+                         and type I.T.oper = Instr.T.oper
+                         and type I.T.rep = Instr.T.rep
+                         and type I.T.rexp = Instr.T.rexp
+                         and type I.T.stm = Instr.T.stm
+                         (* and type I.addressing_mode = Instr.addressing_mode *)
+                         and type I.binaryOp = Instr.binaryOp
+                         and type I.bitOp = Instr.bitOp
+                         and type I.cond = Instr.cond
+                         and type I.fbin_op = Instr.fbin_op
+                         and type I.fcom_op = Instr.fcom_op
+                         and type I.fmove_op = Instr.fmove_op
+                         and type I.fsize = Instr.fsize
+                         and type I.instr = Instr.instr
+                         and type I.instruction = Instr.instruction
+                         and type I.isize = Instr.isize
+                         and type I.move = Instr.move
+                         and type I.multDivOp = Instr.multDivOp
+                         and type I.operand = Instr.operand
+                         and type I.shiftOp = Instr.shiftOp
+                         and type I.unaryOp = Instr.unaryOp
+   structure MCEmitter : MC_EMIT (* where I = Instr *)
+                         where type I.addressing_mode = Instr.addressing_mode
+                           and type I.ea = Instr.ea
+                           and type I.instr = Instr.instr
+                           and type I.instruction = Instr.instruction
+                           and type I.operand = Instr.operand
+  ) : SDI_JUMPS =
 struct
   structure I = Instr
   structure C = I.C
diff --git a/amd64/emit/amd64Asm.sml b/amd64/emit/amd64Asm.sml
index 57f80e3..96f3896 100644
--- a/amd64/emit/amd64Asm.sml
+++ b/amd64/emit/amd64Asm.sml
@@ -6,12 +6,85 @@
 
 
 functor AMD64AsmEmitter(structure S : INSTRUCTION_STREAM
-                        structure Instr : AMD64INSTR
-                           where T = S.P.T
-                        structure Shuffle : AMD64SHUFFLE
-                           where I = Instr
-                        structure MLTreeEval : MLTREE_EVAL
-                           where T = Instr.T
+                        structure Instr : AMD64INSTR (* where T = S.P.T *)
+                                        where type T.Basis.cond = S.P.T.Basis.cond
+                                          and type T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+                                          and type T.Basis.ext = S.P.T.Basis.ext
+                                          and type T.Basis.fcond = S.P.T.Basis.fcond
+                                          and type T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+                                          and type T.Constant.const = S.P.T.Constant.const
+                                          and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+                                          and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+                                          and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+                                          and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+                                          and type T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+                                          and type T.Region.region = S.P.T.Region.region
+                                          and type T.ccexp = S.P.T.ccexp
+                                          and type T.fexp = S.P.T.fexp
+                                          (* and type T.labexp = S.P.T.labexp *)
+                                          and type T.mlrisc = S.P.T.mlrisc
+                                          and type T.oper = S.P.T.oper
+                                          and type T.rep = S.P.T.rep
+                                          and type T.rexp = S.P.T.rexp
+                                          and type T.stm = S.P.T.stm
+                        structure Shuffle : AMD64SHUFFLE (* where I = Instr *)
+                                          where type I.Constant.const = Instr.Constant.const
+                                            and type I.Region.region = Instr.Region.region
+                                            and type I.T.Basis.cond = Instr.T.Basis.cond
+                                            and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                            and type I.T.Basis.ext = Instr.T.Basis.ext
+                                            and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                            and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                            and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                            and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                            and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                            and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                            and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                            and type I.T.ccexp = Instr.T.ccexp
+                                            and type I.T.fexp = Instr.T.fexp
+                                            (* and type I.T.labexp = Instr.T.labexp *)
+                                            and type I.T.mlrisc = Instr.T.mlrisc
+                                            and type I.T.oper = Instr.T.oper
+                                            and type I.T.rep = Instr.T.rep
+                                            and type I.T.rexp = Instr.T.rexp
+                                            and type I.T.stm = Instr.T.stm
+                                            (* and type I.addressing_mode = Instr.addressing_mode *)
+                                            and type I.binaryOp = Instr.binaryOp
+                                            and type I.bitOp = Instr.bitOp
+                                            and type I.cond = Instr.cond
+                                            and type I.fbin_op = Instr.fbin_op
+                                            and type I.fcom_op = Instr.fcom_op
+                                            and type I.fmove_op = Instr.fmove_op
+                                            and type I.fsize = Instr.fsize
+                                            and type I.instr = Instr.instr
+                                            and type I.instruction = Instr.instruction
+                                            and type I.isize = Instr.isize
+                                            and type I.move = Instr.move
+                                            and type I.multDivOp = Instr.multDivOp
+                                            and type I.operand = Instr.operand
+                                            and type I.shiftOp = Instr.shiftOp
+                                            and type I.unaryOp = Instr.unaryOp
+                        structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                             where type T.Basis.cond = Instr.T.Basis.cond
+                                               and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                               and type T.Basis.ext = Instr.T.Basis.ext
+                                               and type T.Basis.fcond = Instr.T.Basis.fcond
+                                               and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                               and type T.Constant.const = Instr.T.Constant.const
+                                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                               and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                               and type T.Region.region = Instr.T.Region.region
+                                               and type T.ccexp = Instr.T.ccexp
+                                               and type T.fexp = Instr.T.fexp
+                                               (* and type T.labexp = Instr.T.labexp *)
+                                               and type T.mlrisc = Instr.T.mlrisc
+                                               and type T.oper = Instr.T.oper
+                                               and type T.rep = Instr.T.rep
+                                               and type T.rexp = Instr.T.rexp
+                                               and type T.stm = Instr.T.stm
                        ) : INSTRUCTION_EMITTER =
 struct
    structure I  = Instr
diff --git a/amd64/flowgraph/amd64-darwin-pseudo-ops.sml b/amd64/flowgraph/amd64-darwin-pseudo-ops.sml
index de9238f..c60550a 100644
--- a/amd64/flowgraph/amd64-darwin-pseudo-ops.sml
+++ b/amd64/flowgraph/amd64-darwin-pseudo-ops.sml
@@ -7,7 +7,27 @@
 functor AMD64DarwinPseudoOps (
 
     structure T : MLTREE
-    structure MLTreeEval : MLTREE_EVAL  where T = T
+    structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                           where type T.Basis.cond = T.Basis.cond
+                             and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                             and type T.Basis.ext = T.Basis.ext
+                             and type T.Basis.fcond = T.Basis.fcond
+                             and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                             and type T.Constant.const = T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                             and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                             and type T.Region.region = T.Region.region
+                             and type T.ccexp = T.ccexp
+                             and type T.fexp = T.fexp
+                             (* and type T.labexp = T.labexp *)
+                             and type T.mlrisc = T.mlrisc
+                             and type T.oper = T.oper
+                             and type T.rep = T.rep
+                             and type T.rexp = T.rexp
+                             and type T.stm = T.stm
 
   ) : PSEUDO_OPS_BASIS = struct
 
diff --git a/amd64/flowgraph/amd64GasPseudoOps.sml b/amd64/flowgraph/amd64GasPseudoOps.sml
index f9adca4..8addf5d 100644
--- a/amd64/flowgraph/amd64GasPseudoOps.sml
+++ b/amd64/flowgraph/amd64GasPseudoOps.sml
@@ -6,7 +6,27 @@
 
 functor AMD64GasPseudoOps (
     structure T : MLTREE
-    structure MLTreeEval : MLTREE_EVAL  where T = T
+    structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                           where type T.Basis.cond = T.Basis.cond
+                             and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                             and type T.Basis.ext = T.Basis.ext
+                             and type T.Basis.fcond = T.Basis.fcond
+                             and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                             and type T.Constant.const = T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                             and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                             and type T.Region.region = T.Region.region
+                             and type T.ccexp = T.ccexp
+                             and type T.fexp = T.fexp
+                             (* and type T.labexp = T.labexp *)
+                             and type T.mlrisc = T.mlrisc
+                             and type T.oper = T.oper
+                             and type T.rep = T.rep
+                             and type T.rexp = T.rexp
+                             and type T.stm = T.stm
   ) : PSEUDO_OPS_BASIS =  struct
     structure T = T
     structure PB = PseudoOpsBasisTyp
diff --git a/amd64/instructions/amd64CompInstrExt.sml b/amd64/instructions/amd64CompInstrExt.sml
index 816fb05..0520add 100644
--- a/amd64/instructions/amd64CompInstrExt.sml
+++ b/amd64/instructions/amd64CompInstrExt.sml
@@ -7,11 +7,54 @@
 
 signature AMD64COMP_INSTR_EXT = sig
   structure I : AMD64INSTR
-  structure TS : MLTREE_STREAM
-		 where T = I.T
-  structure CFG : CONTROL_FLOW_GRAPH 
- 	         where I = I
-                   and P = TS.S.P
+  structure TS : MLTREE_STREAM (* where T = I.T *)
+                 where type T.Basis.cond = I.T.Basis.cond
+                   and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                   and type T.Basis.ext = I.T.Basis.ext
+                   and type T.Basis.fcond = I.T.Basis.fcond
+                   and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                   and type T.Constant.const = I.T.Constant.const
+                   and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                   and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                   and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                   and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                   and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                   and type T.Region.region = I.T.Region.region
+                   and type T.ccexp = I.T.ccexp
+                   and type T.fexp = I.T.fexp
+                   (* and type T.labexp = I.T.labexp *)
+                   and type T.mlrisc = I.T.mlrisc
+                   and type T.oper = I.T.oper
+                   and type T.rep = I.T.rep
+	           and type T.rexp = I.T.rexp
+                   and type T.stm = I.T.stm
+  structure CFG : CONTROL_FLOW_GRAPH (* where I = I and P = TS.S.P *)
+                  where type I.addressing_mode = I.addressing_mode
+                    and type I.ea = I.ea
+                    and type I.instr = I.instr
+                    and type I.instruction = I.instruction
+                    and type I.operand = I.operand
+                  where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                    and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                    and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                    and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                    and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                    and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                    and type P.T.Constant.const = TS.S.P.T.Constant.const
+                    and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                    and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                    and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                    and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                    and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                    and type P.T.Region.region = TS.S.P.T.Region.region
+                    and type P.T.ccexp = TS.S.P.T.ccexp
+                    and type P.T.fexp = TS.S.P.T.fexp
+                    (* and type P.T.labexp = TS.S.P.T.labexp *)
+                    and type P.T.mlrisc = TS.S.P.T.mlrisc
+                    and type P.T.oper = TS.S.P.T.oper
+                    and type P.T.rep = TS.S.P.T.rep
+                    and type P.T.rexp = TS.S.P.T.rexp
+                    and type P.T.stm = TS.S.P.T.stm
 
   type reducer = 
     (I.instruction, I.C.cellset, I.operand, I.addressing_mode, CFG.cfg) TS.reducer
@@ -26,11 +69,54 @@ end
 
 functor AMD64CompInstrExt
   ( structure I : AMD64INSTR
-    structure TS  : MLTREE_STREAM
-		   where T = I.T
-    structure CFG : CONTROL_FLOW_GRAPH 
-		   where P = TS.S.P
-		     and I = I
+    structure TS  : MLTREE_STREAM (* where T = I.T *)
+                    where type T.Basis.cond = I.T.Basis.cond
+                      and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                      and type T.Basis.ext = I.T.Basis.ext
+                      and type T.Basis.fcond = I.T.Basis.fcond
+                      and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                      and type T.Constant.const = I.T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                      and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                      and type T.Region.region = I.T.Region.region
+                      and type T.ccexp = I.T.ccexp
+                      and type T.fexp = I.T.fexp
+                      (* and type T.labexp = I.T.labexp *)
+                      and type T.mlrisc = I.T.mlrisc
+                      and type T.oper = I.T.oper
+                      and type T.rep = I.T.rep
+                      and type T.rexp = I.T.rexp
+                      and type T.stm = I.T.stm
+    structure CFG : CONTROL_FLOW_GRAPH (* where P = TS.S.P and I = I *)
+                    where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                      and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                      and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                      and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                      and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                      and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                      and type P.T.Constant.const = TS.S.P.T.Constant.const
+                      and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                      and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                      and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                      and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                      and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                      and type P.T.Region.region = TS.S.P.T.Region.region
+                      and type P.T.ccexp = TS.S.P.T.ccexp
+                      and type P.T.fexp = TS.S.P.T.fexp
+                      (* and type P.T.labexp = TS.S.P.T.labexp *)
+                      and type P.T.mlrisc = TS.S.P.T.mlrisc
+                      and type P.T.oper = TS.S.P.T.oper
+                      and type P.T.rep = TS.S.P.T.rep
+                      and type P.T.rexp = TS.S.P.T.rexp
+                      and type P.T.stm = TS.S.P.T.stm
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
    ) : AMD64COMP_INSTR_EXT = 
 struct
   structure CFG = CFG
diff --git a/amd64/instructions/amd64Instr.sml b/amd64/instructions/amd64Instr.sml
index 79ec201..8a004dd 100644
--- a/amd64/instructions/amd64Instr.sml
+++ b/amd64/instructions/amd64Instr.sml
@@ -8,7 +8,16 @@
 signature AMD64INSTR =
 sig
    structure C : AMD64CELLS
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    structure T : MLTREE
    structure Constant: CONSTANT
    structure Region : REGION
diff --git a/amd64/instructions/amd64Peephole.peep b/amd64/instructions/amd64Peephole.peep
index c12b8ad..3a37542 100644
--- a/amd64/instructions/amd64Peephole.peep
+++ b/amd64/instructions/amd64Peephole.peep
@@ -20,7 +20,27 @@ in
 functor AMD64Peephole
    (structure Instr : AMD64INSTR
     structure Eval  : MLTREE_EVAL
-      sharing Instr.T = Eval.T
+      (* sharing Instr.T = Eval.T *)
+      where type T.Basis.cond = Instr.T.Basis.cond
+        and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+        and type T.Basis.ext = Instr.T.Basis.ext
+        and type T.Basis.fcond = Instr.T.Basis.fcond
+        and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+        and type T.Constant.const = Instr.T.Constant.const
+        and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+        and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+        and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+        and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+        and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+        and type T.Region.region = Instr.T.Region.region
+        and type T.ccexp = Instr.T.ccexp
+        and type T.fexp = Instr.T.fexp
+        (* and type T.labexp = Instr.T.labexp *)
+        and type T.mlrisc = Instr.T.mlrisc
+        and type T.oper = Instr.T.oper
+        and type T.rep = Instr.T.rep
+        and type T.rexp = Instr.T.rexp
+        and type T.stm = Instr.T.stm
    ) : PEEPHOLE =
 struct
    structure I = Instr
diff --git a/amd64/instructions/amd64Peephole.sml b/amd64/instructions/amd64Peephole.sml
index 9ae265e..64e33f6 100644
--- a/amd64/instructions/amd64Peephole.sml
+++ b/amd64/instructions/amd64Peephole.sml
@@ -12,7 +12,27 @@ functor AMD64Peephole(
                       structure Eval : MLTREE_EVAL
 
 (*#line 23.7 "amd64Peephole.peep"*)
-                      sharing Instr.T = Eval.T
+                      (* sharing Instr.T = Eval.T *)
+                      where type T.Basis.cond = Instr.T.Basis.cond
+                       and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                       and type T.Basis.ext = Instr.T.Basis.ext
+                       and type T.Basis.fcond = Instr.T.Basis.fcond
+                       and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                       and type T.Constant.const = Instr.T.Constant.const
+                       and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                       and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                       and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                       and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                       and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                       and type T.Region.region = Instr.T.Region.region
+                       and type T.ccexp = Instr.T.ccexp
+                       and type T.fexp = Instr.T.fexp
+                       (* and type T.labexp = Instr.T.labexp *)
+                       and type T.mlrisc = Instr.T.mlrisc
+                       and type T.oper = Instr.T.oper
+                       and type T.rep = Instr.T.rep
+                       and type T.rexp = Instr.T.rexp
+                       and type T.stm = Instr.T.stm
                      ): PEEPHOLE =
 struct
 
diff --git a/amd64/instructions/amd64Props.sml b/amd64/instructions/amd64Props.sml
index c6c1eb8..7c0069d 100644
--- a/amd64/instructions/amd64Props.sml
+++ b/amd64/instructions/amd64Props.sml
@@ -15,10 +15,48 @@ signature AMD64INSN_PROPERTIES =
 
 functor AMD64Props (
     structure Instr : AMD64INSTR
-    structure MLTreeHash : MLTREE_HASH
-        where T = Instr.T
-    structure MLTreeEval : MLTREE_EVAL
-        where T = Instr.T
+    structure MLTreeHash : MLTREE_HASH (* where T = Instr.T *)
+                           where type T.Basis.cond = Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = Instr.T.Basis.ext
+                             and type T.Basis.fcond = Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                             and type T.Region.region = Instr.T.Region.region
+                             and type T.ccexp = Instr.T.ccexp
+                             and type T.fexp = Instr.T.fexp
+                             (* and type T.labexp = Instr.T.labexp *)
+                             and type T.mlrisc = Instr.T.mlrisc
+                             and type T.oper = Instr.T.oper
+                             and type T.rep = Instr.T.rep
+                             and type T.rexp = Instr.T.rexp
+                             and type T.stm = Instr.T.stm
+    structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                           where type T.Basis.cond = Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = Instr.T.Basis.ext
+                             and type T.Basis.fcond = Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                             and type T.Region.region = Instr.T.Region.region
+                             and type T.ccexp = Instr.T.ccexp
+                             and type T.fexp = Instr.T.fexp
+                             (* and type T.labexp = Instr.T.labexp *)
+                             and type T.mlrisc = Instr.T.mlrisc
+                             and type T.oper = Instr.T.oper
+                             and type T.rep = Instr.T.rep
+                             and type T.rexp = Instr.T.rexp
+                             and type T.stm = Instr.T.stm
   ) : AMD64INSN_PROPERTIES =
   struct
 
diff --git a/amd64/mltree/amd64-gen.sml b/amd64/mltree/amd64-gen.sml
index 2255bcc..1d56946 100644
--- a/amd64/mltree/amd64-gen.sml
+++ b/amd64/mltree/amd64-gen.sml
@@ -9,10 +9,53 @@
 functor AMD64Gen (
 
     structure I : AMD64INSTR
-    structure MLTreeUtils : MLTREE_UTILS
-	where T = I.T
-    structure ExtensionComp : MLTREE_EXTENSION_COMP
-        where I = I and T = I.T
+    structure MLTreeUtils : MLTREE_UTILS (* where T = I.T *)
+                            where type T.Basis.cond = I.T.Basis.cond
+                              and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                              and type T.Basis.ext = I.T.Basis.ext
+                              and type T.Basis.fcond = I.T.Basis.fcond
+                              and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                              and type T.Constant.const = I.T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                              and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                               and type T.Region.region = I.T.Region.region
+                              and type T.ccexp = I.T.ccexp
+                              and type T.fexp = I.T.fexp
+                              (* and type T.labexp = I.T.labexp *)
+                              and type T.mlrisc = I.T.mlrisc
+                              and type T.oper = I.T.oper
+                              and type T.rep = I.T.rep
+                              and type T.rexp = I.T.rexp
+                              and type T.stm = I.T.stm
+    structure ExtensionComp : MLTREE_EXTENSION_COMP (* where I = I and T = I.T *)
+                              where type I.addressing_mode = I.addressing_mode
+                                and type I.ea = I.ea
+                                and type I.instr = I.instr
+                                and type I.instruction = I.instruction
+                                and type I.operand = I.operand
+                              where type T.Basis.cond = I.T.Basis.cond
+                                and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                                and type T.Basis.ext = I.T.Basis.ext
+                                and type T.Basis.fcond = I.T.Basis.fcond
+                                and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                                and type T.Constant.const = I.T.Constant.const
+                                and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                                and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                                and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                                and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                                and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                                and type T.Region.region = I.T.Region.region
+                                and type T.ccexp = I.T.ccexp
+                                and type T.fexp = I.T.fexp
+                                (* and type T.labexp = I.T.labexp *)
+                                and type T.mlrisc = I.T.mlrisc
+                                and type T.oper = I.T.oper
+                                and type T.rep = I.T.rep
+                                and type T.rexp = I.T.rexp
+                                and type T.stm = I.T.stm
 
     (* Take a number of bits and returns an rexp that points to a literal with the high bit set.
      * We need this literal value for floating-point negation and absolute value (at least
diff --git a/amd64/omit-frameptr/amd64omit-frameptr.sml b/amd64/omit-frameptr/amd64omit-frameptr.sml
index d194762..f749f7d 100644
--- a/amd64/omit-frameptr/amd64omit-frameptr.sml
+++ b/amd64/omit-frameptr/amd64omit-frameptr.sml
@@ -16,9 +16,51 @@
 
 functor AMD64OmitFramePointer (
     structure I : AMD64INSTR
-    structure CFG : CONTROL_FLOW_GRAPH where I = I): OMIT_FRAME_POINTER =
+    structure CFG : CONTROL_FLOW_GRAPH (* where I = I *)
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand): OMIT_FRAME_POINTER =
 (*
-    structure MemRegs : MEMORY_REGISTERS where I=I
+    structure MemRegs : MEMORY_REGISTERS (* where I = I *)
+                        where type I.Constant.const = I.Constant.const
+                          and type I.Region.region = I.Region.region
+                          and type I.T.Basis.cond = I.T.Basis.cond
+                          and type I.T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                          and type I.T.Basis.ext = I.T.Basis.ext
+                          and type I.T.Basis.fcond = I.T.Basis.fcond
+                          and type I.T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                          and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                          and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                          and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                          and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                          and type I.T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                          and type I.T.ccexp = I.T.ccexp
+                          and type I.T.fexp = I.T.fexp
+                          (* and type I.T.labexp = I.T.labexp *)
+                          and type I.T.mlrisc = I.T.mlrisc
+                          and type I.T.oper = I.T.oper
+                          and type I.T.rep = I.T.rep
+                          and type I.T.rexp = I.T.rexp
+                          and type I.T.stm = I.T.stm
+                          (* and type I.addressing_mode = I.addressing_mode *)
+                          and type I.binaryOp = I.binaryOp
+                          and type I.bitOp = I.bitOp
+                          and type I.cond = I.cond
+                          and type I.fbinOp = I.fbinOp
+                          and type I.fenvOp = I.fenvOp
+                          and type I.fibinOp = I.fibinOp
+                          and type I.fsize = I.fsize
+                          and type I.funOp = I.funOp
+                          and type I.instr = I.instr
+                          and type I.instruction = I.instruction
+                          and type I.isize = I.isize
+                          and type I.move = I.move
+                          and type I.multDivOp = I.multDivOp
+                          and type I.operand = I.operand
+                          and type I.shiftOp = I.shiftOp
+                          and type I.unaryOp = I.unaryOp
     val memRegBase : CellsBasis.cell option
 *)
 struct
diff --git a/amd64/ra/amd64RegAlloc.sml b/amd64/ra/amd64RegAlloc.sml
index 801e1c6..4f629a0 100644
--- a/amd64/ra/amd64RegAlloc.sml
+++ b/amd64/ra/amd64RegAlloc.sml
@@ -9,15 +9,51 @@
 functor AMD64RegAlloc (
       structure I : AMD64INSTR
       structure SpillHeur : RA_SPILL_HEURISTICS
-      structure Props : AMD64INSN_PROPERTIES
-          where I = I
-      structure CFG : CONTROL_FLOW_GRAPH
-          where I = I
-      structure Spill : RA_SPILL
-          where I = I
-      structure Asm : INSTRUCTION_EMITTER
-          where I = I
-          and   S.P = CFG.P
+      structure Props : AMD64INSN_PROPERTIES (* where I = I *)
+                        where type I.addressing_mode = I.addressing_mode
+                          and type I.ea = I.ea
+                          and type I.instr = I.instr
+                          and type I.instruction = I.instruction
+                          and type I.operand = I.operand
+      structure CFG : CONTROL_FLOW_GRAPH (* where I = I *)
+                      where type I.addressing_mode = I.addressing_mode
+                        and type I.ea = I.ea
+                        and type I.instr = I.instr
+                        and type I.instruction = I.instruction
+                        and type I.operand = I.operand
+      structure Spill : RA_SPILL (* where I = I *)
+                      where type I.addressing_mode = I.addressing_mode
+                        and type I.ea = I.ea
+                        and type I.instr = I.instr
+                        and type I.instruction = I.instruction
+                        and type I.operand = I.operand
+      structure Asm : INSTRUCTION_EMITTER (* where I = I and S.P = CFG.P *)
+                           where type I.addressing_mode = I.addressing_mode
+                             and type I.ea = I.ea
+                             and type I.instr = I.instr
+                             and type I.instruction = I.instruction
+                             and type I.operand = I.operand
+                           where type S.P.Client.pseudo_op = CFG.P.Client.pseudo_op
+                             and type S.P.T.Basis.cond = CFG.P.T.Basis.cond
+                             and type S.P.T.Basis.div_rounding_mode = CFG.P.T.Basis.div_rounding_mode
+                             and type S.P.T.Basis.ext = CFG.P.T.Basis.ext
+                             and type S.P.T.Basis.fcond = CFG.P.T.Basis.fcond
+                             and type S.P.T.Basis.rounding_mode = CFG.P.T.Basis.rounding_mode
+                             and type S.P.T.Constant.const = CFG.P.T.Constant.const
+                             and type ('s,'r,'f,'c) S.P.T.Extension.ccx = ('s,'r,'f,'c) CFG.P.T.Extension.ccx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.fx = ('s,'r,'f,'c) CFG.P.T.Extension.fx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.rx = ('s,'r,'f,'c) CFG.P.T.Extension.rx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.sx = ('s,'r,'f,'c) CFG.P.T.Extension.sx
+                             and type S.P.T.I.div_rounding_mode = CFG.P.T.I.div_rounding_mode
+                             and type S.P.T.Region.region = CFG.P.T.Region.region
+                             and type S.P.T.ccexp = CFG.P.T.ccexp
+                             and type S.P.T.fexp = CFG.P.T.fexp
+                             (* and type S.P.T.labexp = CFG.P.T.labexp *)
+                             and type S.P.T.mlrisc = CFG.P.T.mlrisc
+                             and type S.P.T.oper = CFG.P.T.oper
+                             and type S.P.T.rep = CFG.P.T.rep
+                             and type S.P.T.rexp = CFG.P.T.rexp
+                             and type S.P.T.stm = CFG.P.T.stm
 
       type spill_info
       datatype spill_operand_kind = SPILL_LOC
@@ -141,17 +177,16 @@ functor AMD64RegAlloc (
     (* use the standard register allocator *)
     structure RA =
         RegisterAllocator
-          (SpillHeur)
-          (MemoryRA
+          (structure SpillHeuristics = SpillHeur
+           structure Flowgraph = MemoryRA
              (RADeadCodeElim
-                (ClusterRA
+                (structure Flowgraph = ClusterRA
                    (structure Flowgraph = CFG
                     structure Asm = Asm
                     structure InsnProps = Props
                     structure Spill = Spill
                    )
-                 )
-                (fun cellkind CB.GP = true
+                 fun cellkind CB.GP = true
 		   | cellkind CB.FP = true
 		   | cellkind _ = false
                  val deadRegs = deadRegs
diff --git a/amd64/ra/amd64Rewrite.sml b/amd64/ra/amd64Rewrite.sml
index a0a4e3a..0937269 100644
--- a/amd64/ra/amd64Rewrite.sml
+++ b/amd64/ra/amd64Rewrite.sml
@@ -7,7 +7,16 @@
 functor AMD64Rewrite (Instr : AMD64INSTR) : sig
 
     structure I  : AMD64INSTR
-    structure CB : CELLS_BASIS = CellsBasis
+    structure CB : CELLS_BASIS (* = CellsBasis *)
+                   where type CellSet.cellset = CellsBasis.CellSet.cellset
+                     and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                     and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                     and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                     and type cell = CellsBasis.cell
+                     and type cellColor = CellsBasis.cellColor
+                     and type cellkind = CellsBasis.cellkind
+                     and type cellkindDesc = CellsBasis.cellkindDesc
+                     and type cellkindInfo = CellsBasis.cellkindInfo
 
     val rewriteUse : I.instruction * CB.cell * CB.cell -> I.instruction
     val rewriteDef : I.instruction * CB.cell * CB.cell -> I.instruction
diff --git a/amd64/ra/amd64SpillInstr.sml b/amd64/ra/amd64SpillInstr.sml
index 8b5e335..6f645e6 100644
--- a/amd64/ra/amd64SpillInstr.sml
+++ b/amd64/ra/amd64SpillInstr.sml
@@ -6,8 +6,12 @@
 
 functor AMD64SpillInstr (
       structure I : AMD64INSTR
-      structure Props : AMD64INSN_PROPERTIES
-          where I = I
+      structure Props : AMD64INSN_PROPERTIES (* where I = I *)
+                        where type I.addressing_mode = I.addressing_mode
+                          and type I.ea = I.ea
+                          and type I.instr = I.instr
+                          and type I.instruction = I.instruction
+                          and type I.operand = I.operand
 
    (* guaranteeing that floats are stored at 16-byte aligned addresses reduces the number of instructions *)
     val floats16ByteAligned : bool
diff --git a/backpatch/backpatch.sml b/backpatch/backpatch.sml
index 962bbf9..dceed1f 100644
--- a/backpatch/backpatch.sml
+++ b/backpatch/backpatch.sml
@@ -8,13 +8,45 @@
 
 functor BBSched2
     (structure Emitter : INSTRUCTION_EMITTER
-     structure CFG     : CONTROL_FLOW_GRAPH
-			where I = Emitter.I
-		          and P = Emitter.S.P
-     structure Jumps   : SDI_JUMPS
-     			where I = CFG.I
-     structure Props   : INSN_PROPERTIES
-			where I = CFG.I
+     structure CFG     : CONTROL_FLOW_GRAPH (* where I = Emitter.I and P = Emitter.S.P *)
+                         where type I.addressing_mode = Emitter.I.addressing_mode
+                           and type I.ea = Emitter.I.ea
+                           and type I.instr = Emitter.I.instr
+                           and type I.instruction = Emitter.I.instruction
+                           and type I.operand = Emitter.I.operand
+                         where type P.Client.pseudo_op = Emitter.S.P.Client.pseudo_op
+                           and type P.T.Basis.cond = Emitter.S.P.T.Basis.cond
+                           and type P.T.Basis.div_rounding_mode = Emitter.S.P.T.Basis.div_rounding_mode
+                           and type P.T.Basis.ext = Emitter.S.P.T.Basis.ext
+                           and type P.T.Basis.fcond = Emitter.S.P.T.Basis.fcond
+                           and type P.T.Basis.rounding_mode = Emitter.S.P.T.Basis.rounding_mode
+                           and type P.T.Constant.const = Emitter.S.P.T.Constant.const
+                           and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.ccx
+                           and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.fx
+                           and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.rx
+                           and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.sx
+                           and type P.T.I.div_rounding_mode = Emitter.S.P.T.I.div_rounding_mode
+                           and type P.T.Region.region = Emitter.S.P.T.Region.region
+                           and type P.T.ccexp = Emitter.S.P.T.ccexp
+                           and type P.T.fexp = Emitter.S.P.T.fexp
+                           (* and type P.T.labexp = Emitter.S.P.T.labexp *)
+                           and type P.T.mlrisc = Emitter.S.P.T.mlrisc
+                           and type P.T.oper = Emitter.S.P.T.oper
+                           and type P.T.rep = Emitter.S.P.T.rep
+                           and type P.T.rexp = Emitter.S.P.T.rexp
+                           and type P.T.stm = Emitter.S.P.T.stm
+     structure Jumps   : SDI_JUMPS (* where I = CFG.I *)
+                         where type I.addressing_mode = CFG.I.addressing_mode
+                           and type I.ea = CFG.I.ea
+                           and type I.instr = CFG.I.instr
+                           and type I.instruction = CFG.I.instruction
+                           and type I.operand = CFG.I.operand
+     structure Props   : INSN_PROPERTIES (* where I = CFG.I *)
+                         where type I.addressing_mode = CFG.I.addressing_mode
+                           and type I.ea = CFG.I.ea
+                           and type I.instr = CFG.I.instr
+                           and type I.instruction = CFG.I.instruction
+                           and type I.operand = CFG.I.operand
     ) = 
 struct
 
diff --git a/backpatch/sdi-jumps.sig b/backpatch/sdi-jumps.sig
index d06e456..f63b5b7 100644
--- a/backpatch/sdi-jumps.sig
+++ b/backpatch/sdi-jumps.sig
@@ -7,7 +7,7 @@
 signature SDI_JUMPS = sig
   structure I : INSTRUCTIONS
   structure C : CELLS
-    sharing I.C = C
+    (* sharing I.C = C *)
 
   val branchDelayedArch : bool
 
diff --git a/backpatch/spanDep.sml b/backpatch/spanDep.sml
index c26b29a..b2240c3 100644
--- a/backpatch/spanDep.sml
+++ b/backpatch/spanDep.sml
@@ -9,18 +9,79 @@
 
 functor SpanDependencyResolution
     (structure Emitter   : INSTRUCTION_EMITTER
-     structure CFG       : CONTROL_FLOW_GRAPH
-                             where I = Emitter.I
-                          and P = Emitter.S.P
-     structure Jumps     : SDI_JUMPS
-                             where I = CFG.I
-     structure DelaySlot : DELAY_SLOT_PROPERTIES
-                             where I = CFG.I
-     structure Props     : INSN_PROPERTIES
-                             where I = CFG.I
-     structure Asm        : INSTRUCTION_EMITTER
-                             where I = CFG.I
-                             and   S = Emitter.S
+     structure CFG       : CONTROL_FLOW_GRAPH (* where I = Emitter.I and P = Emitter.S.P *)
+                           where type I.addressing_mode = Emitter.I.addressing_mode
+                             and type I.ea = Emitter.I.ea
+                             and type I.instr = Emitter.I.instr
+                             and type I.instruction = Emitter.I.instruction
+                             and type I.operand = Emitter.I.operand
+                           where type P.Client.pseudo_op = Emitter.S.P.Client.pseudo_op
+                             and type P.T.Basis.cond = Emitter.S.P.T.Basis.cond
+                             and type P.T.Basis.div_rounding_mode = Emitter.S.P.T.Basis.div_rounding_mode
+                             and type P.T.Basis.ext = Emitter.S.P.T.Basis.ext
+                             and type P.T.Basis.fcond = Emitter.S.P.T.Basis.fcond
+                             and type P.T.Basis.rounding_mode = Emitter.S.P.T.Basis.rounding_mode
+                             and type P.T.Constant.const = Emitter.S.P.T.Constant.const
+                             and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.ccx
+                             and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.fx
+                             and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.rx
+                             and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.sx
+                             and type P.T.I.div_rounding_mode = Emitter.S.P.T.I.div_rounding_mode
+                             and type P.T.Region.region = Emitter.S.P.T.Region.region
+                             and type P.T.ccexp = Emitter.S.P.T.ccexp
+                             and type P.T.fexp = Emitter.S.P.T.fexp
+                             (* and type P.T.labexp = Emitter.S.P.T.labexp *)
+                             and type P.T.mlrisc = Emitter.S.P.T.mlrisc
+                             and type P.T.oper = Emitter.S.P.T.oper
+                             and type P.T.rep = Emitter.S.P.T.rep
+                             and type P.T.rexp = Emitter.S.P.T.rexp
+                             and type P.T.stm = Emitter.S.P.T.stm
+     structure Jumps     : SDI_JUMPS (* where I = CFG.I *)
+                           where type I.addressing_mode = CFG.I.addressing_mode
+                             and type I.ea = CFG.I.ea
+                             and type I.instr = CFG.I.instr
+                             and type I.instruction = CFG.I.instruction
+                             and type I.operand = CFG.I.operand
+     structure DelaySlot : DELAY_SLOT_PROPERTIES (* where I = CFG.I *)
+                           where type I.addressing_mode = CFG.I.addressing_mode
+                             and type I.ea = CFG.I.ea
+                             and type I.instr = CFG.I.instr
+                             and type I.instruction = CFG.I.instruction
+                             and type I.operand = CFG.I.operand
+     structure Props     : INSN_PROPERTIES (* where I = CFG.I *)
+                           where type I.addressing_mode = CFG.I.addressing_mode
+                             and type I.ea = CFG.I.ea
+                             and type I.instr = CFG.I.instr
+                             and type I.instruction = CFG.I.instruction
+                             and type I.operand = CFG.I.operand
+     structure Asm       : INSTRUCTION_EMITTER (* where I = CFG.I and S = Emitter.S *)
+                           where type I.addressing_mode = CFG.I.addressing_mode
+                             and type I.ea = CFG.I.ea
+                             and type I.instr = CFG.I.instr
+                             and type I.instruction = CFG.I.instruction
+                             and type I.operand = CFG.I.operand
+                           where type S.P.Client.pseudo_op = Emitter.S.P.Client.pseudo_op
+                             and type S.P.T.Basis.cond = Emitter.S.P.T.Basis.cond
+                             and type S.P.T.Basis.div_rounding_mode = Emitter.S.P.T.Basis.div_rounding_mode
+                             and type S.P.T.Basis.ext = Emitter.S.P.T.Basis.ext
+                             and type S.P.T.Basis.fcond = Emitter.S.P.T.Basis.fcond
+                             and type S.P.T.Basis.rounding_mode = Emitter.S.P.T.Basis.rounding_mode
+                             and type S.P.T.Constant.const = Emitter.S.P.T.Constant.const
+                             and type ('s,'r,'f,'c) S.P.T.Extension.ccx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.ccx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.fx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.fx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.rx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.rx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.sx = ('s,'r,'f,'c) Emitter.S.P.T.Extension.sx
+                             and type S.P.T.I.div_rounding_mode = Emitter.S.P.T.I.div_rounding_mode
+                             and type S.P.T.Region.region = Emitter.S.P.T.Region.region
+                             and type S.P.T.ccexp = Emitter.S.P.T.ccexp
+                             and type S.P.T.fexp = Emitter.S.P.T.fexp
+                             (* and type S.P.T.labexp = Emitter.S.P.T.labexp *)
+                             and type S.P.T.mlrisc = Emitter.S.P.T.mlrisc
+                             and type S.P.T.oper = Emitter.S.P.T.oper
+                             and type S.P.T.rep = Emitter.S.P.T.rep
+                             and type S.P.T.rexp = Emitter.S.P.T.rexp
+                             and type S.P.T.stm = Emitter.S.P.T.stm
+                             and type ('a,'b,'c,'d) S.stream = ('a,'b,'c,'d) Emitter.S.stream
      ) : BBSCHED = 
 struct
 
diff --git a/backpatch/vlBackPatch.sml b/backpatch/vlBackPatch.sml
index 78f639a..3366e4c 100644
--- a/backpatch/vlBackPatch.sml
+++ b/backpatch/vlBackPatch.sml
@@ -26,14 +26,31 @@
 functor BackPatch
   (structure CodeString : CODE_STRING
    structure Jumps      : SDI_JUMPS 
-   structure Props      : INSN_PROPERTIES 
-                        where I = Jumps.I
-   structure Emitter    : MC_EMIT
-                        where I = Props.I
-   structure CFG        : CONTROL_FLOW_GRAPH
-                        where I = Emitter.I
-   structure Asm        : INSTRUCTION_EMITTER
-                        where I = CFG.I) =
+   structure Props      : INSN_PROPERTIES (* where I = Jumps.I *)
+                          where type I.addressing_mode = Jumps.I.addressing_mode
+                            and type I.ea = Jumps.I.ea
+                            and type I.instr = Jumps.I.instr
+                            and type I.instruction = Jumps.I.instruction
+                            and type I.operand = Jumps.I.operand
+   structure Emitter    : MC_EMIT (* where I = Props.I *)
+                          where type I.addressing_mode = Props.I.addressing_mode
+                            and type I.ea = Props.I.ea
+                            and type I.instr = Props.I.instr
+                            and type I.instruction = Props.I.instruction
+                            and type I.operand = Props.I.operand
+   structure CFG        : CONTROL_FLOW_GRAPH (* where I = Emitter.I *)
+                          where type I.addressing_mode = Emitter.I.addressing_mode
+                            and type I.ea = Emitter.I.ea
+                            and type I.instr = Emitter.I.instr
+                            and type I.instruction = Emitter.I.instruction
+                            and type I.operand = Emitter.I.operand
+   structure Asm        : INSTRUCTION_EMITTER (* where I = CFG.I *)
+                          where type I.addressing_mode = CFG.I.addressing_mode
+                            and type I.ea = CFG.I.ea
+                            and type I.instr = CFG.I.instr
+                            and type I.instruction = CFG.I.instruction
+                            and type I.operand = CFG.I.operand
+  ) =
 struct 
   structure I   = Jumps.I
   structure C   = I.C
diff --git a/block-placement/block-placement.sml b/block-placement/block-placement.sml
index 702f584..6066578 100644
--- a/block-placement/block-placement.sml
+++ b/block-placement/block-placement.sml
@@ -5,10 +5,13 @@
 
 functor BlockPlacement 
    (structure CFG : CONTROL_FLOW_GRAPH
-    structure Props : INSN_PROPERTIES
-	where I = CFG.I)
-
-   : BLOCK_PLACEMENT =
+    structure Props : INSN_PROPERTIES (* where I = CFG.I *)
+                      where type I.addressing_mode = CFG.I.addressing_mode
+                        and type I.ea = CFG.I.ea
+                        and type I.instr = CFG.I.instr
+                        and type I.instruction = CFG.I.instruction
+                        and type I.operand = CFG.I.operand
+   ) : BLOCK_PLACEMENT =
 
 struct
   structure CFG = CFG
diff --git a/block-placement/check-placement-fn.sml b/block-placement/check-placement-fn.sml
index 6eae5d7..009daa9 100644
--- a/block-placement/check-placement-fn.sml
+++ b/block-placement/check-placement-fn.sml
@@ -9,8 +9,12 @@
 functor CheckPlacementFn (
 
     structure CFG : CONTROL_FLOW_GRAPH
-    structure InsnProps : INSN_PROPERTIES
-      where I = CFG.I
+    structure InsnProps : INSN_PROPERTIES (* where I = CFG.I *)
+                          where type I.addressing_mode = CFG.I.addressing_mode
+                            and type I.ea = CFG.I.ea
+                            and type I.instr = CFG.I.instr
+                            and type I.instruction = CFG.I.instruction
+                            and type I.operand = CFG.I.operand
 
   ) : sig
 
diff --git a/block-placement/jump-chain-elim-fn.sml b/block-placement/jump-chain-elim-fn.sml
index 678da26..ceb242f 100644
--- a/block-placement/jump-chain-elim-fn.sml
+++ b/block-placement/jump-chain-elim-fn.sml
@@ -12,8 +12,12 @@
 functor JumpChainElimFn (
 
     structure CFG : CONTROL_FLOW_GRAPH
-    structure InsnProps : INSN_PROPERTIES
-      where I = CFG.I
+    structure InsnProps : INSN_PROPERTIES (* where I = CFG.I *)
+                          where type I.addressing_mode = CFG.I.addressing_mode
+                            and type I.ea = CFG.I.ea
+                            and type I.instr = CFG.I.instr
+                            and type I.instruction = CFG.I.instruction
+                            and type I.operand = CFG.I.operand
 
   (* Control flag that when set true allows jumps to labels outside
    * of the CFG to be chained.  Set this false when there are many
diff --git a/block-placement/weighted-block-placement-fn.sml b/block-placement/weighted-block-placement-fn.sml
index 4668215..1f7a704 100644
--- a/block-placement/weighted-block-placement-fn.sml
+++ b/block-placement/weighted-block-placement-fn.sml
@@ -12,8 +12,12 @@
 functor WeightedBlockPlacementFn (
 
     structure CFG : CONTROL_FLOW_GRAPH
-    structure InsnProps : INSN_PROPERTIES
-      where I = CFG.I
+    structure InsnProps : INSN_PROPERTIES (* where I = CFG.I *)
+                          where type I.addressing_mode = CFG.I.addressing_mode
+                            and type I.ea = CFG.I.ea
+                            and type I.instr = CFG.I.instr
+                            and type I.instruction = CFG.I.instruction
+                            and type I.operand = CFG.I.operand
 
   ) : BLOCK_PLACEMENT = struct
 
diff --git a/c-call/archs/x86-64-svid-fn.sml b/c-call/archs/x86-64-svid-fn.sml
index 96f29f9..c7e5620 100644
--- a/c-call/archs/x86-64-svid-fn.sml
+++ b/c-call/archs/x86-64-svid-fn.sml
@@ -75,7 +75,7 @@ functor X86_64SVIDFn (
     val calleeSaveRegs = [C.rbx, C.r12, C.r13, C.r14, C.r15]
     val callerSaveRegs =  [C.rax, C.rcx, C.rdx, C.rsi, C.rdi, C.r8, C.r9, C.r10, C.r11]
     val callerSaveFRegs = (C.Regs CB.FP {from=0, to=15, step=1})
-    val calleeSaveFRegs = []
+    val calleeSaveFRegs : T.reg list = []
 			  
     val frameAlignB = 16
 
diff --git a/c-call/gen/c-call-sig.sml b/c-call/gen/c-call-sig.sml
index 35718b0..9d07716 100644
--- a/c-call/gen/c-call-sig.sml
+++ b/c-call/gen/c-call-sig.sml
@@ -3,7 +3,27 @@ signature C_CALL =
 
     structure T : MLTREE
     structure Gen : C_CALL_GEN
-      where T = T
+      (* where T = T *)
+      where type T.Basis.cond = T.Basis.cond
+        and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+        and type T.Basis.ext = T.Basis.ext
+        and type T.Basis.fcond = T.Basis.fcond
+        and type T.Basis.rounding_mode = T.Basis.rounding_mode
+        and type T.Constant.const = T.Constant.const
+        and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+        and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+        and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+        and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+        and type T.I.div_rounding_mode = T.I.div_rounding_mode
+        and type T.Region.region = T.Region.region
+        and type T.ccexp = T.ccexp
+        and type T.fexp = T.fexp
+        (* and type T.labexp = T.labexp *)
+        and type T.mlrisc = T.mlrisc
+        and type T.oper = T.oper
+        and type T.rep = T.rep
+        and type T.rexp = T.rexp
+        and type T.stm = T.stm
 
     datatype c_arg = datatype Gen.c_arg
 
diff --git a/c-calls/unimplemented-c-calls.sml b/c-calls/unimplemented-c-calls.sml
index 507a247..3f6bbc6 100644
--- a/c-calls/unimplemented-c-calls.sml
+++ b/c-calls/unimplemented-c-calls.sml
@@ -6,7 +6,27 @@
  *)
 functor UnimplementedCCallsFn
 	    (structure T: MLTREE
-	     val impossible: string -> 'a) :> C_CALLS where T = T =
+	     val impossible: string -> 'a) :> C_CALLS (* where T = T *)
+                                              where type T.Basis.cond = T.Basis.cond
+                                                and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                                                and type T.Basis.ext = T.Basis.ext
+                                                and type T.Basis.fcond = T.Basis.fcond
+                                                and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                                                and type T.Constant.const = T.Constant.const
+                                                and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                                                and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                                                and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                                                and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                                                and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                                                and type T.Region.region = T.Region.region
+                                                and type T.ccexp = T.ccexp
+                                                and type T.fexp = T.fexp
+                                                (* and type T.labexp = T.labexp *)
+                                                and type T.mlrisc = T.mlrisc
+                                                and type T.oper = T.oper
+                                                and type T.rep = T.rep
+                                                and type T.rexp = T.rexp
+                                                and type T.stm = T.stm =
 struct
     structure T = T
 
diff --git a/cm/Lib.cm b/cm/Lib.cm
index 1105cf0..9d28dc1 100644
--- a/cm/Lib.cm
+++ b/cm/Lib.cm
@@ -1,5 +1,6 @@
 (* This file is created by makeallcm *)
 Library
+        signature ARRAY_NONEQ
 	signature ANNOTATIONS
 	signature BITSET
 	signature CACHE_REF
@@ -37,6 +38,7 @@ is
 	smlnj-lib.cm
 	Control.cm
 #endif
+        ../library/array-noneq.sig
 	../library/annotations.sig
 	../library/annotations.sml
 	../library/bitset.sig
diff --git a/cm/proxyLib.cm b/cm/proxyLib.cm
new file mode 100644
index 0000000..72c35c1
--- /dev/null
+++ b/cm/proxyLib.cm
@@ -0,0 +1,61 @@
+Group
+        group(proxyGrp.cm)
+is
+	proxyGrp.cm
+(
+bind:(anchor:ALPHA.cm value:.)
+bind:(anchor:ALPHA-GC.cm value:.)
+bind:(anchor:ALPHA-Peephole.cm value:.)
+bind:(anchor:ALPHA-RTL.cm value:.)
+bind:(anchor:ALPHA-Sched.cm value:.)
+bind:(anchor:ALPHA-SSA.cm value:.)
+bind:(anchor:AMD64.cm value:.)
+bind:(anchor:AMD64-GC.cm value:.)
+bind:(anchor:AMD64-Peephole.cm value:.)
+bind:(anchor:AMD64-RTL.cm value:.)
+bind:(anchor:AMD64-Sched.cm value:.)
+bind:(anchor:AMD64-SSA.cm value:.)
+bind:(anchor:CCall.cm value:.)
+bind:(anchor:CCall-sparc.cm value:.)
+bind:(anchor:CCall-x86-64.cm value:.)
+bind:(anchor:CCall-x86.cm value:.)
+bind:(anchor:Control.cm value:.)
+bind:(anchor:GC.cm value:.)
+bind:(anchor:Graphs.cm value:.)
+bind:(anchor:HPPA.cm value:.)
+bind:(anchor:HPPA-GC.cm value:.)
+bind:(anchor:HPPA-RTL.cm value:.)
+bind:(anchor:HPPA-Sched.cm value:.)
+bind:(anchor:HPPA-SSA.cm value:.)
+bind:(anchor:IA32.cm value:.)
+bind:(anchor:IA32-GC.cm value:.)
+bind:(anchor:IA32-Peephole.cm value:.)
+bind:(anchor:IA32-RTL.cm value:.)
+bind:(anchor:IA32-Sched.cm value:.)
+bind:(anchor:IA32-SSA.cm value:.)
+bind:(anchor:ir-archive.cm value:.)
+bind:(anchor:IR.cm value:.)
+bind:(anchor:Lib.cm value:.)
+bind:(anchor:MIPS.cm value:.)
+bind:(anchor:MLRISC.cm value:.)
+bind:(anchor:MLTREE.cm value:.)
+bind:(anchor:Opt.cm value:.)
+bind:(anchor:Peephole.cm value:.)
+bind:(anchor:PPC.cm value:.)
+bind:(anchor:PPC-GC.cm value:.)
+bind:(anchor:PPC-Sched.cm value:.)
+bind:(anchor:RA.cm value:.)
+bind:(anchor:Region.cm value:.)
+bind:(anchor:RTL.cm value:.)
+bind:(anchor:Sched.cm value:.)
+bind:(anchor:SPARC.cm value:.)
+bind:(anchor:SPARC-GC.cm value:.)
+bind:(anchor:SPARC-Peephole.cm value:.)
+bind:(anchor:SPARC-RTL.cm value:.)
+bind:(anchor:SPARC-Sched.cm value:.)
+bind:(anchor:SPARC-SSA.cm value:.)
+bind:(anchor:SSA.cm value:.)
+bind:(anchor:StagedAlloc.cm value:.)
+bind:(anchor:Visual.cm value:.)
+bind:(anchor:VLIW.cm value:.)
+)
diff --git a/emit/cfgEmit.sml b/emit/cfgEmit.sml
index 4b0393e..6795ba0 100644
--- a/emit/cfgEmit.sml
+++ b/emit/cfgEmit.sml
@@ -13,9 +13,34 @@
 
 functor CFGEmit
   (structure E   : INSTRUCTION_EMITTER
-   structure CFG : CONTROL_FLOW_GRAPH
-		   where I = E.I
-		     and P = E.S.P)  : ASSEMBLY_EMITTER = 
+   structure CFG : CONTROL_FLOW_GRAPH (* where I = E.I and P = E.S.P *)
+                   where type I.addressing_mode = E.I.addressing_mode
+                     and type I.ea = E.I.ea
+                     and type I.instr = E.I.instr
+                     and type I.instruction = E.I.instruction
+                     and type I.operand = E.I.operand
+                   where type P.Client.pseudo_op = E.S.P.Client.pseudo_op
+                     and type P.T.Basis.cond = E.S.P.T.Basis.cond
+                     and type P.T.Basis.div_rounding_mode = E.S.P.T.Basis.div_rounding_mode
+                     and type P.T.Basis.ext = E.S.P.T.Basis.ext
+                     and type P.T.Basis.fcond = E.S.P.T.Basis.fcond
+                     and type P.T.Basis.rounding_mode = E.S.P.T.Basis.rounding_mode
+                     and type P.T.Constant.const = E.S.P.T.Constant.const
+                     and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) E.S.P.T.Extension.ccx
+                     and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) E.S.P.T.Extension.fx
+                     and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) E.S.P.T.Extension.rx
+                     and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) E.S.P.T.Extension.sx
+                     and type P.T.I.div_rounding_mode = E.S.P.T.I.div_rounding_mode
+                     and type P.T.Region.region = E.S.P.T.Region.region
+                     and type P.T.ccexp = E.S.P.T.ccexp
+                     and type P.T.fexp = E.S.P.T.fexp
+                     (* and type P.T.labexp = E.S.P.T.labexp *)
+                     and type P.T.mlrisc = E.S.P.T.mlrisc
+                     and type P.T.oper = E.S.P.T.oper
+                     and type P.T.rep = E.S.P.T.rep
+                     and type P.T.rexp = E.S.P.T.rexp
+                     and type P.T.stm = E.S.P.T.stm
+  )  : ASSEMBLY_EMITTER =
 struct
   structure CFG = CFG
 
diff --git a/flowgraph/buildFlowgraph.sml b/flowgraph/buildFlowgraph.sml
index a6d4582..533b83d 100644
--- a/flowgraph/buildFlowgraph.sml
+++ b/flowgraph/buildFlowgraph.sml
@@ -9,9 +9,34 @@ sig
    structure S   : INSTRUCTION_STREAM
    structure I   : INSTRUCTIONS
    structure P   : PSEUDO_OPS
-   structure CFG : CONTROL_FLOW_GRAPH
-   		where I = I
-                  and P = P
+   structure CFG : CONTROL_FLOW_GRAPH (* where I = I and P = P *)
+                   where type I.addressing_mode = I.addressing_mode
+                     and type I.ea = I.ea
+                     and type I.instr = I.instr
+                     and type I.instruction = I.instruction
+                     and type I.operand = I.operand
+                   where type P.Client.pseudo_op = P.Client.pseudo_op
+                     and type P.T.Basis.cond = P.T.Basis.cond
+                     and type P.T.Basis.div_rounding_mode = P.T.Basis.div_rounding_mode
+                     and type P.T.Basis.ext = P.T.Basis.ext
+                     and type P.T.Basis.fcond = P.T.Basis.fcond
+                     and type P.T.Basis.rounding_mode = P.T.Basis.rounding_mode
+                     and type P.T.Constant.const = P.T.Constant.const
+                     and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) P.T.Extension.ccx
+                     and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) P.T.Extension.fx
+                     and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) P.T.Extension.rx
+                     and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) P.T.Extension.sx
+                     and type P.T.I.div_rounding_mode = P.T.I.div_rounding_mode
+                     and type P.T.Region.region = P.T.Region.region
+                     and type P.T.ccexp = P.T.ccexp
+                     and type P.T.fexp = P.T.fexp
+                     (* and type P.T.labexp = P.T.labexp *)
+                     and type P.T.mlrisc = P.T.mlrisc
+                     and type P.T.oper = P.T.oper
+                     and type P.T.rep = P.T.rep
+                     and type P.T.rexp = P.T.rexp
+                     and type P.T.stm = P.T.stm
+
    (*
     * This creates an emitter which can be used to build a CFG incrementally
     *)
@@ -26,9 +51,33 @@ end
 functor BuildFlowgraph 
   (structure Props  : INSN_PROPERTIES
    structure Stream : INSTRUCTION_STREAM
-   structure CFG    : CONTROL_FLOW_GRAPH  
-			  where I = Props.I
-			    and P = Stream.P
+   structure CFG    : CONTROL_FLOW_GRAPH (* where I = Props.I and P = Stream.P *)
+                      where type I.addressing_mode = Props.I.addressing_mode
+                        and type I.ea = Props.I.ea
+                        and type I.instr = Props.I.instr
+                        and type I.instruction = Props.I.instruction
+                        and type I.operand = Props.I.operand
+                      where type P.Client.pseudo_op = Stream.P.Client.pseudo_op
+                        and type P.T.Basis.cond = Stream.P.T.Basis.cond
+                        and type P.T.Basis.div_rounding_mode = Stream.P.T.Basis.div_rounding_mode
+                        and type P.T.Basis.ext = Stream.P.T.Basis.ext
+                        and type P.T.Basis.fcond = Stream.P.T.Basis.fcond
+                        and type P.T.Basis.rounding_mode = Stream.P.T.Basis.rounding_mode
+                        and type P.T.Constant.const = Stream.P.T.Constant.const
+                        and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Stream.P.T.Extension.ccx
+                        and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Stream.P.T.Extension.fx
+                        and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Stream.P.T.Extension.rx
+                        and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Stream.P.T.Extension.sx
+                        and type P.T.I.div_rounding_mode = Stream.P.T.I.div_rounding_mode
+                        and type P.T.Region.region = Stream.P.T.Region.region
+                        and type P.T.ccexp = Stream.P.T.ccexp
+                        and type P.T.fexp = Stream.P.T.fexp
+                        (* and type P.T.labexp = Stream.P.T.labexp *)
+                        and type P.T.mlrisc = Stream.P.T.mlrisc
+                        and type P.T.oper = Stream.P.T.oper
+                        and type P.T.rep = Stream.P.T.rep
+                        and type P.T.rexp = Stream.P.T.rexp
+                        and type P.T.stm = Stream.P.T.stm
   ) : CONTROL_FLOWGRAPH_GEN =
 struct
   structure CFG = CFG
diff --git a/flowgraph/cfg.sml b/flowgraph/cfg.sml
index 0534692..a0ece3b 100644
--- a/flowgraph/cfg.sml
+++ b/flowgraph/cfg.sml
@@ -10,8 +10,18 @@
 functor ControlFlowGraph
    (structure I : INSTRUCTIONS
     structure GraphImpl : GRAPH_IMPLEMENTATION
-    structure InsnProps : INSN_PROPERTIES where I = I
-    structure Asm : INSTRUCTION_EMITTER where I = I
+    structure InsnProps : INSN_PROPERTIES (* where I = I *)
+                          where type I.addressing_mode = I.addressing_mode
+                            and type I.ea = I.ea
+                            and type I.instr = I.instr
+                            and type I.instruction = I.instruction
+                            and type I.operand = I.operand
+    structure Asm : INSTRUCTION_EMITTER (* where I = I *)
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
    ) : CONTROL_FLOW_GRAPH =
 struct
 
diff --git a/flowgraph/cfgCountCopies.sml b/flowgraph/cfgCountCopies.sml
index d02d2b5..9c68c03 100644
--- a/flowgraph/cfgCountCopies.sml
+++ b/flowgraph/cfgCountCopies.sml
@@ -4,10 +4,18 @@
  *)
 functor CFGCountCopies
    ( structure CFG : CONTROL_FLOW_GRAPH
-     structure InsnProps : INSN_PROPERTIES
-     		where I = CFG.I
-     structure SdiJumps : SDI_JUMPS
-     		where I = CFG.I
+     structure InsnProps : INSN_PROPERTIES (* where I = CFG.I *)
+                           where type I.addressing_mode = CFG.I.addressing_mode
+                             and type I.ea = CFG.I.ea
+                             and type I.instr = CFG.I.instr
+                             and type I.instruction = CFG.I.instruction
+                             and type I.operand = CFG.I.operand
+     structure SdiJumps : SDI_JUMPS (* where I = CFG.I *)
+                          where type I.addressing_mode = CFG.I.addressing_mode
+                            and type I.ea = CFG.I.ea
+                            and type I.instr = CFG.I.instr
+                            and type I.instruction = CFG.I.instruction
+                            and type I.operand = CFG.I.operand
     ) : CFG_OPTIMIZATION =
 struct
    structure CFG = CFG
diff --git a/flowgraph/cfgExpandCopies.sml b/flowgraph/cfgExpandCopies.sml
index dc22908..2fc7240 100644
--- a/flowgraph/cfgExpandCopies.sml
+++ b/flowgraph/cfgExpandCopies.sml
@@ -7,8 +7,12 @@
 
 functor CFGExpandCopies
    (structure CFG    : CONTROL_FLOW_GRAPH
-    structure Shuffle : SHUFFLE
-    			where I = CFG.I
+    structure Shuffle : SHUFFLE (* where I = CFG.I *)
+                        where type I.addressing_mode = CFG.I.addressing_mode
+                          and type I.ea = CFG.I.ea
+                          and type I.instr = CFG.I.instr
+                          and type I.instruction = CFG.I.instruction
+                          and type I.operand = CFG.I.operand
    ) : CFG_OPTIMIZATION =
   struct
     structure CFG = CFG
diff --git a/flowgraph/cfgPeephole.sml b/flowgraph/cfgPeephole.sml
index 9cf9fa8..f7b21db 100644
--- a/flowgraph/cfgPeephole.sml
+++ b/flowgraph/cfgPeephole.sml
@@ -3,8 +3,12 @@
  *)
 functor CFGPeephole
   (structure CFG      : CONTROL_FLOW_GRAPH
-   structure PeepHole : PEEPHOLE
-     sharing CFG.I = PeepHole.I
+   structure PeepHole : PEEPHOLE (* sharing CFG.I = PeepHole.I *)
+                        where type I.addressing_mode = CFG.I.addressing_mode
+                          and type I.ea = CFG.I.ea
+                          and type I.instr = CFG.I.instr
+                          and type I.instruction = CFG.I.instruction
+                          and type I.operand = CFG.I.operand
   ) : CFG_OPTIMIZATION =
 struct
    structure CFG = CFG
diff --git a/flowgraph/printFlowgraph.sml b/flowgraph/printFlowgraph.sml
index 84732fa..3c0718c 100644
--- a/flowgraph/printFlowgraph.sml
+++ b/flowgraph/printFlowgraph.sml
@@ -5,9 +5,33 @@
 signature PRINT_FLOWGRAPH = 
 sig
    structure Asm : INSTRUCTION_EMITTER
-   structure CFG : CONTROL_FLOW_GRAPH
-		      where I = Asm.I 
-			and P = Asm.S.P
+   structure CFG : CONTROL_FLOW_GRAPH (* where I = Asm.I and P = Asm.S.P *)
+                   where type I.addressing_mode = Asm.I.addressing_mode
+                     and type I.ea = Asm.I.ea
+                     and type I.instr = Asm.I.instr
+                     and type I.instruction = Asm.I.instruction
+                     and type I.operand = Asm.I.operand
+                   where type P.Client.pseudo_op = Asm.S.P.Client.pseudo_op
+                     and type P.T.Basis.cond = Asm.S.P.T.Basis.cond
+                     and type P.T.Basis.div_rounding_mode = Asm.S.P.T.Basis.div_rounding_mode
+                     and type P.T.Basis.ext = Asm.S.P.T.Basis.ext
+                     and type P.T.Basis.fcond = Asm.S.P.T.Basis.fcond
+                     and type P.T.Basis.rounding_mode = Asm.S.P.T.Basis.rounding_mode
+                     and type P.T.Constant.const = Asm.S.P.T.Constant.const
+                     and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Asm.S.P.T.Extension.ccx
+                     and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Asm.S.P.T.Extension.fx
+                     and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Asm.S.P.T.Extension.rx
+                     and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Asm.S.P.T.Extension.sx
+                     and type P.T.I.div_rounding_mode = Asm.S.P.T.I.div_rounding_mode
+                     and type P.T.Region.region = Asm.S.P.T.Region.region
+                     and type P.T.ccexp = Asm.S.P.T.ccexp
+                     and type P.T.fexp = Asm.S.P.T.fexp
+                     (* and type P.T.labexp = Asm.S.P.T.labexp *)
+                     and type P.T.mlrisc = Asm.S.P.T.mlrisc
+                     and type P.T.oper = Asm.S.P.T.oper
+                     and type P.T.rep = Asm.S.P.T.rep
+                     and type P.T.rexp = Asm.S.P.T.rexp
+                     and type P.T.stm = Asm.S.P.T.stm
 
    val printCFG : TextIO.outstream -> string -> CFG.cfg -> unit
 end
@@ -15,9 +39,33 @@ end
 
 functor PrintFlowgraph 
    (structure Asm : INSTRUCTION_EMITTER
-    structure CFG : CONTROL_FLOW_GRAPH
-		    where I = Asm.I
-		      and P = Asm.S.P
+    structure CFG : CONTROL_FLOW_GRAPH (* where I = Asm.I and P = Asm.S.P *)
+                    where type I.addressing_mode = Asm.I.addressing_mode
+                      and type I.ea = Asm.I.ea
+                      and type I.instr = Asm.I.instr
+                      and type I.instruction = Asm.I.instruction
+                      and type I.operand = Asm.I.operand
+                    where type P.Client.pseudo_op = Asm.S.P.Client.pseudo_op
+                      and type P.T.Basis.cond = Asm.S.P.T.Basis.cond
+                      and type P.T.Basis.div_rounding_mode = Asm.S.P.T.Basis.div_rounding_mode
+                      and type P.T.Basis.ext = Asm.S.P.T.Basis.ext
+                      and type P.T.Basis.fcond = Asm.S.P.T.Basis.fcond
+                      and type P.T.Basis.rounding_mode = Asm.S.P.T.Basis.rounding_mode
+                      and type P.T.Constant.const = Asm.S.P.T.Constant.const
+                      and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Asm.S.P.T.Extension.ccx
+                      and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Asm.S.P.T.Extension.fx
+                      and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Asm.S.P.T.Extension.rx
+                      and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Asm.S.P.T.Extension.sx
+                      and type P.T.I.div_rounding_mode = Asm.S.P.T.I.div_rounding_mode
+                      and type P.T.Region.region = Asm.S.P.T.Region.region
+                      and type P.T.ccexp = Asm.S.P.T.ccexp
+                      and type P.T.fexp = Asm.S.P.T.fexp
+                      (* and type P.T.labexp = Asm.S.P.T.labexp *)
+                      and type P.T.mlrisc = Asm.S.P.T.mlrisc
+                      and type P.T.oper = Asm.S.P.T.oper
+                      and type P.T.rep = Asm.S.P.T.rep
+                      and type P.T.rexp = Asm.S.P.T.rexp
+                      and type P.T.stm = Asm.S.P.T.stm
    ) : PRINT_FLOWGRAPH =
 struct
    structure Asm = Asm
diff --git a/flowgraph/pseudo-ops-big.sml b/flowgraph/pseudo-ops-big.sml
index 6834f48..7a31d3c 100644
--- a/flowgraph/pseudo-ops-big.sml
+++ b/flowgraph/pseudo-ops-big.sml
@@ -7,8 +7,27 @@
 
 functor PseudoOpsBig
    ( structure T : MLTREE
-     structure MLTreeEval : MLTREE_EVAL 
-			     where T = T
+     structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                            where type T.Basis.cond = T.Basis.cond
+                              and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                              and type T.Basis.ext = T.Basis.ext
+                              and type T.Basis.fcond = T.Basis.fcond
+                              and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                              and type T.Constant.const = T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                              and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                              and type T.Region.region = T.Region.region
+                              and type T.ccexp = T.ccexp
+                              and type T.fexp = T.fexp
+                              (* and type T.labexp = T.labexp *)
+                              and type T.mlrisc = T.mlrisc
+                              and type T.oper = T.oper
+                              and type T.rep = T.rep
+                              and type T.rexp = T.rexp
+                              and type T.stm = T.stm
      val  icache_alignment : int	(* cache line size *)
      val max_alignment : int option	(* maximum alignment for internal labels *)
      val nop: {sz:int, en:Word32.word}	(* encoding for noop *)
diff --git a/flowgraph/pseudo-ops-little.sml b/flowgraph/pseudo-ops-little.sml
index 8ba907f..fac3c09 100644
--- a/flowgraph/pseudo-ops-little.sml
+++ b/flowgraph/pseudo-ops-little.sml
@@ -9,8 +9,27 @@
 functor PseudoOpsLittle (
 
     structure T : MLTREE
-    structure MLTreeEval : MLTREE_EVAL
-			   where T = T
+    structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                           where type T.Basis.cond = T.Basis.cond
+                             and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                             and type T.Basis.ext = T.Basis.ext
+                             and type T.Basis.fcond = T.Basis.fcond
+                             and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                             and type T.Constant.const = T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                             and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                             and type T.Region.region = T.Region.region
+                             and type T.ccexp = T.ccexp
+                             and type T.fexp = T.fexp
+                             (* and type T.labexp = T.labexp *)
+                             and type T.mlrisc = T.mlrisc
+                             and type T.oper = T.oper
+                             and type T.rep = T.rep
+                             and type T.rexp = T.rexp
+                             and type T.stm = T.stm
     val icache_alignment : int		(* cache line size *)
     val max_alignment : int option	(* maximum alignment for internal labels *)
     val nop: {sz:int, en:Word32.word}	(* encoding for noop *)
diff --git a/flowgraph/pseudo-ops.sig b/flowgraph/pseudo-ops.sig
index f5165c9..7f0b394 100644
--- a/flowgraph/pseudo-ops.sig
+++ b/flowgraph/pseudo-ops.sig
@@ -8,7 +8,27 @@
 
 signature PSEUDO_OPS = sig
   structure T : MLTREE
-  structure Client : CLIENT_PSEUDO_OPS where AsmPseudoOps.T = T
+  structure Client : CLIENT_PSEUDO_OPS (* where AsmPseudoOps.T = T *)
+                     where type AsmPseudoOps.T.Basis.cond = T.Basis.cond
+                       and type AsmPseudoOps.T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                       and type AsmPseudoOps.T.Basis.ext = T.Basis.ext
+                       and type AsmPseudoOps.T.Basis.fcond = T.Basis.fcond
+                       and type AsmPseudoOps.T.Basis.rounding_mode = T.Basis.rounding_mode
+                       and type AsmPseudoOps.T.Constant.const = T.Constant.const
+                       and type ('s,'r,'f,'c) AsmPseudoOps.T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                       and type ('s,'r,'f,'c) AsmPseudoOps.T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                       and type ('s,'r,'f,'c) AsmPseudoOps.T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                       and type ('s,'r,'f,'c) AsmPseudoOps.T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                       and type AsmPseudoOps.T.I.div_rounding_mode = T.I.div_rounding_mode
+                       and type AsmPseudoOps.T.Region.region = T.Region.region
+                       and type AsmPseudoOps.T.ccexp = T.ccexp
+                       and type AsmPseudoOps.T.fexp = T.fexp
+                       (* and type AsmPseudoOps.T.labexp = T.labexp *)
+                       and type AsmPseudoOps.T.mlrisc = T.mlrisc
+                       and type AsmPseudoOps.T.oper = T.oper
+                       and type AsmPseudoOps.T.rep = T.rep
+                       and type AsmPseudoOps.T.rexp = T.rexp
+                       and type AsmPseudoOps.T.stm = T.stm
 
   type pseudo_op = (T.labexp, Client.pseudo_op) PseudoOpsBasisTyp.pseudo_op
 
diff --git a/frequencies/compute-freqs-fn.sml b/frequencies/compute-freqs-fn.sml
index 2c701ce..cc41c8d 100644
--- a/frequencies/compute-freqs-fn.sml
+++ b/frequencies/compute-freqs-fn.sml
@@ -40,9 +40,9 @@ functor ComputeFreqsFn (
 
   (***** Representation of equations *****)
     type var = Graph.node_id
+    type term = (real * var)
+    type sum = {terms : term list, c : real}
     datatype def = Unknown | Sum of sum
-    withtype term = (real * var)
-	 and sum = {terms : term list, c : real}
 
     val zero = {c = 0.0, terms = []}
     val one = {c = 1.0, terms = []}
diff --git a/gc-safety/gc-cells.sig b/gc-safety/gc-cells.sig
index c70e143..09f8388 100644
--- a/gc-safety/gc-cells.sig
+++ b/gc-safety/gc-cells.sig
@@ -8,7 +8,16 @@ sig
 
    structure C  : CELLS
    structure GC : GC_TYPE
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
 
    (* Generate a virtual register and update the gc info at the same time. *)
    val newCell   : CB.cellkind -> GC.gctype -> CB.cell
diff --git a/graphs/digraph.sml b/graphs/digraph.sml
index 44d341a..005c015 100644
--- a/graphs/digraph.sml
+++ b/graphs/digraph.sml
@@ -7,7 +7,7 @@
  * -- Allen
  *)
 
-functor DirectedGraph(A : ARRAY) : 
+functor DirectedGraph(A : ARRAY_NONEQ) :
 sig include GRAPH_IMPLEMENTATION 
 
     type 'e adjlist   = 'e Graph.edge list A.array
diff --git a/hppa/backpatch/hppaDelaySlotProps.sml b/hppa/backpatch/hppaDelaySlotProps.sml
index 5b2ffbb..da1d324 100644
--- a/hppa/backpatch/hppaDelaySlotProps.sml
+++ b/hppa/backpatch/hppaDelaySlotProps.sml
@@ -4,7 +4,12 @@
 
 functor HppaDelaySlots
    (structure I : HPPAINSTR
-    structure P : INSN_PROPERTIES where I = I
+    structure P : INSN_PROPERTIES (* where I = I *)
+                  where type I.addressing_mode = I.addressing_mode
+                    and type I.ea = I.ea
+                    and type I.instr = I.instr
+                    and type I.instruction = I.instruction
+                    and type I.operand = I.operand
    ) : DELAY_SLOT_PROPERTIES =
 struct
    structure I  = I
diff --git a/hppa/backpatch/hppaJumps.sml b/hppa/backpatch/hppaJumps.sml
index df66191..fc3e049 100644
--- a/hppa/backpatch/hppaJumps.sml
+++ b/hppa/backpatch/hppaJumps.sml
@@ -5,10 +5,75 @@
  *)
 functor HppaJumps
   ( structure Instr:HPPAINSTR
-    structure Shuffle:HPPASHUFFLE 
-			 where I = Instr
-    structure MLTreeEval : MLTREE_EVAL 
-		         where T = Instr.T
+    structure Shuffle:HPPASHUFFLE (* where I = Instr *)
+                      where type I.Constant.const = Instr.Constant.const
+                        and type I.Region.region = Instr.Region.region
+                        and type I.T.Basis.cond = Instr.T.Basis.cond
+                        and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                        and type I.T.Basis.ext = Instr.T.Basis.ext
+                        and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                        and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                        and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                        and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                        and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                        and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                        and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                        and type I.T.ccexp = Instr.T.ccexp
+                        and type I.T.fexp = Instr.T.fexp
+                        (* and type I.T.labexp = Instr.T.labexp *)
+                        and type I.T.mlrisc = Instr.T.mlrisc
+                        and type I.T.oper = Instr.T.oper
+                        and type I.T.rep = Instr.T.rep
+                        and type I.T.rexp = Instr.T.rexp
+                        and type I.T.stm = Instr.T.stm
+                        and type I.addressing_mode = Instr.addressing_mode
+                        and type I.arith = Instr.arith
+                        and type I.arithi = Instr.arithi
+                        and type I.bcond = Instr.bcond
+                        and type I.bitcond = Instr.bitcond
+                        and type I.cmp = Instr.cmp
+                        and type I.cmpi = Instr.cmpi
+                        and type I.ea = Instr.ea
+                        and type I.farith = Instr.farith
+                        and type I.fcnv = Instr.fcnv
+                        and type I.fcond = Instr.fcond
+                        and type I.field_selector = Instr.field_selector
+                        and type I.fload = Instr.fload
+                        and type I.floadx = Instr.floadx
+                        and type I.fmt = Instr.fmt
+                        and type I.fstore = Instr.fstore
+                        and type I.fstorex = Instr.fstorex
+                        and type I.funary = Instr.funary
+                        and type I.instr = Instr.instr
+                        and type I.instruction = Instr.instruction
+                        and type I.load = Instr.load
+                        and type I.loadi = Instr.loadi
+                        and type I.operand = Instr.operand
+                        and type I.scond = Instr.scond
+                        and type I.shift = Instr.shift
+                        and type I.shiftv = Instr.shiftv
+                        and type I.store = Instr.store
+    structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                           where type T.Basis.cond = Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = Instr.T.Basis.ext
+                             and type T.Basis.fcond = Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                             and type T.Region.region = Instr.T.Region.region
+                             and type T.ccexp = Instr.T.ccexp
+                             and type T.fexp = Instr.T.fexp
+                             (* and type T.labexp = Instr.T.labexp *)
+                             and type T.mlrisc = Instr.T.mlrisc
+                             and type T.oper = Instr.T.oper
+                             and type T.rep = Instr.T.rep
+                             and type T.rexp = Instr.T.rexp
+                             and type T.stm = Instr.T.stm
   ) : SDI_JUMPS =				
 struct
   structure I = Instr
diff --git a/hppa/emit/hppaAsm.sml b/hppa/emit/hppaAsm.sml
index 734e0d1..be2453a 100644
--- a/hppa/emit/hppaAsm.sml
+++ b/hppa/emit/hppaAsm.sml
@@ -6,12 +6,96 @@
 
 
 functor HppaAsmEmitter(structure S : INSTRUCTION_STREAM
-                       structure Instr : HPPAINSTR
-                          where T = S.P.T
-                       structure Shuffle : HPPASHUFFLE
-                          where I = Instr
-                       structure MLTreeEval : MLTREE_EVAL
-                          where T = Instr.T
+                       structure Instr : HPPAINSTR (* where T = S.P.T *)
+                                         where type T.Basis.cond = S.P.T.Basis.cond
+                                           and type T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+                                           and type T.Basis.ext = S.P.T.Basis.ext
+                                           and type T.Basis.fcond = S.P.T.Basis.fcond
+                                           and type T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+                                           and type T.Constant.const = S.P.T.Constant.const
+                                           and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+                                           and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+                                           and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+                                           and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+                                           and type T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+                                           and type T.Region.region = S.P.T.Region.region
+                                           and type T.ccexp = S.P.T.ccexp
+                                           and type T.fexp = S.P.T.fexp
+                                           (* and type T.labexp = S.P.T.labexp *)
+                                           and type T.mlrisc = S.P.T.mlrisc
+                                           and type T.oper = S.P.T.oper
+                                           and type T.rep = S.P.T.rep
+                                           and type T.rexp = S.P.T.rexp
+                                           and type T.stm = S.P.T.stm
+                       structure Shuffle : HPPASHUFFLE (* where I = Instr *)
+                                           where type I.Constant.const = Instr.Constant.const
+                                             and type I.Region.region = Instr.Region.region
+                                             and type I.T.Basis.cond = Instr.T.Basis.cond
+                                             and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                             and type I.T.Basis.ext = Instr.T.Basis.ext
+                                             and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                             and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                             and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                             and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                             and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                             and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                             and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                             and type I.T.ccexp = Instr.T.ccexp
+                                             and type I.T.fexp = Instr.T.fexp
+                                             (* and type I.T.labexp = Instr.T.labexp *)
+                                             and type I.T.mlrisc = Instr.T.mlrisc
+                                             and type I.T.oper = Instr.T.oper
+                                             and type I.T.rep = Instr.T.rep
+                                             and type I.T.rexp = Instr.T.rexp
+                                             and type I.T.stm = Instr.T.stm
+                                             and type I.addressing_mode = Instr.addressing_mode
+                                             and type I.arith = Instr.arith
+                                             and type I.arithi = Instr.arithi
+                                             and type I.bcond = Instr.bcond
+                                             and type I.bitcond = Instr.bitcond
+                                             and type I.cmp = Instr.cmp
+                                             and type I.cmpi = Instr.cmpi
+                                             and type I.ea = Instr.ea
+                                             and type I.farith = Instr.farith
+                                             and type I.fcnv = Instr.fcnv
+                                             and type I.fcond = Instr.fcond
+                                             and type I.field_selector = Instr.field_selector
+                                             and type I.fload = Instr.fload
+                                             and type I.floadx = Instr.floadx
+                                             and type I.fmt = Instr.fmt
+                                             and type I.fstore = Instr.fstore
+                                             and type I.fstorex = Instr.fstorex
+                                             and type I.funary = Instr.funary
+                                             and type I.instr = Instr.instr
+                                             and type I.instruction = Instr.instruction
+                                             and type I.load = Instr.load
+                                             and type I.loadi = Instr.loadi
+                                             and type I.operand = Instr.operand
+                                             and type I.scond = Instr.scond
+                                             and type I.shift = Instr.shift
+                                             and type I.shiftv = Instr.shiftv
+                                             and type I.store = Instr.store
+                       structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                              where type T.Basis.cond = Instr.T.Basis.cond
+                                                and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                                and type T.Basis.ext = Instr.T.Basis.ext
+                                                and type T.Basis.fcond = Instr.T.Basis.fcond
+                                                and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                                and type T.Constant.const = Instr.T.Constant.const
+                                                and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                                and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                                and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                                and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                                and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                                and type T.Region.region = Instr.T.Region.region
+                                                and type T.ccexp = Instr.T.ccexp
+                                                and type T.fexp = Instr.T.fexp
+                                                (* and type T.labexp = Instr.T.labexp *)
+                                                and type T.mlrisc = Instr.T.mlrisc
+                                                and type T.oper = Instr.T.oper
+                                                and type T.rep = Instr.T.rep
+                                                and type T.rexp = Instr.T.rexp
+                                                and type T.stm = Instr.T.stm
                       ) : INSTRUCTION_EMITTER =
 struct
    structure I  = Instr
diff --git a/hppa/emit/hppaMC.sml b/hppa/emit/hppaMC.sml
index 12e4c05..f40e3de 100644
--- a/hppa/emit/hppaMC.sml
+++ b/hppa/emit/hppaMC.sml
@@ -6,7 +6,27 @@
 
 
 functor HppaMCEmitter(structure Instr : HPPAINSTR
-                      structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+                      structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                             where type T.Basis.cond = Instr.T.Basis.cond
+                                               and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                               and type T.Basis.ext = Instr.T.Basis.ext
+                                               and type T.Basis.fcond = Instr.T.Basis.fcond
+                                               and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                               and type T.Constant.const = Instr.T.Constant.const
+                                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                               and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                               and type T.Region.region = Instr.T.Region.region
+                                               and type T.ccexp = Instr.T.ccexp
+                                               and type T.fexp = Instr.T.fexp
+                                               (* and type T.labexp = Instr.T.labexp *)
+                                               and type T.mlrisc = Instr.T.mlrisc
+                                               and type T.oper = Instr.T.oper
+                                               and type T.rep = Instr.T.rep
+                                               and type T.rexp = Instr.T.rexp
+                                               and type T.stm = Instr.T.stm
                       structure Stream : INSTRUCTION_STREAM
                       structure CodeString : CODE_STRING
                      ) : INSTRUCTION_EMITTER =
diff --git a/hppa/flowgraph/hppaGasPseudoOps.sml b/hppa/flowgraph/hppaGasPseudoOps.sml
index 8e77f26..859cb7a 100644
--- a/hppa/flowgraph/hppaGasPseudoOps.sml
+++ b/hppa/flowgraph/hppaGasPseudoOps.sml
@@ -1,6 +1,26 @@
 functor HppaGasPseudoOps 
    ( structure T : MLTREE
-     structure MLTreeEval : MLTREE_EVAL  where T = T
+     structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                            where type T.Basis.cond = T.Basis.cond
+                              and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                              and type T.Basis.ext = T.Basis.ext
+                              and type T.Basis.fcond = T.Basis.fcond
+                              and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                              and type T.Constant.const = T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                              and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                              and type T.Region.region = T.Region.region
+                              and type T.ccexp = T.ccexp
+                              and type T.fexp = T.fexp
+                              (* and type T.labexp = T.labexp *)
+                              and type T.mlrisc = T.mlrisc
+                              and type T.oper = T.oper
+                              and type T.rep = T.rep
+                              and type T.rexp = T.rexp
+                              and type T.stm = T.stm
     ) : PSEUDO_OPS_BASIS = 
 
 struct
diff --git a/hppa/instructions/hppaInstr.sml b/hppa/instructions/hppaInstr.sml
index 069c26c..ff579c9 100644
--- a/hppa/instructions/hppaInstr.sml
+++ b/hppa/instructions/hppaInstr.sml
@@ -8,7 +8,16 @@
 signature HPPAINSTR =
 sig
    structure C : HPPACELLS
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    structure T : MLTREE
    structure Constant: CONSTANT
    structure Region : REGION
diff --git a/hppa/instructions/hppaProps.sml b/hppa/instructions/hppaProps.sml
index df9b170..2d0b5b0 100644
--- a/hppa/instructions/hppaProps.sml
+++ b/hppa/instructions/hppaProps.sml
@@ -6,8 +6,48 @@
 
 functor HppaProps
    ( structure HppaInstr : HPPAINSTR
-     structure MLTreeEval : MLTREE_EVAL where T = HppaInstr.T
-     structure MLTreeHash : MLTREE_HASH where T = HppaInstr.T
+     structure MLTreeEval : MLTREE_EVAL (* where T = HppaInstr.T *)
+                            where type T.Basis.cond = HppaInstr.T.Basis.cond
+                              and type T.Basis.div_rounding_mode = HppaInstr.T.Basis.div_rounding_mode
+                              and type T.Basis.ext = HppaInstr.T.Basis.ext
+                              and type T.Basis.fcond = HppaInstr.T.Basis.fcond
+                              and type T.Basis.rounding_mode = HppaInstr.T.Basis.rounding_mode
+                              and type T.Constant.const = HppaInstr.T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) HppaInstr.T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) HppaInstr.T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) HppaInstr.T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) HppaInstr.T.Extension.sx
+                              and type T.I.div_rounding_mode = HppaInstr.T.I.div_rounding_mode
+                              and type T.Region.region = HppaInstr.T.Region.region
+                              and type T.ccexp = HppaInstr.T.ccexp
+                              and type T.fexp = HppaInstr.T.fexp
+                              (* and type T.labexp = HppaInstr.T.labexp *)
+                              and type T.mlrisc = HppaInstr.T.mlrisc
+                              and type T.oper = HppaInstr.T.oper
+                              and type T.rep = HppaInstr.T.rep
+                              and type T.rexp = HppaInstr.T.rexp
+                              and type T.stm = HppaInstr.T.stm
+     structure MLTreeHash : MLTREE_HASH (* where T = HppaInstr.T *)
+                            where type T.Basis.cond = HppaInstr.T.Basis.cond
+                              and type T.Basis.div_rounding_mode = HppaInstr.T.Basis.div_rounding_mode
+                              and type T.Basis.ext = HppaInstr.T.Basis.ext
+                              and type T.Basis.fcond = HppaInstr.T.Basis.fcond
+                              and type T.Basis.rounding_mode = HppaInstr.T.Basis.rounding_mode
+                              and type T.Constant.const = HppaInstr.T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) HppaInstr.T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) HppaInstr.T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) HppaInstr.T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) HppaInstr.T.Extension.sx
+                              and type T.I.div_rounding_mode = HppaInstr.T.I.div_rounding_mode
+                              and type T.Region.region = HppaInstr.T.Region.region
+                              and type T.ccexp = HppaInstr.T.ccexp
+                              and type T.fexp = HppaInstr.T.fexp
+                              (* and type T.labexp = HppaInstr.T.labexp *)
+                              and type T.mlrisc = HppaInstr.T.mlrisc
+                              and type T.oper = HppaInstr.T.oper
+                              and type T.rep = HppaInstr.T.rep
+                              and type T.rexp = HppaInstr.T.rexp
+                              and type T.stm = HppaInstr.T.stm
     ) : INSN_PROPERTIES = 
 struct
   structure I = HppaInstr
diff --git a/hppa/mltree/hppa.sml b/hppa/mltree/hppa.sml
index 50a58b4..f1d8959 100644
--- a/hppa/mltree/hppa.sml
+++ b/hppa/mltree/hppa.sml
@@ -14,14 +14,106 @@
 
 functor Hppa
   (structure HppaInstr : HPPAINSTR
-   structure ExtensionComp : MLTREE_EXTENSION_COMP
-      		where I = HppaInstr 
-		  and T = HppaInstr.T
-   structure MilliCode : HPPA_MILLICODE
-      		where I = HppaInstr
-   structure LabelComp : LABEL_COMP 
-   		where I = HppaInstr  
-		  and T = HppaInstr.T
+   structure ExtensionComp : MLTREE_EXTENSION_COMP (* where I = HppaInstr and T = HppaInstr.T *)
+                             where type I.addressing_mode = HppaInstr.addressing_mode
+                               and type I.ea = HppaInstr.ea
+                               and type I.instr = HppaInstr.instr
+                               and type I.instruction = HppaInstr.instruction
+                               and type I.operand = HppaInstr.operand
+                             where type T.Basis.cond = HppaInstr.T.Basis.cond
+                               and type T.Basis.div_rounding_mode = HppaInstr.T.Basis.div_rounding_mode
+                               and type T.Basis.ext = HppaInstr.T.Basis.ext
+                               and type T.Basis.fcond = HppaInstr.T.Basis.fcond
+                               and type T.Basis.rounding_mode = HppaInstr.T.Basis.rounding_mode
+                               and type T.Constant.const = HppaInstr.T.Constant.const
+                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) HppaInstr.T.Extension.ccx
+                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) HppaInstr.T.Extension.fx
+                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) HppaInstr.T.Extension.rx
+                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) HppaInstr.T.Extension.sx
+                               and type T.I.div_rounding_mode = HppaInstr.T.I.div_rounding_mode
+                               and type T.Region.region = HppaInstr.T.Region.region
+                               and type T.ccexp = HppaInstr.T.ccexp
+                               and type T.fexp = HppaInstr.T.fexp
+                               (* and type T.labexp = HppaInstr.T.labexp *)
+                               and type T.mlrisc = HppaInstr.T.mlrisc
+                               and type T.oper = HppaInstr.T.oper
+                               and type T.rep = HppaInstr.T.rep
+                               and type T.rexp = HppaInstr.T.rexp
+                               and type T.stm = HppaInstr.T.stm
+   structure MilliCode : HPPA_MILLICODE (* where I = HppaInstr *)
+                         where type I.Constant.const = HppaInstr.Constant.const
+                           and type I.Region.region = HppaInstr.Region.region
+                           and type I.T.Basis.cond = HppaInstr.T.Basis.cond
+                           and type I.T.Basis.div_rounding_mode = HppaInstr.T.Basis.div_rounding_mode
+                           and type I.T.Basis.ext = HppaInstr.T.Basis.ext
+                           and type I.T.Basis.fcond = HppaInstr.T.Basis.fcond
+                           and type I.T.Basis.rounding_mode = HppaInstr.T.Basis.rounding_mode
+                           and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) HppaInstr.T.Extension.ccx
+                           and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) HppaInstr.T.Extension.fx
+                           and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) HppaInstr.T.Extension.rx
+                           and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) HppaInstr.T.Extension.sx
+                           and type I.T.I.div_rounding_mode = HppaInstr.T.I.div_rounding_mode
+                           and type I.T.ccexp = HppaInstr.T.ccexp
+                           and type I.T.fexp = HppaInstr.T.fexp
+                           (* and type I.T.labexp = HppaInstr.T.labexp *)
+                           and type I.T.mlrisc = HppaInstr.T.mlrisc
+                           and type I.T.oper = HppaInstr.T.oper
+                           and type I.T.rep = HppaInstr.T.rep
+                           and type I.T.rexp = HppaInstr.T.rexp
+                           and type I.T.stm = HppaInstr.T.stm
+                           and type I.addressing_mode = HppaInstr.addressing_mode
+                           and type I.arith = HppaInstr.arith
+                           and type I.arithi = HppaInstr.arithi
+                           and type I.bcond = HppaInstr.bcond
+                           and type I.bitcond = HppaInstr.bitcond
+                           and type I.cmp = HppaInstr.cmp
+                           and type I.cmpi = HppaInstr.cmpi
+                           and type I.ea = HppaInstr.ea
+                           and type I.farith = HppaInstr.farith
+                           and type I.fcnv = HppaInstr.fcnv
+                           and type I.fcond = HppaInstr.fcond
+                           and type I.field_selector = HppaInstr.field_selector
+                           and type I.fload = HppaInstr.fload
+                           and type I.floadx = HppaInstr.floadx
+                           and type I.fmt = HppaInstr.fmt
+                           and type I.fstore = HppaInstr.fstore
+                           and type I.fstorex = HppaInstr.fstorex
+                           and type I.funary = HppaInstr.funary
+                           and type I.instr = HppaInstr.instr
+                           and type I.instruction = HppaInstr.instruction
+                           and type I.load = HppaInstr.load
+                           and type I.loadi = HppaInstr.loadi
+                           and type I.operand = HppaInstr.operand
+                           and type I.scond = HppaInstr.scond
+                           and type I.shift = HppaInstr.shift
+                           and type I.shiftv = HppaInstr.shiftv
+                           and type I.store = HppaInstr.store
+   structure LabelComp : LABEL_COMP (* where I = HppaInstr and T = HppaInstr.T *)
+                         where type I.addressing_mode = HppaInstr.addressing_mode
+                           and type I.ea = HppaInstr.ea
+                           and type I.instr = HppaInstr.instr
+                           and type I.instruction = HppaInstr.instruction
+                           and type I.operand = HppaInstr.operand
+                         where type T.Basis.cond = HppaInstr.T.Basis.cond
+                           and type T.Basis.div_rounding_mode = HppaInstr.T.Basis.div_rounding_mode
+                           and type T.Basis.ext = HppaInstr.T.Basis.ext
+                           and type T.Basis.fcond = HppaInstr.T.Basis.fcond
+                           and type T.Basis.rounding_mode = HppaInstr.T.Basis.rounding_mode
+                           and type T.Constant.const = HppaInstr.T.Constant.const
+                           and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) HppaInstr.T.Extension.ccx
+                           and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) HppaInstr.T.Extension.fx
+                           and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) HppaInstr.T.Extension.rx
+                           and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) HppaInstr.T.Extension.sx
+                           and type T.I.div_rounding_mode = HppaInstr.T.I.div_rounding_mode
+                           and type T.Region.region = HppaInstr.T.Region.region
+                           and type T.ccexp = HppaInstr.T.ccexp
+                           and type T.fexp = HppaInstr.T.fexp
+                           (* and type T.labexp = HppaInstr.T.labexp *)
+                           and type T.mlrisc = HppaInstr.T.mlrisc
+                           and type T.oper = HppaInstr.T.oper
+                           and type T.rep = HppaInstr.T.rep
+                           and type T.rexp = HppaInstr.T.rexp
+                           and type T.stm = HppaInstr.T.stm
    val costOfMultiply : int ref
    val costOfDivision : int ref
   ) : MLTREECOMP =
@@ -52,8 +144,8 @@ struct
    fun mkfcopy{dst, src, tmp} =
        I.COPY{k=CB.FP, sz=64, dst=dst, src=src, tmp=tmp}
    structure W = Word32
-   functor Multiply32 = MLTreeMult
-    (structure I = I
+   structure Multiply32 = struct
+     structure I = I
      structure T = T
      structure CB = CB
      val intTy = 32
@@ -65,11 +157,12 @@ struct
      fun slli{r,i,d} = [I.shift{s=I.ZDEP,r=r,p=31-i,len=32-i,t=d}]
      fun srli{r,i,d} = [I.shift{s=I.EXTRU,r=r,p=31-i,len=32-i,t=d}]
      fun srai{r,i,d} = [I.shift{s=I.EXTRS,r=r,p=31-i,len=32-i,t=d}]
-    )
+   end
 
    (* signed, trapping version of multiply and divide *)
-   structure Mult32 = Multiply32
-    (val trapping = true
+   structure Mult32 = MLTreeMult
+    (open Multiply32
+     val trapping = true
      val multCost = costOfMultiply
      val divCost  = costOfDivision
      fun addv{r1,r2,d} = [I.arith{a=I.ADDO,r1=r1,r2=r2,t=d}]
@@ -77,12 +170,13 @@ struct
      val sh1addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH1ADDO,r1=r1,r2=r2,t=d}])
      val sh2addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH2ADDO,r1=r1,r2=r2,t=d}])
      val sh3addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH3ADDO,r1=r1,r2=r2,t=d}])
-    )
-    (val signed = true)
+
+     val signed = true)
 
    (* unsigned, non-trapping version of multiply and divide *)
-   structure Mulu32 = Multiply32
-    (val trapping = false
+   structure Mulu32 = MLTreeMult
+    (open Multiply32
+     val trapping = false
      val multCost = costOfMultiply
      val divCost  = costOfDivision
      fun addv{r1,r2,d} = [I.arith{a=I.ADD,r1=r1,r2=r2,t=d}]
@@ -90,12 +184,13 @@ struct
      val sh1addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH1ADDL,r1=r1,r2=r2,t=d}])
      val sh2addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH2ADDL,r1=r1,r2=r2,t=d}])
      val sh3addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH3ADDL,r1=r1,r2=r2,t=d}])
-    )
-    (val signed   = false)
+
+     val signed   = false)
 
    (* signed, non-trapping version of multiply and divide *)
-   structure Muls32 = Multiply32
-    (val trapping = false
+   structure Muls32 = MLTreeMult
+    (open Multiply32
+     val trapping = false
      val multCost = costOfMultiply
      val divCost  = costOfDivision
      fun addv{r1,r2,d} = [I.arith{a=I.ADD,r1=r1,r2=r2,t=d}]
@@ -103,8 +198,8 @@ struct
      val sh1addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH1ADDL,r1=r1,r2=r2,t=d}])
      val sh2addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH2ADDL,r1=r1,r2=r2,t=d}])
      val sh3addv = SOME(fn{r1,r2,d} => [I.arith{a=I.SH3ADDL,r1=r1,r2=r2,t=d}])
-    )
-    (val signed   = true)
+
+     val signed   = true)
 
    fun error msg = MLRiscErrorMsg.error("Hppa",msg)
 
diff --git a/hppa/mltree/hppaMillicode.sig b/hppa/mltree/hppaMillicode.sig
index 936dd90..d801996 100644
--- a/hppa/mltree/hppaMillicode.sig
+++ b/hppa/mltree/hppaMillicode.sig
@@ -1,6 +1,15 @@
 signature HPPA_MILLICODE = sig
   structure I : HPPAINSTR
-  structure CB : CELLS_BASIS =  CellsBasis
+  structure CB : CELLS_BASIS (* = CellsBasis *)
+                 where type CellSet.cellset = CellsBasis.CellSet.cellset
+                   and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                   and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                   and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                   and type cell = CellsBasis.cell
+                   and type cellColor = CellsBasis.cellColor
+                   and type cellkind = CellsBasis.cellkind
+                   and type cellkindDesc = CellsBasis.cellkindDesc
+                   and type cellkindInfo = CellsBasis.cellkindInfo
 
   val divu : {rs:CB.cell, rt:CB.cell, rd:CB.cell} -> I.instruction list
   val mulo : {rs:CB.cell, rt:CB.cell, rd:CB.cell} -> I.instruction list
diff --git a/instructions/insnProps.sig b/instructions/insnProps.sig
index 63fde27..29ed432 100644
--- a/instructions/insnProps.sig
+++ b/instructions/insnProps.sig
@@ -7,7 +7,7 @@ signature INSN_PROPERTIES =
 sig
    structure I : INSTRUCTIONS
    structure C : CELLS
-     sharing I.C = C
+     (* sharing I.C = C *)
 
       (* classify instructions *)
    datatype kind = IK_JUMP   (* branches, including returns *)
diff --git a/instructions/instructions.sig b/instructions/instructions.sig
index cbd007c..eb8a1b3 100644
--- a/instructions/instructions.sig
+++ b/instructions/instructions.sig
@@ -8,7 +8,16 @@
 signature INSTRUCTIONS =
 sig
    structure C   : CELLS
-   structure CB  :CELLS_BASIS = CellsBasis
+   structure CB  : CELLS_BASIS (* = CellsBasis *)
+                   where type CellSet.cellset = CellsBasis.CellSet.cellset
+                     and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                     and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                     and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                     and type cell = CellsBasis.cell
+                     and type cellColor = CellsBasis.cellColor
+                     and type cellkind = CellsBasis.cellkind
+                     and type cellkindDesc = CellsBasis.cellkindDesc
+                     and type cellkindInfo = CellsBasis.cellkindInfo
    type operand             (* operands supported by architecture *)
    type addressing_mode                        (* addressing mode *)
    type ea              (* effective address for accessing memory *)
diff --git a/instructions/mlriscAnnotations.sig b/instructions/mlriscAnnotations.sig
index 36c14af..39d87eb 100644
--- a/instructions/mlriscAnnotations.sig
+++ b/instructions/mlriscAnnotations.sig
@@ -15,7 +15,16 @@
 signature MLRISC_ANNOTATIONS =
 sig
 
-    structure C : CELLS_BASIS = CellsBasis
+    structure C : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
 
     (* 
      * The branch probability of conditional branches. 
diff --git a/library/array-noneq.sig b/library/array-noneq.sig
new file mode 100644
index 0000000..544c0fd
--- /dev/null
+++ b/library/array-noneq.sig
@@ -0,0 +1,41 @@
+signature ARRAY_NONEQ =
+   sig
+      type 'a array
+      type 'a vector
+
+      val all: ('a -> bool) -> 'a array -> bool
+      val app: ('a -> unit) -> 'a array -> unit
+      val appi: (int * 'a -> unit) -> 'a array -> unit
+      val array: int * 'a -> 'a array
+      val collate: ('a * 'a -> order) -> 'a array * 'a array -> order
+      val copy: {src: 'a array, dst: 'a array, di: int} -> unit
+      val copyVec: {src: 'a vector, dst: 'a array, di: int} -> unit
+      val exists: ('a -> bool) -> 'a array -> bool
+      val find: ('a -> bool) -> 'a array -> 'a option
+      val findi: (int * 'a -> bool) -> 'a array -> (int * 'a) option
+      val foldl: ('a * 'b -> 'b) -> 'b -> 'a array -> 'b
+      val foldli: (int * 'a * 'b -> 'b) -> 'b -> 'a array -> 'b
+      val foldr: ('a * 'b -> 'b) -> 'b -> 'a array -> 'b
+      val foldri: (int * 'a * 'b -> 'b) -> 'b -> 'a array -> 'b
+      val fromList: 'a list -> 'a array
+      val length: 'a array -> int
+      val maxLen: int
+      val modify: ('a -> 'a) -> 'a array -> unit
+      val modifyi: (int * 'a -> 'a) -> 'a array -> unit
+      val sub: 'a array * int -> 'a
+      val tabulate: int * (int -> 'a) -> 'a array
+      val update: 'a array * int * 'a -> unit
+      val vector: 'a array -> 'a vector
+
+(*
+      val toList: 'a array -> 'a list
+      val fromVector: 'a vector -> 'a array
+      val toVector: 'a array -> 'a vector
+*)
+   end
+(*
+functor Chk(A : ARRAY) : ARRAY_NONEQ = A
+functor Chk(A : ARRAY_NONEQ
+                where type 'a array = 'a array
+                where type 'a vector = 'a vector) : ARRAY = A
+*)
diff --git a/library/dynamic-array.sml b/library/dynamic-array.sml
index dc16832..5bd96e4 100644
--- a/library/dynamic-array.sml
+++ b/library/dynamic-array.sml
@@ -10,7 +10,7 @@
 
 structure DynArray : sig
 
-    include ARRAY
+    include ARRAY_NONEQ
 
     val fromArray : 'a Array.array * 'a * int -> 'a array
     val baseArray : 'a array -> 'a Array.array
@@ -97,6 +97,8 @@ structure DynArray : sig
    (* additional operations from Basis Library proposal 2015-003 *)
      fun toList arr = foldr (op ::) [] arr
 
+
+(*
      fun fromVector v = let
 	    val arr = A.fromVector v
 	    val default = A.sub(arr, 0)
@@ -104,6 +106,7 @@ structure DynArray : sig
 	      ARRAY(ref arr, default, ref (A.length arr))
 	    end
 	      handle _ => raise Size
+*)
 
      val toVector = vector
 
diff --git a/library/hash-array.sml b/library/hash-array.sml
index 074f3e8..1a76b66 100644
--- a/library/hash-array.sml
+++ b/library/hash-array.sml
@@ -10,7 +10,7 @@
 
 structure HashArray : sig
 
-    include ARRAY
+    include ARRAY_NONEQ
 
     val array' : int * (int -> 'a) -> 'a array
     val array'': int * (int -> 'a) -> 'a array
diff --git a/library/sources.cm b/library/sources.cm
index 016ee18..cac4fae 100644
--- a/library/sources.cm
+++ b/library/sources.cm
@@ -1,4 +1,5 @@
 Library 
+        signature ARRAY_NONEQ
 	signature ANNOTATIONS
 	structure Annotations
 	signature BITSET
@@ -21,6 +22,7 @@ is
 #else
 	smlnj-lib.cm
 #endif
+        array-noneq.sig
 
 	annotations.sig
 	annotations.sml
diff --git a/mlb/ALPHA.mlb b/mlb/ALPHA.mlb
new file mode 100644
index 0000000..cdb4b3d
--- /dev/null
+++ b/mlb/ALPHA.mlb
@@ -0,0 +1,673 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l8 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l183 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l57 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l16 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = INSTRUCTION_EMITTER
+   end
+   local
+      open l8
+   in
+      structure gs_1 = TextIO
+   end
+   local
+      open l4
+   in
+      signature gs_2 = ASM_STREAM
+      structure gs_3 = AsmStream
+   end
+   local
+      open l16
+   in
+      structure gs_4 = Annotations
+   end
+   local
+      open l8
+   in
+      structure gs_5 = Char
+      structure gs_6 = CharArray
+      structure gs_7 = CharVector
+      structure gs_8 = FixedInt
+      structure gs_9 = General
+      structure gs_10 = Int
+      structure gs_11 = Int32
+      structure gs_12 = Int64
+      structure gs_13 = IntInf
+      structure gs_14 = LargeInt
+      structure gs_15 = LargeReal
+      structure gs_16 = LargeWord
+      structure gs_17 = OS
+      structure gs_18 = Position
+      structure gs_19 = Real
+      structure gs_20 = Real64
+      structure gs_21 = RealArray
+      structure gs_22 = RealArraySlice
+      structure gs_23 = RealVector
+      structure gs_24 = RealVectorSlice
+      structure gs_25 = SMLofNJ
+      structure gs_26 = Socket
+      structure gs_27 = String
+      structure gs_28 = Substring
+      structure gs_29 = SysWord
+      structure gs_30 = Time
+      structure gs_31 = Word
+      structure gs_32 = Word32
+      structure gs_33 = Word64
+      structure gs_34 = Word8
+   end
+   local
+      open l4
+   in
+      signature gs_35 = ASM_FORMAT_UTIL
+      structure gs_36 = AsmFormatUtil
+   end
+   local
+      open l57
+   in
+      signature gs_37 = MLRISC_ERROR_MSG
+      structure gs_38 = MLRiscErrorMsg
+   end
+   local
+      open l4
+   in
+      structure gs_39 = CellsBasis
+   end
+   local
+      open l4
+   in
+      structure gs_40 = AsmFlags
+   end
+   local
+      open l4
+   in
+      signature gs_41 = MLTREE_EVAL
+   end
+   local
+      open l4
+   in
+      signature gs_42 = INSTRUCTION_STREAM
+   end
+   local
+      open l4
+   in
+      signature gs_43 = REGION
+   end
+   local
+      open l4
+   in
+      signature gs_44 = CONSTANT
+   end
+   local
+      open l4
+   in
+      signature gs_45 = MLTREE
+   end
+   local
+      open l4
+   in
+      signature gs_46 = CELLS_BASIS
+   end
+   local
+      open l4
+   in
+      structure gs_47 = Label
+   end
+   local
+      open l4
+   in
+      functor gs_48 = Cells
+   end
+   local
+      open l4
+   in
+      signature gs_49 = CELLS
+   end
+   local
+      signature CELLS = gs_49
+      functor Cells = gs_48
+      structure CellsBasis = gs_39
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      structure OS = gs_17
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/instructions/alphaCells.sml
+   in
+      signature gs_50 = ALPHACELLS
+      structure gs_51 = AlphaCells
+   end
+   local
+      signature ALPHACELLS = gs_50
+      structure AlphaCells = gs_51
+      structure Annotations = gs_4
+      signature CELLS_BASIS = gs_46
+      signature CONSTANT = gs_44
+      structure CellsBasis = gs_39
+      structure Label = gs_47
+      signature MLTREE = gs_45
+      signature REGION = gs_43
+      ../alpha/instructions/alphaInstr.sml
+   in
+      signature gs_52 = ALPHAINSTR
+      functor gs_53 = AlphaInstr
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      functor AlphaInstr = gs_53
+      structure CellsBasis = gs_39
+      ../alpha/instructions/alphaShuffle.sig
+   in
+      signature gs_54 = ALPHASHUFFLE
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      signature ALPHASHUFFLE = gs_54
+      signature ASM_FORMAT_UTIL = gs_35
+      signature ASM_STREAM = gs_2
+      functor AlphaInstr = gs_53
+      structure Annotations = gs_4
+      structure AsmFlags = gs_40
+      structure AsmFormatUtil = gs_36
+      structure AsmStream = gs_3
+      structure CellsBasis = gs_39
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      signature INSTRUCTION_EMITTER = gs_0
+      signature INSTRUCTION_STREAM = gs_42
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      signature MLTREE_EVAL = gs_41
+      structure OS = gs_17
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure TextIO = gs_1
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/emit/alphaAsm.sml
+   in
+      functor gs_55 = AlphaAsmEmitter
+   end
+   local
+      signature ALPHACELLS = gs_50
+      signature ALPHAINSTR = gs_52
+      structure AlphaCells = gs_51
+      functor AlphaInstr = gs_53
+      signature CELLS_BASIS = gs_46
+      structure CellsBasis = gs_39
+      signature MLTREE = gs_45
+      ../alpha/mltree/alphaPseudoInstr.sig
+   in
+      signature gs_56 = ALPHA_PSEUDO_INSTR
+   end
+   local
+      open l4
+   in
+      signature gs_57 = SDI_JUMPS
+   end
+   local
+      open l8
+   in
+      structure gs_58 = Option
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      signature ALPHASHUFFLE = gs_54
+      functor AlphaInstr = gs_53
+      structure CellsBasis = gs_39
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      signature MLTREE_EVAL = gs_41
+      structure OS = gs_17
+      structure Option = gs_58
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      signature SDI_JUMPS = gs_57
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/backpatch/alphaJumps.sml
+   in
+      functor gs_59 = AlphaJumps
+   end
+   local
+      open l4
+   in
+      functor gs_60 = MLTreeMult
+   end
+   local
+      open l4
+   in
+      functor gs_61 = MLTreeGen
+   end
+   local
+      open l4
+   in
+      structure gs_62 = MLRiscAnnotations
+   end
+   local
+      open l8
+   in
+      structure gs_63 = List
+   end
+   local
+      open l4
+   in
+      signature gs_64 = MLTREECOMP
+      signature gs_65 = MLTREE_EXTENSION_COMP
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      signature ALPHA_PSEUDO_INSTR = gs_56
+      functor AlphaInstr = gs_53
+      structure CellsBasis = gs_39
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_47
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      structure List = gs_63
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscAnnotations = gs_62
+      structure MLRiscErrorMsg = gs_38
+      signature MLTREECOMP = gs_64
+      signature MLTREE_EXTENSION_COMP = gs_65
+      functor MLTreeGen = gs_61
+      functor MLTreeMult = gs_60
+      structure OS = gs_17
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/mltree/alpha.sml
+   in
+      functor gs_66 = Alpha
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      functor AlphaInstr = gs_53
+      structure CellsBasis = gs_39
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      ../alpha/ra/alphaRewrite.sml
+   in
+      functor gs_67 = AlphaRewrite
+   end
+   local
+      open l4
+   in
+      signature gs_68 = ARCH_SPILL_INSTR
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      signature ARCH_SPILL_INSTR = gs_68
+      functor AlphaInstr = gs_53
+      functor AlphaRewrite = gs_67
+      structure CellsBasis = gs_39
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      ../alpha/ra/alphaSpillInstr.sml
+   in
+      functor gs_69 = AlphaSpillInstr
+   end
+   local
+      open l4
+   in
+      signature gs_70 = INSN_PROPERTIES
+   end
+   local
+      open l4
+   in
+      signature gs_71 = MLTREE_HASH
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      functor AlphaInstr = gs_53
+      structure CellsBasis = gs_39
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      signature INSN_PROPERTIES = gs_70
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_47
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      signature MLTREE_EVAL = gs_41
+      signature MLTREE_HASH = gs_71
+      structure OS = gs_17
+      structure Option = gs_58
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/instructions/alphaProps.sml
+   in
+      functor gs_72 = AlphaProps
+   end
+   local
+      open l4
+   in
+      functor gs_73 = Shuffle
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      signature ALPHASHUFFLE = gs_54
+      functor AlphaInstr = gs_53
+      structure CellsBasis = gs_39
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      structure Option = gs_58
+      functor Shuffle = gs_73
+      ../alpha/instructions/alphaShuffle.sml
+   in
+      functor gs_74 = AlphaShuffle
+   end
+   local
+      open l4
+   in
+      signature gs_75 = PSEUDO_OPS_BASIS
+   end
+   local
+      open l4
+   in
+      functor gs_76 = GasPseudoOps
+   end
+   local
+      open l4
+   in
+      functor gs_77 = PseudoOpsLittle
+   end
+   local
+      open l183
+   in
+      structure gs_78 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_79 = PseudoOpsBasisTyp
+   end
+   local
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure Format = gs_78
+      functor GasPseudoOps = gs_76
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      signature MLTREE = gs_45
+      signature MLTREE_EVAL = gs_41
+      structure OS = gs_17
+      signature PSEUDO_OPS_BASIS = gs_75
+      structure Position = gs_18
+      structure PseudoOpsBasisTyp = gs_79
+      functor PseudoOpsLittle = gs_77
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/flowgraph/alphaGasPseudoOps.sml
+   in
+      functor gs_80 = AlphaGasPseudoOps
+   end
+   local
+      open l4
+   in
+      signature gs_81 = CODE_STRING
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      functor AlphaInstr = gs_53
+      signature CODE_STRING = gs_81
+      structure CellsBasis = gs_39
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      signature INSTRUCTION_EMITTER = gs_0
+      signature INSTRUCTION_STREAM = gs_42
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_47
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_37
+      structure MLRiscErrorMsg = gs_38
+      signature MLTREE_EVAL = gs_41
+      structure OS = gs_17
+      structure Option = gs_58
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../alpha/emit/alphaMC.sml
+   in
+      functor gs_82 = AlphaMCEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_83 = FREQUENCY_PROPERTIES
+   end
+   local
+      open l16
+   in
+      signature gs_84 = PROBABILITY
+      structure gs_85 = Probability
+   end
+   local
+      signature ALPHAINSTR = gs_52
+      functor AlphaInstr = gs_53
+      signature FREQUENCY_PROPERTIES = gs_83
+      structure MLRiscAnnotations = gs_62
+      signature PROBABILITY = gs_84
+      structure Probability = gs_85
+      ../alpha/instructions/alphaFreqProps.sml
+   in
+      functor gs_86 = AlphaFreqProps
+   end
+in
+   signature ALPHACELLS = gs_50
+   signature ALPHAINSTR = gs_52
+   signature ALPHASHUFFLE = gs_54
+   signature ALPHA_PSEUDO_INSTR = gs_56
+   functor Alpha = gs_66
+   functor AlphaAsmEmitter = gs_55
+   structure AlphaCells = gs_51
+   functor AlphaFreqProps = gs_86
+   functor AlphaGasPseudoOps = gs_80
+   functor AlphaInstr = gs_53
+   functor AlphaJumps = gs_59
+   functor AlphaMCEmitter = gs_82
+   functor AlphaProps = gs_72
+   functor AlphaRewrite = gs_67
+   functor AlphaShuffle = gs_74
+   functor AlphaSpillInstr = gs_69
+end
+end
+
+end
diff --git a/mlb/AMD64-Peephole.mlb b/mlb/AMD64-Peephole.mlb
new file mode 100644
index 0000000..5002b9b
--- /dev/null
+++ b/mlb/AMD64-Peephole.mlb
@@ -0,0 +1,62 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l8 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l4 =
+    bas
+      (* $Peephole.cm(=(proxyLib.cm):.)/Peephole.cm =??=> *) Peephole.mlb
+    end
+  basis l16 =
+    bas
+      (* $AMD64.cm(=(proxyLib.cm):.)/AMD64.cm =??=> *) AMD64.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = PEEPHOLE
+   end
+   local
+      open l8
+   in
+      structure gs_1 = CellsBasis
+   end
+   local
+      open l8
+   in
+      signature gs_2 = MLTREE_EVAL
+   end
+   local
+      open l16
+   in
+      signature gs_3 = AMD64INSTR
+      functor gs_4 = AMD64Instr
+   end
+   local
+      signature AMD64INSTR = gs_3
+      functor AMD64Instr = gs_4
+      structure CellsBasis = gs_1
+      signature MLTREE_EVAL = gs_2
+      signature PEEPHOLE = gs_0
+      ../amd64/instructions/amd64Peephole.sml
+   in
+      functor gs_5 = AMD64Peephole
+   end
+in
+   functor AMD64Peephole = gs_5
+end
+end
+
+end
diff --git a/mlb/AMD64.mlb b/mlb/AMD64.mlb
new file mode 100644
index 0000000..16fc405
--- /dev/null
+++ b/mlb/AMD64.mlb
@@ -0,0 +1,1009 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l37 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l138 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l48 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l162 =
+    bas
+      (* $Graphs.cm(=(proxyLib.cm):.)/Graphs.cm =??=> *) Graphs.mlb
+    end
+  basis l86 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+  basis l211 =
+    bas
+      (* $MLTREE.cm(=(proxyLib.cm):.)/MLTREE.cm =??=> *) MLTREE.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      functor gs_0 = Cells
+   end
+   local
+      open l37
+   in
+      structure gs_1 = Char
+      structure gs_2 = CharArray
+      structure gs_3 = CharVector
+      structure gs_4 = FixedInt
+      structure gs_5 = General
+      structure gs_6 = Int
+      structure gs_7 = Int32
+      structure gs_8 = Int64
+      structure gs_9 = IntInf
+      structure gs_10 = LargeInt
+      structure gs_11 = LargeReal
+      structure gs_12 = LargeWord
+      structure gs_13 = OS
+      structure gs_14 = Position
+      structure gs_15 = Real
+      structure gs_16 = Real64
+      structure gs_17 = RealArray
+      structure gs_18 = RealArraySlice
+      structure gs_19 = RealVector
+      structure gs_20 = RealVectorSlice
+      structure gs_21 = SMLofNJ
+      structure gs_22 = Socket
+      structure gs_23 = String
+      structure gs_24 = Substring
+      structure gs_25 = SysWord
+      structure gs_26 = Time
+      structure gs_27 = Word
+      structure gs_28 = Word32
+      structure gs_29 = Word64
+      structure gs_30 = Word8
+   end
+   local
+      open l4
+   in
+      structure gs_31 = CellsBasis
+   end
+   local
+      open l4
+   in
+      signature gs_32 = CELLS
+   end
+   local
+      open l48
+   in
+      signature gs_33 = MLRISC_ERROR_MSG
+      structure gs_34 = MLRiscErrorMsg
+   end
+   local
+      signature CELLS = gs_32
+      functor Cells = gs_0
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/instructions/amd64Cells.sml
+   in
+      signature gs_35 = AMD64CELLS
+      structure gs_36 = AMD64Cells
+   end
+   local
+      open l4
+   in
+      signature gs_37 = SDI_JUMPS
+   end
+   local
+      open l37
+   in
+      structure gs_38 = Word8Vector
+   end
+   local
+      open l4
+   in
+      signature gs_39 = MC_EMIT
+   end
+   local
+      open l4
+   in
+      signature gs_40 = MLTREE_EVAL
+   end
+   local
+      open l4
+   in
+      functor gs_41 = Shuffle
+   end
+   local
+      open l4
+   in
+      signature gs_42 = REGION
+   end
+   local
+      open l4
+   in
+      signature gs_43 = CONSTANT
+   end
+   local
+      open l4
+   in
+      signature gs_44 = MLTREE
+   end
+   local
+      open l4
+   in
+      signature gs_45 = CELLS_BASIS
+   end
+   local
+      open l86
+   in
+      structure gs_46 = Annotations
+   end
+   local
+      open l4
+   in
+      structure gs_47 = Label
+   end
+   local
+      signature AMD64CELLS = gs_35
+      structure AMD64Cells = gs_36
+      structure Annotations = gs_46
+      signature CELLS_BASIS = gs_45
+      signature CONSTANT = gs_43
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure Label = gs_47
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLTREE = gs_44
+      structure OS = gs_13
+      structure Position = gs_14
+      signature REGION = gs_42
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/instructions/amd64Instr.sml
+   in
+      signature gs_48 = AMD64INSTR
+      functor gs_49 = AMD64Instr
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      structure CellsBasis = gs_31
+      functor Shuffle = gs_41
+      ../amd64/instructions/amd64Shuffle.sml
+   in
+      signature gs_50 = AMD64SHUFFLE
+      functor gs_51 = AMD64Shuffle
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      signature AMD64SHUFFLE = gs_50
+      functor AMD64Shuffle = gs_51
+      signature MC_EMIT = gs_39
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE_EVAL = gs_40
+      signature SDI_JUMPS = gs_37
+      structure Word8Vector = gs_38
+      ../amd64/backpatch/amd64Jumps.sml
+   in
+      functor gs_52 = AMD64Jumps
+   end
+   local
+      open l4
+   in
+      signature gs_53 = ARCH_SPILL_INSTR
+   end
+   local
+      open l4
+   in
+      structure gs_54 = MLRiscAnnotations
+   end
+   local
+      open l37
+   in
+      structure gs_55 = List
+   end
+   local
+      open l4
+   in
+      signature gs_56 = MLTREE_HASH
+   end
+   local
+      open l4
+   in
+      signature gs_57 = INSN_PROPERTIES
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      signature INSN_PROPERTIES = gs_57
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure Label = gs_47
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure List = gs_55
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE_EVAL = gs_40
+      signature MLTREE_HASH = gs_56
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/instructions/amd64Props.sml
+   in
+      signature gs_58 = AMD64INSN_PROPERTIES
+      functor gs_59 = AMD64Props
+   end
+   local
+      signature AMD64INSN_PROPERTIES = gs_58
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      functor AMD64Props = gs_59
+      signature ARCH_SPILL_INSTR = gs_53
+      structure Annotations = gs_46
+      structure CellsBasis = gs_31
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscAnnotations = gs_54
+      structure MLRiscErrorMsg = gs_34
+      ../amd64/ra/amd64SpillInstr.sml
+   in
+      functor gs_60 = AMD64SpillInstr
+   end
+   local
+      open l4
+   in
+      signature gs_61 = PSEUDO_OPS_BASIS
+   end
+   local
+      open l4
+   in
+      functor gs_62 = DarwinPseudoOps
+   end
+   local
+      open l4
+   in
+      functor gs_63 = PseudoOpsLittle
+   end
+   local
+      open l138
+   in
+      structure gs_64 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_65 = PseudoOpsBasisTyp
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      functor DarwinPseudoOps = gs_62
+      structure FixedInt = gs_4
+      structure Format = gs_64
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE = gs_44
+      signature MLTREE_EVAL = gs_40
+      structure OS = gs_13
+      signature PSEUDO_OPS_BASIS = gs_61
+      structure Position = gs_14
+      structure PseudoOpsBasisTyp = gs_65
+      functor PseudoOpsLittle = gs_63
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/flowgraph/amd64-darwin-pseudo-ops.sml
+   in
+      functor gs_66 = AMD64DarwinPseudoOps
+   end
+   local
+      open l4
+   in
+      functor gs_67 = GasPseudoOps
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure Format = gs_64
+      functor GasPseudoOps = gs_67
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE = gs_44
+      signature MLTREE_EVAL = gs_40
+      structure OS = gs_13
+      signature PSEUDO_OPS_BASIS = gs_61
+      structure Position = gs_14
+      structure PseudoOpsBasisTyp = gs_65
+      functor PseudoOpsLittle = gs_63
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/flowgraph/amd64GasPseudoOps.sml
+   in
+      functor gs_68 = AMD64GasPseudoOps
+   end
+   local
+      open l4
+   in
+      signature gs_69 = OMIT_FRAME_POINTER
+   end
+   local
+      open l138
+   in
+      structure gs_70 = IntHashTable
+   end
+   local
+      open l162
+   in
+      structure gs_71 = Graph
+   end
+   local
+      open l48
+   in
+      signature gs_72 = MLRISC_CONTROL
+      structure gs_73 = MLRiscControl
+   end
+   local
+      open l37
+   in
+      structure gs_74 = Option
+   end
+   local
+      open l37
+   in
+      structure gs_75 = ListPair
+   end
+   local
+      open l4
+   in
+      signature gs_76 = CONTROL_FLOW_GRAPH
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      signature CONTROL_FLOW_GRAPH = gs_76
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Graph = gs_71
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntHashTable = gs_70
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure ListPair = gs_75
+      signature MLRISC_CONTROL = gs_72
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscAnnotations = gs_54
+      structure MLRiscControl = gs_73
+      structure MLRiscErrorMsg = gs_34
+      signature OMIT_FRAME_POINTER = gs_69
+      structure OS = gs_13
+      structure Option = gs_74
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/omit-frameptr/amd64omit-frameptr.sml
+   in
+      functor gs_77 = AMD64OmitFramePointer
+   end
+   local
+      open l4
+   in
+      signature gs_78 = MLTREE_STREAM
+   end
+   local
+      ../amd64/instructions/amd64InstrExt.sml
+   in
+      structure gs_79 = AMD64InstrExt
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      structure AMD64InstrExt = gs_79
+      signature CONTROL_FLOW_GRAPH = gs_76
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE_STREAM = gs_78
+      ../amd64/instructions/amd64CompInstrExt.sml
+   in
+      signature gs_80 = AMD64COMP_INSTR_EXT
+      functor gs_81 = AMD64CompInstrExt
+   end
+   local
+      open l4
+   in
+      functor gs_82 = MLTreeGen
+   end
+   local
+      open l4
+   in
+      functor gs_83 = MLTreeSize
+   end
+   local
+      open l86
+   in
+      signature gs_84 = PROBABILITY
+      structure gs_85 = Probability
+   end
+   local
+      open l4
+   in
+      signature gs_86 = MLTREECOMP
+      signature gs_87 = MLTREE_EXTENSION_COMP
+   end
+   local
+      open l211
+   in
+      signature gs_88 = MLTREE_UTILS
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/mltree/amd64-opcodes.sml
+   in
+      functor gs_89 = AMD64Opcodes
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      functor AMD64Opcodes = gs_89
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure Label = gs_47
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure List = gs_55
+      structure ListPair = gs_75
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscAnnotations = gs_54
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREECOMP = gs_86
+      signature MLTREE_EXTENSION_COMP = gs_87
+      signature MLTREE_UTILS = gs_88
+      functor MLTreeGen = gs_82
+      functor MLTreeSize = gs_83
+      structure OS = gs_13
+      signature PROBABILITY = gs_84
+      structure Position = gs_14
+      structure Probability = gs_85
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      functor Shuffle = gs_41
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/mltree/amd64-gen.sml
+   in
+      functor gs_90 = AMD64Gen
+   end
+   local
+      open l4
+   in
+      signature gs_91 = INSTRUCTION_EMITTER
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      signature AMD64SHUFFLE = gs_50
+      functor AMD64Shuffle = gs_51
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      signature INSTRUCTION_EMITTER = gs_91
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MC_EMIT = gs_39
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE_EVAL = gs_40
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      structure Word8Vector = gs_38
+      ../amd64/amd64MC.sml
+   in
+      functor gs_92 = AMD64MCEmitter
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      signature CELLS_BASIS = gs_45
+      structure CellsBasis = gs_31
+      structure List = gs_55
+      ../amd64/ra/amd64Rewrite.sml
+   in
+      functor gs_93 = AMD64Rewrite
+   end
+   local
+      open l4
+   in
+      signature gs_94 = C_CALLS
+   end
+   local
+      open l4
+   in
+      structure gs_95 = CTypes
+   end
+   local
+      open l211
+   in
+      functor gs_96 = MLTreeUtils
+   end
+   local
+      signature AMD64CELLS = gs_35
+      structure AMD64Cells = gs_36
+      structure CTypes = gs_95
+      signature C_CALLS = gs_94
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure List = gs_55
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscAnnotations = gs_54
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE = gs_44
+      functor MLTreeUtils = gs_96
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/c-calls/amd64-svid.sml
+   in
+      functor gs_97 = AMD64SVID_CCalls
+   end
+   local
+      open l37
+   in
+      structure gs_98 = TextIO
+   end
+   local
+      open l4
+   in
+      signature gs_99 = ASM_STREAM
+      structure gs_100 = AsmStream
+   end
+   local
+      open l4
+   in
+      signature gs_101 = ASM_FORMAT_UTIL
+      structure gs_102 = AsmFormatUtil
+   end
+   local
+      open l4
+   in
+      structure gs_103 = AsmFlags
+   end
+   local
+      open l4
+   in
+      signature gs_104 = INSTRUCTION_STREAM
+   end
+   local
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      signature AMD64SHUFFLE = gs_50
+      functor AMD64Shuffle = gs_51
+      signature ASM_FORMAT_UTIL = gs_101
+      signature ASM_STREAM = gs_99
+      structure Annotations = gs_46
+      structure AsmFlags = gs_103
+      structure AsmFormatUtil = gs_102
+      structure AsmStream = gs_100
+      structure CellsBasis = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      signature INSTRUCTION_EMITTER = gs_91
+      signature INSTRUCTION_STREAM = gs_104
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscErrorMsg = gs_34
+      signature MLTREE_EVAL = gs_40
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure TextIO = gs_98
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../amd64/emit/amd64Asm.sml
+   in
+      functor gs_105 = AMD64AsmEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_106 = CFG_OPTIMIZATION
+   end
+   local
+      open l4
+   in
+      functor gs_107 = GetReg
+   end
+   local
+      open l4
+   in
+      signature gs_108 = PRINT_FLOWGRAPH
+      functor gs_109 = PrintFlowgraph
+   end
+   local
+      open l4
+   in
+      functor gs_110 = RegisterAllocator
+   end
+   local
+      open l4
+   in
+      functor gs_111 = MemoryRA
+   end
+   local
+      open l4
+   in
+      functor gs_112 = RADeadCodeElim
+   end
+   local
+      open l4
+   in
+      functor gs_113 = ClusterRA
+   end
+   local
+      open l37
+   in
+      structure gs_114 = Vector
+   end
+   local
+      open l4
+   in
+      signature gs_115 = RA_SPILL
+   end
+   local
+      open l4
+   in
+      signature gs_116 = RA_SPILL_HEURISTICS
+   end
+   local
+      open l4
+   in
+      structure gs_117 = RAGraph
+   end
+   local
+      signature AMD64INSN_PROPERTIES = gs_58
+      signature AMD64INSTR = gs_48
+      functor AMD64Instr = gs_49
+      functor AMD64Props = gs_59
+      functor AMD64SpillInstr = gs_60
+      structure Annotations = gs_46
+      signature CFG_OPTIMIZATION = gs_106
+      signature CONTROL_FLOW_GRAPH = gs_76
+      structure CellsBasis = gs_31
+      functor ClusterRA = gs_113
+      functor GetReg = gs_107
+      structure Graph = gs_71
+      signature INSTRUCTION_EMITTER = gs_91
+      structure IntHashTable = gs_70
+      structure List = gs_55
+      signature MLRISC_CONTROL = gs_72
+      signature MLRISC_ERROR_MSG = gs_33
+      structure MLRiscControl = gs_73
+      structure MLRiscErrorMsg = gs_34
+      functor MemoryRA = gs_111
+      structure Option = gs_74
+      signature PRINT_FLOWGRAPH = gs_108
+      functor PrintFlowgraph = gs_109
+      functor RADeadCodeElim = gs_112
+      structure RAGraph = gs_117
+      signature RA_SPILL = gs_115
+      signature RA_SPILL_HEURISTICS = gs_116
+      functor RegisterAllocator = gs_110
+      structure Vector = gs_114
+      ../amd64/ra/amd64RegAlloc.sml
+   in
+      functor gs_118 = AMD64RegAlloc
+   end
+in
+   functor AMD64AsmEmitter = gs_105
+   signature AMD64CELLS = gs_35
+   structure AMD64Cells = gs_36
+   functor AMD64CompInstrExt = gs_81
+   functor AMD64DarwinPseudoOps = gs_66
+   functor AMD64GasPseudoOps = gs_68
+   functor AMD64Gen = gs_90
+   signature AMD64INSN_PROPERTIES = gs_58
+   signature AMD64INSTR = gs_48
+   functor AMD64Instr = gs_49
+   structure AMD64InstrExt = gs_79
+   functor AMD64Jumps = gs_52
+   functor AMD64MCEmitter = gs_92
+   functor AMD64OmitFramePointer = gs_77
+   functor AMD64Opcodes = gs_89
+   functor AMD64Props = gs_59
+   functor AMD64RegAlloc = gs_118
+   functor AMD64Rewrite = gs_93
+   signature AMD64SHUFFLE = gs_50
+   functor AMD64SVID_CCalls = gs_97
+   functor AMD64Shuffle = gs_51
+   functor AMD64SpillInstr = gs_60
+end
+end
+
+end
diff --git a/mlb/CCall-sparc.mlb b/mlb/CCall-sparc.mlb
new file mode 100644
index 0000000..099ef5f
--- /dev/null
+++ b/mlb/CCall-sparc.mlb
@@ -0,0 +1,178 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l37 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l69 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l48 =
+    bas
+      (* $StagedAlloc.cm(=(proxyLib.cm):.)/StagedAlloc.cm =??=> *) StagedAlloc.mlb
+    end
+  basis l4 =
+    bas
+      (* $CCall.cm(=(proxyLib.cm):.)/CCall.cm =??=> *) CCall.mlb
+    end
+  basis l59 =
+    bas
+      (* $SPARC.cm(=(proxyLib.cm):.)/SPARC.cm =??=> *) SPARC.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = CType
+   end
+   local
+      open l37
+   in
+      structure gs_1 = Char
+      structure gs_2 = CharArray
+      structure gs_3 = CharVector
+      structure gs_4 = FixedInt
+      structure gs_5 = General
+      structure gs_6 = Int
+      structure gs_7 = Int32
+      structure gs_8 = Int64
+      structure gs_9 = IntInf
+      structure gs_10 = LargeInt
+      structure gs_11 = LargeReal
+      structure gs_12 = LargeWord
+      structure gs_13 = OS
+      structure gs_14 = Position
+      structure gs_15 = Real
+      structure gs_16 = Real64
+      structure gs_17 = RealArray
+      structure gs_18 = RealArraySlice
+      structure gs_19 = RealVector
+      structure gs_20 = RealVectorSlice
+      structure gs_21 = SMLofNJ
+      structure gs_22 = Socket
+      structure gs_23 = String
+      structure gs_24 = Substring
+      structure gs_25 = SysWord
+      structure gs_26 = Time
+      structure gs_27 = Word
+      structure gs_28 = Word32
+      structure gs_29 = Word64
+      structure gs_30 = Word8
+   end
+   local
+      structure CType = gs_0
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../c-call/archs/sparc-c-sizes.sml
+   in
+      structure gs_31 = SparcCSizes
+   end
+   local
+      open l4
+   in
+      signature gs_32 = C_CALL
+   end
+   local
+      open l48
+   in
+      functor gs_33 = SparcCConventionFn
+   end
+   local
+      open l4
+   in
+      functor gs_34 = CCallGenFn
+   end
+   local
+      open l48
+   in
+      functor gs_35 = StagedAllocationFn
+   end
+   local
+      open l59
+   in
+      signature gs_36 = SPARCCELLS
+      structure gs_37 = SparcCells
+   end
+   local
+      open l37
+   in
+      structure gs_38 = List
+   end
+   local
+      open l48
+   in
+      structure gs_39 = CLocKind
+   end
+   local
+      open l69
+   in
+      signature gs_40 = MLTREE
+   end
+   local
+      open l59
+   in
+      structure gs_41 = SparcInstrExt
+   end
+   local
+      functor CCallGenFn = gs_34
+      structure CLocKind = gs_39
+      structure CType = gs_0
+      signature C_CALL = gs_32
+      structure List = gs_38
+      signature MLTREE = gs_40
+      signature SPARCCELLS = gs_36
+      functor SparcCConventionFn = gs_33
+      structure SparcCSizes = gs_31
+      structure SparcCells = gs_37
+      structure SparcInstrExt = gs_41
+      functor StagedAllocationFn = gs_35
+      ../c-call/archs/sparc-c-call-fn.sml
+   in
+      functor gs_42 = SparcCCallFn
+   end
+in
+   functor SparcCCallFn = gs_42
+   structure SparcCSizes = gs_31
+end
+end
+
+end
diff --git a/mlb/CCall-x86-64.mlb b/mlb/CCall-x86-64.mlb
new file mode 100644
index 0000000..a690c35
--- /dev/null
+++ b/mlb/CCall-x86-64.mlb
@@ -0,0 +1,202 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l56 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l15 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l4 =
+    bas
+      (* $StagedAlloc.cm(=(proxyLib.cm):.)/StagedAlloc.cm =??=> *) StagedAlloc.mlb
+    end
+  basis l8 =
+    bas
+      (* $CCall.cm(=(proxyLib.cm):.)/CCall.cm =??=> *) CCall.mlb
+    end
+  basis l20 =
+    bas
+      (* $AMD64.cm(=(proxyLib.cm):.)/AMD64.cm =??=> *) AMD64.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      functor gs_0 = X86_64CConventionFn
+   end
+   local
+      open l8
+   in
+      functor gs_1 = CCallGenFn
+   end
+   local
+      open l4
+   in
+      functor gs_2 = StagedAllocationFn
+   end
+   local
+      open l15
+   in
+      structure gs_3 = CellsBasis
+   end
+   local
+      open l20
+   in
+      signature gs_4 = AMD64CELLS
+      structure gs_5 = AMD64Cells
+   end
+   local
+      open l8
+   in
+      structure gs_6 = CType
+   end
+   local
+      open l56
+   in
+      structure gs_7 = Char
+      structure gs_8 = CharArray
+      structure gs_9 = CharVector
+      structure gs_10 = FixedInt
+      structure gs_11 = General
+      structure gs_12 = Int
+      structure gs_13 = Int32
+      structure gs_14 = Int64
+      structure gs_15 = IntInf
+      structure gs_16 = LargeInt
+      structure gs_17 = LargeReal
+      structure gs_18 = LargeWord
+      structure gs_19 = OS
+      structure gs_20 = Position
+      structure gs_21 = Real
+      structure gs_22 = Real64
+      structure gs_23 = RealArray
+      structure gs_24 = RealArraySlice
+      structure gs_25 = RealVector
+      structure gs_26 = RealVectorSlice
+      structure gs_27 = SMLofNJ
+      structure gs_28 = Socket
+      structure gs_29 = String
+      structure gs_30 = Substring
+      structure gs_31 = SysWord
+      structure gs_32 = Time
+      structure gs_33 = Word
+      structure gs_34 = Word32
+      structure gs_35 = Word64
+      structure gs_36 = Word8
+   end
+   local
+      open l56
+   in
+      structure gs_37 = List
+   end
+   local
+      open l4
+   in
+      structure gs_38 = CLocKind
+   end
+   local
+      open l15
+   in
+      signature gs_39 = MLTREE
+   end
+   local
+      structure CType = gs_6
+      structure Char = gs_7
+      structure CharArray = gs_8
+      structure CharVector = gs_9
+      structure FixedInt = gs_10
+      structure General = gs_11
+      structure Int = gs_12
+      structure Int32 = gs_13
+      structure Int64 = gs_14
+      structure IntInf = gs_15
+      structure LargeInt = gs_16
+      structure LargeReal = gs_17
+      structure LargeWord = gs_18
+      structure OS = gs_19
+      structure Position = gs_20
+      structure Real = gs_21
+      structure Real64 = gs_22
+      structure RealArray = gs_23
+      structure RealArraySlice = gs_24
+      structure RealVector = gs_25
+      structure RealVectorSlice = gs_26
+      structure SMLofNJ = gs_27
+      structure Socket = gs_28
+      structure String = gs_29
+      structure Substring = gs_30
+      structure SysWord = gs_31
+      structure Time = gs_32
+      structure Word = gs_33
+      structure Word32 = gs_34
+      structure Word64 = gs_35
+      structure Word8 = gs_36
+      ../c-call/archs/x86-64-c-sizes.sml
+   in
+      structure gs_40 = CSizes
+   end
+   local
+      signature AMD64CELLS = gs_4
+      structure AMD64Cells = gs_5
+      functor CCallGenFn = gs_1
+      structure CLocKind = gs_38
+      structure CSizes = gs_40
+      structure CType = gs_6
+      structure CellsBasis = gs_3
+      structure Char = gs_7
+      structure CharArray = gs_8
+      structure CharVector = gs_9
+      structure FixedInt = gs_10
+      structure General = gs_11
+      structure Int = gs_12
+      structure Int32 = gs_13
+      structure Int64 = gs_14
+      structure IntInf = gs_15
+      structure LargeInt = gs_16
+      structure LargeReal = gs_17
+      structure LargeWord = gs_18
+      structure List = gs_37
+      signature MLTREE = gs_39
+      structure OS = gs_19
+      structure Position = gs_20
+      structure Real = gs_21
+      structure Real64 = gs_22
+      structure RealArray = gs_23
+      structure RealArraySlice = gs_24
+      structure RealVector = gs_25
+      structure RealVectorSlice = gs_26
+      structure SMLofNJ = gs_27
+      structure Socket = gs_28
+      functor StagedAllocationFn = gs_2
+      structure String = gs_29
+      structure Substring = gs_30
+      structure SysWord = gs_31
+      structure Time = gs_32
+      structure Word = gs_33
+      structure Word32 = gs_34
+      structure Word64 = gs_35
+      structure Word8 = gs_36
+      functor X86_64CConventionFn = gs_0
+      ../c-call/archs/x86-64-svid-fn.sml
+   in
+      functor gs_41 = X86_64SVIDFn
+   end
+in
+   structure CSizes = gs_40
+   functor X86_64SVIDFn = gs_41
+end
+end
+
+end
diff --git a/mlb/CCall-x86.mlb b/mlb/CCall-x86.mlb
new file mode 100644
index 0000000..44ef877
--- /dev/null
+++ b/mlb/CCall-x86.mlb
@@ -0,0 +1,220 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l37 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l58 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l48 =
+    bas
+      (* $StagedAlloc.cm(=(proxyLib.cm):.)/StagedAlloc.cm =??=> *) StagedAlloc.mlb
+    end
+  basis l4 =
+    bas
+      (* $CCall.cm(=(proxyLib.cm):.)/CCall.cm =??=> *) CCall.mlb
+    end
+  basis l63 =
+    bas
+      (* $IA32.cm(=(proxyLib.cm):.)/IA32.cm =??=> *) IA32.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = CType
+   end
+   local
+      open l37
+   in
+      structure gs_1 = Char
+      structure gs_2 = CharArray
+      structure gs_3 = CharVector
+      structure gs_4 = FixedInt
+      structure gs_5 = General
+      structure gs_6 = Int
+      structure gs_7 = Int32
+      structure gs_8 = Int64
+      structure gs_9 = IntInf
+      structure gs_10 = LargeInt
+      structure gs_11 = LargeReal
+      structure gs_12 = LargeWord
+      structure gs_13 = OS
+      structure gs_14 = Position
+      structure gs_15 = Real
+      structure gs_16 = Real64
+      structure gs_17 = RealArray
+      structure gs_18 = RealArraySlice
+      structure gs_19 = RealVector
+      structure gs_20 = RealVectorSlice
+      structure gs_21 = SMLofNJ
+      structure gs_22 = Socket
+      structure gs_23 = String
+      structure gs_24 = Substring
+      structure gs_25 = SysWord
+      structure gs_26 = Time
+      structure gs_27 = Word
+      structure gs_28 = Word32
+      structure gs_29 = Word64
+      structure gs_30 = Word8
+   end
+   local
+      structure CType = gs_0
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../c-call/archs/x86-c-sizes.sml
+   in
+      structure gs_31 = X86CSizes
+   end
+   local
+      open l4
+   in
+      signature gs_32 = C_CALL
+   end
+   local
+      open l48
+   in
+      functor gs_33 = X86CConventionFn
+   end
+   local
+      open l4
+   in
+      functor gs_34 = CCallGenFn
+   end
+   local
+      open l48
+   in
+      functor gs_35 = StagedAllocationFn
+   end
+   local
+      open l58
+   in
+      structure gs_36 = CellsBasis
+   end
+   local
+      open l63
+   in
+      signature gs_37 = X86CELLS
+      structure gs_38 = X86Cells
+   end
+   local
+      open l58
+   in
+      structure gs_39 = MLRiscAnnotations
+   end
+   local
+      open l37
+   in
+      structure gs_40 = List
+   end
+   local
+      open l48
+   in
+      structure gs_41 = CLocKind
+   end
+   local
+      open l58
+   in
+      signature gs_42 = MLTREE
+   end
+   local
+      open l63
+   in
+      structure gs_43 = X86InstrExt
+   end
+   local
+      functor CCallGenFn = gs_34
+      structure CLocKind = gs_41
+      structure CType = gs_0
+      signature C_CALL = gs_32
+      structure CellsBasis = gs_36
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure List = gs_40
+      structure MLRiscAnnotations = gs_39
+      signature MLTREE = gs_42
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      functor StagedAllocationFn = gs_35
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      functor X86CConventionFn = gs_33
+      signature X86CELLS = gs_37
+      structure X86CSizes = gs_31
+      structure X86Cells = gs_38
+      structure X86InstrExt = gs_43
+      ../c-call/archs/x86-svid-fn.sml
+   in
+      functor gs_44 = X86SVIDFn
+   end
+in
+   structure X86CSizes = gs_31
+   functor X86SVIDFn = gs_44
+end
+end
+
+end
diff --git a/mlb/CCall.mlb b/mlb/CCall.mlb
new file mode 100644
index 0000000..ae5c774
--- /dev/null
+++ b/mlb/CCall.mlb
@@ -0,0 +1,98 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l18 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l14 =
+    bas
+      (* $StagedAlloc.cm(=(proxyLib.cm):.)/StagedAlloc.cm =??=> *) StagedAlloc.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = List
+   end
+   local
+      structure List = gs_0
+      ../c-call/gen/c-type.sml
+   in
+      structure gs_1 = CType
+   end
+   local
+      open l4
+   in
+      structure gs_2 = ListPair
+   end
+   local
+      open l14
+   in
+      signature gs_3 = STAGED_ALLOCATION
+   end
+   local
+      open l18
+   in
+      signature gs_4 = CELLS
+   end
+   local
+      open l18
+   in
+      signature gs_5 = MLTREE
+   end
+   local
+      open l14
+   in
+      structure gs_6 = CLocKind
+   end
+   local
+      structure CLocKind = gs_6
+      signature MLTREE = gs_5
+      signature STAGED_ALLOCATION = gs_3
+      ../c-call/gen/c-call-gen-sig.sml
+   in
+      signature gs_7 = C_CALL_GEN
+   end
+   local
+      signature CELLS = gs_4
+      structure CLocKind = gs_6
+      signature C_CALL_GEN = gs_7
+      structure List = gs_0
+      structure ListPair = gs_2
+      signature MLTREE = gs_5
+      signature STAGED_ALLOCATION = gs_3
+      ../c-call/gen/c-call-gen-fn.sml
+   in
+      functor gs_8 = CCallGenFn
+   end
+   local
+      structure CType = gs_1
+      signature C_CALL_GEN = gs_7
+      signature MLTREE = gs_5
+      ../c-call/gen/c-call-sig.sml
+   in
+      signature gs_9 = C_CALL
+   end
+in
+   functor CCallGenFn = gs_8
+   structure CType = gs_1
+   signature C_CALL = gs_9
+   signature C_CALL_GEN = gs_7
+end
+end
+
+end
diff --git a/mlb/Control.mlb b/mlb/Control.mlb
new file mode 100644
index 0000000..c0c1c72
--- /dev/null
+++ b/mlb/Control.mlb
@@ -0,0 +1,193 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l4 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l51 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l44 =
+    bas
+      (* $/controls-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Controls/controls-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = Timer
+   end
+   local
+      open l4
+   in
+      structure gs_1 = Char
+      structure gs_2 = CharArray
+      structure gs_3 = CharVector
+      structure gs_4 = FixedInt
+      structure gs_5 = General
+      structure gs_6 = Int
+      structure gs_7 = Int32
+      structure gs_8 = Int64
+      structure gs_9 = IntInf
+      structure gs_10 = LargeInt
+      structure gs_11 = LargeReal
+      structure gs_12 = LargeWord
+      structure gs_13 = OS
+      structure gs_14 = Position
+      structure gs_15 = Real
+      structure gs_16 = Real64
+      structure gs_17 = RealArray
+      structure gs_18 = RealArraySlice
+      structure gs_19 = RealVector
+      structure gs_20 = RealVectorSlice
+      structure gs_21 = SMLofNJ
+      structure gs_22 = Socket
+      structure gs_23 = String
+      structure gs_24 = Substring
+      structure gs_25 = SysWord
+      structure gs_26 = Time
+      structure gs_27 = Word
+      structure gs_28 = Word32
+      structure gs_29 = Word64
+      structure gs_30 = Word8
+   end
+   local
+      open l4
+   in
+      structure gs_31 = TextIO
+   end
+   local
+      open l44
+   in
+      structure gs_32 = ControlRegistry
+   end
+   local
+      open l44
+   in
+      structure gs_33 = ControlSet
+   end
+   local
+      open l51
+   in
+      structure gs_34 = Atom
+   end
+   local
+      open l44
+   in
+      structure gs_35 = ControlUtil
+   end
+   local
+      open l44
+   in
+      structure gs_36 = Controls
+   end
+   local
+      structure Atom = gs_34
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure ControlRegistry = gs_32
+      structure ControlSet = gs_33
+      structure ControlUtil = gs_35
+      structure Controls = gs_36
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure TextIO = gs_31
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../control/mlrisc-control.sml
+   in
+      signature gs_37 = MLRISC_CONTROL
+      structure gs_38 = MLRiscControl
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_CONTROL = gs_37
+      structure MLRiscControl = gs_38
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Timer = gs_0
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../control/mlrisc-timing.sml
+   in
+      signature gs_39 = MLRISC_TIMING
+      structure gs_40 = MLRiscTiming
+   end
+   local
+      structure TextIO = gs_31
+      ../control/mlriscErrormsg.sml
+   in
+      signature gs_41 = MLRISC_ERROR_MSG
+      structure gs_42 = MLRiscErrorMsg
+   end
+in
+   signature MLRISC_CONTROL = gs_37
+   signature MLRISC_ERROR_MSG = gs_41
+   signature MLRISC_TIMING = gs_39
+   structure MLRiscControl = gs_38
+   structure MLRiscErrorMsg = gs_42
+   structure MLRiscTiming = gs_40
+end
+end
+
+end
diff --git a/mlb/Graphs.mlb b/mlb/Graphs.mlb
new file mode 100644
index 0000000..1f04fe0
--- /dev/null
+++ b/mlb/Graphs.mlb
@@ -0,0 +1,995 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l8 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l4 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l90 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = IntHashTable
+   end
+   local
+      open l8
+   in
+      structure gs_1 = List
+   end
+   local
+      ../graphs/graph.sig
+   in
+      signature gs_2 = GRAPH
+   end
+   local
+      signature GRAPH = gs_2
+      structure List = gs_1
+      ../graphs/graph.sml
+   in
+      structure gs_3 = Graph
+   end
+   local
+      structure Graph = gs_3
+      structure IntHashTable = gs_0
+      structure List = gs_1
+      ../graphs/subgraph.sml
+   in
+      signature gs_4 = SUBGRAPH_VIEW
+      structure gs_5 = SubgraphView
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/readonly.sml
+   in
+      signature gs_6 = READONLY_GRAPH_VIEW
+      structure gs_7 = ReadOnlyGraphView
+   end
+   local
+      open l4
+   in
+      structure gs_8 = HashTable
+   end
+   local
+      open l4
+   in
+      structure gs_9 = URef
+   end
+   local
+      open l8
+   in
+      structure gs_10 = Char
+      structure gs_11 = CharArray
+      structure gs_12 = CharVector
+      structure gs_13 = FixedInt
+      structure gs_14 = General
+      structure gs_15 = Int
+      structure gs_16 = Int32
+      structure gs_17 = Int64
+      structure gs_18 = IntInf
+      structure gs_19 = LargeInt
+      structure gs_20 = LargeReal
+      structure gs_21 = LargeWord
+      structure gs_22 = OS
+      structure gs_23 = Position
+      structure gs_24 = Real
+      structure gs_25 = Real64
+      structure gs_26 = RealArray
+      structure gs_27 = RealArraySlice
+      structure gs_28 = RealVector
+      structure gs_29 = RealVectorSlice
+      structure gs_30 = SMLofNJ
+      structure gs_31 = Socket
+      structure gs_32 = String
+      structure gs_33 = Substring
+      structure gs_34 = SysWord
+      structure gs_35 = Time
+      structure gs_36 = Word
+      structure gs_37 = Word32
+      structure gs_38 = Word64
+      structure gs_39 = Word8
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure HashTable = gs_8
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure URef = gs_9
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/node-partition.sml
+   in
+      signature gs_40 = NODE_PARTITION
+      structure gs_41 = NodePartition
+   end
+   local
+      open l8
+   in
+      structure gs_42 = Array
+   end
+   local
+      open l8
+   in
+      structure gs_43 = Word8Array
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graph-topsort.sig
+   in
+      signature gs_44 = GRAPH_TOPOLOGICAL_SORT
+   end
+   local
+      signature GRAPH_TOPOLOGICAL_SORT = gs_44
+      structure Graph = gs_3
+      structure Word8Array = gs_43
+      ../graphs/graph-topsort.sml
+   in
+      structure gs_45 = GraphTopsort
+   end
+   local
+      structure Array = gs_42
+      structure Graph = gs_3
+      structure GraphTopsort = gs_45
+      ../graphs/trans-closure.sml
+   in
+      signature gs_46 = TRANSITIVE_CLOSURE
+      structure gs_47 = TransitiveClosure
+   end
+   local
+      open l90
+   in
+      structure gs_48 = HashArray
+   end
+   local
+      structure Graph = gs_3
+      structure List = gs_1
+      ../graphs/subgraph-p.sml
+   in
+      signature gs_49 = SUBGRAPH_P_VIEW
+      structure gs_50 = Subgraph_P_View
+   end
+   local
+      structure Graph = gs_3
+      structure HashArray = gs_48
+      signature SUBGRAPH_P_VIEW = gs_49
+      structure Subgraph_P_View = gs_50
+      ../graphs/acyclic-graph.sml
+   in
+      signature gs_51 = ACYCLIC_SUBGRAPH_VIEW
+      structure gs_52 = AcyclicSubgraphView
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/singleton.sml
+   in
+      signature gs_53 = SINGLETON_GRAPH_VIEW
+      structure gs_54 = SingletonGraphView
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/spanning-tree.sig
+   in
+      signature gs_55 = MIN_COST_SPANNING_TREE
+   end
+   local
+      structure Graph = gs_3
+      structure List = gs_1
+      ../graphs/isograph.sml
+   in
+      signature gs_56 = ISOMORPHIC_GRAPH_VIEW
+      structure gs_57 = IsomorphicGraphView
+   end
+   local
+      open l8
+   in
+      signature gs_58 = ARRAY
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/node-priqueue.sig
+   in
+      signature gs_59 = NODE_PRIORITY_QUEUE
+   end
+   local
+      signature ARRAY = gs_58
+      structure Graph = gs_3
+      signature NODE_PRIORITY_QUEUE = gs_59
+      ../graphs/node-priqueue.sml
+   in
+      functor gs_60 = NodePriorityQueue
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/update-graph-info.sml
+   in
+      signature gs_61 = UPDATE_GRAPH_INFO
+      structure gs_62 = UpdateGraphInfo
+   end
+   local
+      signature GRAPH = gs_2
+      ../graphs/bigraph.sig
+   in
+      signature gs_63 = BIPARTITE_GRAPH
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graph-cycles.sig
+   in
+      signature gs_64 = GRAPH_SIMPLE_CYCLES
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_1
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/seme.sml
+   in
+      signature gs_65 = SINGLE_ENTRY_MULTIPLE_EXIT_VIEW
+      structure gs_66 = SingleEntryMultipleExit
+   end
+   local
+      ../graphs/group.sig
+   in
+      signature gs_67 = ABELIAN_GROUP
+      signature gs_68 = ABELIAN_GROUP_WITH_INF
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      structure Graph = gs_3
+      ../graphs/max-flow.sig
+   in
+      signature gs_69 = MAX_FLOW
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      structure Array = gs_42
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_1
+      signature MAX_FLOW = gs_69
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/max-flow.sml
+   in
+      functor gs_70 = MaxFlow
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graphimpl.sig
+   in
+      signature gs_71 = GRAPH_IMPLEMENTATION
+   end
+   local
+      signature GRAPH_IMPLEMENTATION = gs_71
+      structure Graph = gs_3
+      ../graphs/snap-shot.sml
+   in
+      signature gs_72 = GRAPH_SNAPSHOT
+      functor gs_73 = GraphSnapShot
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/matching.sig
+   in
+      signature gs_74 = BIPARTITE_MATCHING
+   end
+   local
+      structure Array = gs_42
+      signature BIPARTITE_MATCHING = gs_74
+      structure Graph = gs_3
+      structure List = gs_1
+      ../graphs/matching.sml
+   in
+      structure gs_75 = BipartiteMatching
+   end
+   local
+      open l8
+   in
+      structure gs_76 = Array2
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      structure Array = gs_42
+      structure Array2 = gs_76
+      structure Graph = gs_3
+      ../graphs/shortest-paths.sig
+   in
+      signature gs_77 = ALL_PAIRS_SHORTEST_PATHS
+      signature gs_78 = SINGLE_SOURCE_SHORTEST_PATHS
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/renamegraph.sml
+   in
+      signature gs_79 = RENAMED_GRAPH_VIEW
+      structure gs_80 = RenamedGraphView
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graph-comb.sig
+   in
+      signature gs_81 = GRAPH_COMBINATIONS
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      signature ALL_PAIRS_SHORTEST_PATHS = gs_77
+      structure Array = gs_42
+      structure Graph = gs_3
+      functor NodePriorityQueue = gs_60
+      signature SINGLE_SOURCE_SHORTEST_PATHS = gs_78
+      ../graphs/dijkstra.sml
+   in
+      functor gs_82 = Dijkstra
+   end
+   local
+      signature ARRAY = gs_58
+      signature GRAPH_IMPLEMENTATION = gs_71
+      structure Graph = gs_3
+      structure List = gs_1
+      ../graphs/udgraph.sml
+   in
+      functor gs_83 = UndirectedGraph
+   end
+   local
+      open l4
+   in
+      structure gs_84 = ListMergeSort
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure ListMergeSort = gs_84
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/uniongraph.sml
+   in
+      signature gs_85 = UNION_GRAPH_VIEW
+      structure gs_86 = UnionGraphView
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_1
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/start-stop.sml
+   in
+      signature gs_87 = START_STOP_VIEW
+      structure gs_88 = StartStopView
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      structure Graph = gs_3
+      ../graphs/min-cut.sig
+   in
+      signature gs_89 = MIN_CUT
+   end
+   local
+      open l90
+   in
+      signature gs_90 = CATNETABLE_LIST
+      structure gs_91 = CatnetableList
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      structure Array = gs_42
+      signature CATNETABLE_LIST = gs_90
+      structure CatnetableList = gs_91
+      structure Graph = gs_3
+      signature MIN_CUT = gs_89
+      functor NodePriorityQueue = gs_60
+      ../graphs/min-cut.sml
+   in
+      functor gs_92 = MinCut
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/revgraph.sml
+   in
+      signature gs_93 = REVERSED_GRAPH_VIEW
+      structure gs_94 = ReversedGraphView
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/no-exit.sml
+   in
+      signature gs_95 = NO_ENTRY_VIEW
+      signature gs_96 = NO_EXIT_VIEW
+      structure gs_97 = NoEntryView
+      structure gs_98 = NoExitView
+   end
+   local
+      structure Graph = gs_3
+      structure HashArray = gs_48
+      signature SUBGRAPH_P_VIEW = gs_49
+      structure Subgraph_P_View = gs_50
+      ../graphs/trace-graph.sml
+   in
+      signature gs_99 = TRACE_SUBGRAPH_VIEW
+      structure gs_100 = TraceView
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_1
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/printgraph.sml
+   in
+      signature gs_101 = PRINT_GRAPH
+      structure gs_102 = PrintGraph
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/wrappers.sml
+   in
+      signature gs_103 = GRAPH_WRAPPERS
+      structure gs_104 = GraphWrappers
+   end
+   local
+      signature GRAPH_COMBINATIONS = gs_81
+      structure Graph = gs_3
+      signature RENAMED_GRAPH_VIEW = gs_79
+      signature REVERSED_GRAPH_VIEW = gs_93
+      structure RenamedGraphView = gs_80
+      structure ReversedGraphView = gs_94
+      signature UNION_GRAPH_VIEW = gs_85
+      structure UnionGraphView = gs_86
+      ../graphs/graph-comb.sml
+   in
+      structure gs_105 = GraphCombinations
+   end
+   local
+      structure Array = gs_42
+      structure Graph = gs_3
+      ../graphs/graph-bfs.sig
+   in
+      signature gs_106 = GRAPH_BREATH_FIRST_SEARCH
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure ListMergeSort = gs_84
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/ugraph.sml
+   in
+      signature gs_107 = UNDIRECTED_GRAPH_VIEW
+      structure gs_108 = UndirectedGraphView
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graph-scc.sig
+   in
+      signature gs_109 = GRAPH_STRONGLY_CONNECTED_COMPONENTS
+   end
+   local
+      structure Array = gs_42
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      signature GRAPH_STRONGLY_CONNECTED_COMPONENTS = gs_109
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      structure Word8Array = gs_43
+      ../graphs/graph-scc.sml
+   in
+      structure gs_110 = GraphSCC
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graph-bcc.sig
+   in
+      signature gs_111 = GRAPH_BICONNECTED_COMPONENTS
+   end
+   local
+      structure Array = gs_42
+      signature GRAPH_BICONNECTED_COMPONENTS = gs_111
+      structure Graph = gs_3
+      ../graphs/graph-bcc.sml
+   in
+      structure gs_112 = GraphBCC
+   end
+   local
+      open l90
+   in
+      structure gs_113 = BitSet
+   end
+   local
+      structure Array = gs_42
+      structure BitSet = gs_113
+      signature GRAPH_BREATH_FIRST_SEARCH = gs_106
+      structure Graph = gs_3
+      ../graphs/graph-bfs.sml
+   in
+      structure gs_114 = GraphBFS
+   end
+   local
+      structure Graph = gs_3
+      ../graphs/graph-is-cyclic.sig
+   in
+      signature gs_115 = GRAPH_IS_CYCLIC
+   end
+   local
+      structure BitSet = gs_113
+      signature GRAPH_IS_CYCLIC = gs_115
+      structure Graph = gs_3
+      ../graphs/graph-is-cyclic.sml
+   in
+      structure gs_116 = GraphIsCyclic
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      signature ALL_PAIRS_SHORTEST_PATHS = gs_77
+      structure Array = gs_42
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_3
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      signature SINGLE_SOURCE_SHORTEST_PATHS = gs_78
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../graphs/bellman-ford.sml
+   in
+      functor gs_117 = BellmanFord
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      signature ALL_PAIRS_SHORTEST_PATHS = gs_77
+      structure Array2 = gs_76
+      structure Graph = gs_3
+      signature SINGLE_SOURCE_SHORTEST_PATHS = gs_78
+      ../graphs/floyd-warshall.sml
+   in
+      functor gs_118 = FloydWarshall
+   end
+   local
+      structure Array = gs_42
+      signature GRAPH_SIMPLE_CYCLES = gs_64
+      structure Graph = gs_3
+      structure GraphSCC = gs_110
+      ../graphs/graph-cycles.sml
+   in
+      structure gs_119 = GraphCycles
+   end
+   local
+      structure Array = gs_42
+      structure Graph = gs_3
+      ../graphs/graph-dfs.sig
+   in
+      signature gs_120 = GRAPH_DEPTH_FIRST_SEARCH
+   end
+   local
+      structure Array = gs_42
+      structure BitSet = gs_113
+      signature GRAPH_DEPTH_FIRST_SEARCH = gs_120
+      structure Graph = gs_3
+      ../graphs/graph-dfs.sml
+   in
+      structure gs_121 = GraphDFS
+   end
+   local
+      open l90
+   in
+      structure gs_122 = DynArray
+   end
+   local
+      open l90
+   in
+      signature gs_123 = ARRAY_NONEQ
+   end
+   local
+      signature ARRAY_NONEQ = gs_123
+      structure DynArray = gs_122
+      signature GRAPH_IMPLEMENTATION = gs_71
+      structure Graph = gs_3
+      structure List = gs_1
+      ../graphs/digraph.sml
+   in
+      functor gs_124 = DirectedGraph
+      structure gs_125 = DirectedGraph
+   end
+   local
+      signature ABELIAN_GROUP = gs_67
+      signature ABELIAN_GROUP_WITH_INF = gs_68
+      signature ALL_PAIRS_SHORTEST_PATHS = gs_77
+      structure Array = gs_42
+      structure Array2 = gs_76
+      functor BellmanFord = gs_117
+      functor Dijkstra = gs_82
+      functor DirectedGraph = gs_124
+      structure DirectedGraph = gs_125
+      structure Graph = gs_3
+      structure HashArray = gs_48
+      signature SINGLE_SOURCE_SHORTEST_PATHS = gs_78
+      signature UNION_GRAPH_VIEW = gs_85
+      structure UnionGraphView = gs_86
+      ../graphs/johnson.sml
+   in
+      functor gs_126 = Johnson
+   end
+   local
+      ../graphs/closed-semi-ring.sig
+   in
+      signature gs_127 = CLOSED_SEMI_RING
+   end
+   local
+      structure Graph = gs_3
+      structure HashArray = gs_48
+      structure List = gs_1
+      structure URef = gs_9
+      ../graphs/graph-minor.sml
+   in
+      signature gs_128 = GRAPH_MINOR_VIEW
+      structure gs_129 = GraphMinorView
+   end
+   local
+      open l90
+   in
+      structure gs_130 = PriorityQueue
+   end
+   local
+      structure Graph = gs_3
+      signature MIN_COST_SPANNING_TREE = gs_55
+      signature NODE_PARTITION = gs_40
+      structure NodePartition = gs_41
+      structure PriorityQueue = gs_130
+      ../graphs/kruskal.sml
+   in
+      structure gs_131 = Kruskal
+   end
+in
+   signature ABELIAN_GROUP = gs_67
+   signature ABELIAN_GROUP_WITH_INF = gs_68
+   signature ACYCLIC_SUBGRAPH_VIEW = gs_51
+   signature ALL_PAIRS_SHORTEST_PATHS = gs_77
+   structure AcyclicSubgraphView = gs_52
+   signature BIPARTITE_GRAPH = gs_63
+   signature BIPARTITE_MATCHING = gs_74
+   functor BellmanFord = gs_117
+   structure BipartiteMatching = gs_75
+   signature CLOSED_SEMI_RING = gs_127
+   functor Dijkstra = gs_82
+   functor DirectedGraph = gs_124
+   structure DirectedGraph = gs_125
+   functor FloydWarshall = gs_118
+   signature GRAPH = gs_2
+   signature GRAPH_BICONNECTED_COMPONENTS = gs_111
+   signature GRAPH_BREATH_FIRST_SEARCH = gs_106
+   signature GRAPH_COMBINATIONS = gs_81
+   signature GRAPH_DEPTH_FIRST_SEARCH = gs_120
+   signature GRAPH_IMPLEMENTATION = gs_71
+   signature GRAPH_IS_CYCLIC = gs_115
+   signature GRAPH_MINOR_VIEW = gs_128
+   signature GRAPH_SIMPLE_CYCLES = gs_64
+   signature GRAPH_SNAPSHOT = gs_72
+   signature GRAPH_STRONGLY_CONNECTED_COMPONENTS = gs_109
+   signature GRAPH_TOPOLOGICAL_SORT = gs_44
+   signature GRAPH_WRAPPERS = gs_103
+   structure Graph = gs_3
+   structure GraphBCC = gs_112
+   structure GraphBFS = gs_114
+   structure GraphCombinations = gs_105
+   structure GraphCycles = gs_119
+   structure GraphDFS = gs_121
+   structure GraphIsCyclic = gs_116
+   structure GraphMinorView = gs_129
+   structure GraphSCC = gs_110
+   functor GraphSnapShot = gs_73
+   structure GraphTopsort = gs_45
+   structure GraphWrappers = gs_104
+   signature ISOMORPHIC_GRAPH_VIEW = gs_56
+   structure IsomorphicGraphView = gs_57
+   functor Johnson = gs_126
+   structure Kruskal = gs_131
+   signature MAX_FLOW = gs_69
+   signature MIN_COST_SPANNING_TREE = gs_55
+   signature MIN_CUT = gs_89
+   functor MaxFlow = gs_70
+   functor MinCut = gs_92
+   signature NODE_PARTITION = gs_40
+   signature NODE_PRIORITY_QUEUE = gs_59
+   signature NO_ENTRY_VIEW = gs_95
+   signature NO_EXIT_VIEW = gs_96
+   structure NoEntryView = gs_97
+   structure NoExitView = gs_98
+   structure NodePartition = gs_41
+   functor NodePriorityQueue = gs_60
+   signature PRINT_GRAPH = gs_101
+   structure PrintGraph = gs_102
+   signature READONLY_GRAPH_VIEW = gs_6
+   signature RENAMED_GRAPH_VIEW = gs_79
+   signature REVERSED_GRAPH_VIEW = gs_93
+   structure ReadOnlyGraphView = gs_7
+   structure RenamedGraphView = gs_80
+   structure ReversedGraphView = gs_94
+   signature SINGLETON_GRAPH_VIEW = gs_53
+   signature SINGLE_ENTRY_MULTIPLE_EXIT_VIEW = gs_65
+   signature SINGLE_SOURCE_SHORTEST_PATHS = gs_78
+   signature START_STOP_VIEW = gs_87
+   signature SUBGRAPH_P_VIEW = gs_49
+   signature SUBGRAPH_VIEW = gs_4
+   structure SingleEntryMultipleExit = gs_66
+   structure SingletonGraphView = gs_54
+   structure StartStopView = gs_88
+   structure SubgraphView = gs_5
+   structure Subgraph_P_View = gs_50
+   signature TRACE_SUBGRAPH_VIEW = gs_99
+   signature TRANSITIVE_CLOSURE = gs_46
+   structure TraceView = gs_100
+   structure TransitiveClosure = gs_47
+   signature UNDIRECTED_GRAPH_VIEW = gs_107
+   signature UNION_GRAPH_VIEW = gs_85
+   signature UPDATE_GRAPH_INFO = gs_61
+   functor UndirectedGraph = gs_83
+   structure UndirectedGraphView = gs_108
+   structure UnionGraphView = gs_86
+   structure UpdateGraphInfo = gs_62
+end
+end
+
+end
diff --git a/mlb/HPPA.mlb b/mlb/HPPA.mlb
new file mode 100644
index 0000000..0b1472a
--- /dev/null
+++ b/mlb/HPPA.mlb
@@ -0,0 +1,698 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l11 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l109 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l16 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l77 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = INSTRUCTION_EMITTER
+   end
+   local
+      open l4
+   in
+      structure gs_1 = Label
+   end
+   local
+      open l11
+   in
+      structure gs_2 = Option
+   end
+   local
+      open l16
+   in
+      signature gs_3 = MLRISC_ERROR_MSG
+      structure gs_4 = MLRiscErrorMsg
+   end
+   local
+      open l4
+   in
+      structure gs_5 = CellsBasis
+   end
+   local
+      open l11
+   in
+      structure gs_6 = Char
+      structure gs_7 = CharArray
+      structure gs_8 = CharVector
+      structure gs_9 = FixedInt
+      structure gs_10 = General
+      structure gs_11 = Int
+      structure gs_12 = Int32
+      structure gs_13 = Int64
+      structure gs_14 = IntInf
+      structure gs_15 = LargeInt
+      structure gs_16 = LargeReal
+      structure gs_17 = LargeWord
+      structure gs_18 = OS
+      structure gs_19 = Position
+      structure gs_20 = Real
+      structure gs_21 = Real64
+      structure gs_22 = RealArray
+      structure gs_23 = RealArraySlice
+      structure gs_24 = RealVector
+      structure gs_25 = RealVectorSlice
+      structure gs_26 = SMLofNJ
+      structure gs_27 = Socket
+      structure gs_28 = String
+      structure gs_29 = Substring
+      structure gs_30 = SysWord
+      structure gs_31 = Time
+      structure gs_32 = Word
+      structure gs_33 = Word32
+      structure gs_34 = Word64
+      structure gs_35 = Word8
+   end
+   local
+      open l4
+   in
+      signature gs_36 = CODE_STRING
+   end
+   local
+      open l4
+   in
+      signature gs_37 = INSTRUCTION_STREAM
+   end
+   local
+      open l4
+   in
+      signature gs_38 = MLTREE_EVAL
+   end
+   local
+      open l4
+   in
+      signature gs_39 = REGION
+   end
+   local
+      open l4
+   in
+      signature gs_40 = CONSTANT
+   end
+   local
+      open l4
+   in
+      signature gs_41 = MLTREE
+   end
+   local
+      open l4
+   in
+      signature gs_42 = CELLS_BASIS
+   end
+   local
+      open l77
+   in
+      structure gs_43 = Annotations
+   end
+   local
+      open l4
+   in
+      functor gs_44 = Cells
+   end
+   local
+      open l4
+   in
+      signature gs_45 = CELLS
+   end
+   local
+      signature CELLS = gs_45
+      functor Cells = gs_44
+      structure CellsBasis = gs_5
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/instructions/hppaCells.sml
+   in
+      signature gs_46 = HPPACELLS
+      structure gs_47 = HppaCells
+   end
+   local
+      structure Annotations = gs_43
+      signature CELLS_BASIS = gs_42
+      signature CONSTANT = gs_40
+      structure CellsBasis = gs_5
+      signature HPPACELLS = gs_46
+      structure HppaCells = gs_47
+      structure Label = gs_1
+      signature MLTREE = gs_41
+      signature REGION = gs_39
+      ../hppa/instructions/hppaInstr.sml
+   in
+      signature gs_48 = HPPAINSTR
+      functor gs_49 = HppaInstr
+   end
+   local
+      signature CODE_STRING = gs_36
+      structure CellsBasis = gs_5
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      signature INSTRUCTION_EMITTER = gs_0
+      signature INSTRUCTION_STREAM = gs_37
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure Label = gs_1
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      signature MLTREE_EVAL = gs_38
+      structure OS = gs_18
+      structure Option = gs_2
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/emit/hppaMC.sml
+   in
+      functor gs_50 = HppaMCEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_51 = PSEUDO_OPS_BASIS
+   end
+   local
+      open l4
+   in
+      functor gs_52 = GasPseudoOps
+   end
+   local
+      open l4
+   in
+      functor gs_53 = PseudoOpsBig
+   end
+   local
+      open l109
+   in
+      structure gs_54 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_55 = PseudoOpsBasisTyp
+   end
+   local
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure Format = gs_54
+      functor GasPseudoOps = gs_52
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      signature MLTREE = gs_41
+      signature MLTREE_EVAL = gs_38
+      structure OS = gs_18
+      signature PSEUDO_OPS_BASIS = gs_51
+      structure Position = gs_19
+      structure PseudoOpsBasisTyp = gs_55
+      functor PseudoOpsBig = gs_53
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/flowgraph/hppaGasPseudoOps.sml
+   in
+      functor gs_56 = HppaGasPseudoOps
+   end
+   local
+      open l4
+   in
+      signature gs_57 = INSTRUCTIONS
+   end
+   local
+      structure CellsBasis = gs_5
+      signature INSTRUCTIONS = gs_57
+      signature MLTREE = gs_41
+      ../hppa/mltree/hppaLabelComp.sig
+   in
+      signature gs_58 = LABEL_COMP
+   end
+   local
+      structure CellsBasis = gs_5
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      ../hppa/ra/hppaRewrite.sml
+   in
+      functor gs_59 = HppaRewrite
+   end
+   local
+      open l4
+   in
+      functor gs_60 = MLTreeMult
+   end
+   local
+      open l4
+   in
+      functor gs_61 = MLTreeGen
+   end
+   local
+      open l4
+   in
+      structure gs_62 = MLRiscAnnotations
+   end
+   local
+      open l4
+   in
+      signature gs_63 = MLTREECOMP
+      signature gs_64 = MLTREE_EXTENSION_COMP
+   end
+   local
+      signature CELLS_BASIS = gs_42
+      structure CellsBasis = gs_5
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      ../hppa/mltree/hppaMillicode.sig
+   in
+      signature gs_65 = HPPA_MILLICODE
+   end
+   local
+      structure CellsBasis = gs_5
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature HPPAINSTR = gs_48
+      signature HPPA_MILLICODE = gs_65
+      functor HppaInstr = gs_49
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      signature LABEL_COMP = gs_58
+      structure Label = gs_1
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscAnnotations = gs_62
+      structure MLRiscErrorMsg = gs_4
+      signature MLTREECOMP = gs_63
+      signature MLTREE_EXTENSION_COMP = gs_64
+      functor MLTreeGen = gs_61
+      functor MLTreeMult = gs_60
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/mltree/hppa.sml
+   in
+      functor gs_66 = Hppa
+   end
+   local
+      open l4
+   in
+      signature gs_67 = DELAY_SLOT_PROPERTIES
+   end
+   local
+      open l4
+   in
+      signature gs_68 = INSN_PROPERTIES
+   end
+   local
+      structure CellsBasis = gs_5
+      signature DELAY_SLOT_PROPERTIES = gs_67
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      signature INSN_PROPERTIES = gs_68
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      structure Option = gs_2
+      ../hppa/backpatch/hppaDelaySlotProps.sml
+   in
+      functor gs_69 = HppaDelaySlots
+   end
+   local
+      open l4
+   in
+      signature gs_70 = ARCH_SPILL_INSTR
+   end
+   local
+      signature ARCH_SPILL_INSTR = gs_70
+      structure CellsBasis = gs_5
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      functor HppaRewrite = gs_59
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      ../hppa/ra/hppaSpillInstr.sml
+   in
+      functor gs_71 = HppaSpillInstr
+   end
+   local
+      structure CellsBasis = gs_5
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      ../hppa/instructions/hppaShuffle.sig
+   in
+      signature gs_72 = HPPASHUFFLE
+   end
+   local
+      open l4
+   in
+      signature gs_73 = MLTREE_HASH
+   end
+   local
+      structure CellsBasis = gs_5
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      signature INSN_PROPERTIES = gs_68
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure Label = gs_1
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      signature MLTREE_EVAL = gs_38
+      signature MLTREE_HASH = gs_73
+      structure OS = gs_18
+      structure Option = gs_2
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/instructions/hppaProps.sml
+   in
+      functor gs_74 = HppaProps
+   end
+   local
+      open l4
+   in
+      functor gs_75 = Shuffle
+   end
+   local
+      structure CellsBasis = gs_5
+      signature HPPAINSTR = gs_48
+      signature HPPASHUFFLE = gs_72
+      functor HppaInstr = gs_49
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      structure Option = gs_2
+      functor Shuffle = gs_75
+      ../hppa/instructions/hppaShuffle.sml
+   in
+      functor gs_76 = HppaShuffle
+   end
+   local
+      open l4
+   in
+      signature gs_77 = SDI_JUMPS
+   end
+   local
+      structure CellsBasis = gs_5
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature HPPAINSTR = gs_48
+      signature HPPASHUFFLE = gs_72
+      functor HppaInstr = gs_49
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure Label = gs_1
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      signature MLTREE_EVAL = gs_38
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      signature SDI_JUMPS = gs_77
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/backpatch/hppaJumps.sml
+   in
+      functor gs_78 = HppaJumps
+   end
+   local
+      open l11
+   in
+      structure gs_79 = TextIO
+   end
+   local
+      open l4
+   in
+      signature gs_80 = ASM_STREAM
+      structure gs_81 = AsmStream
+   end
+   local
+      open l4
+   in
+      signature gs_82 = ASM_FORMAT_UTIL
+      structure gs_83 = AsmFormatUtil
+   end
+   local
+      open l4
+   in
+      structure gs_84 = AsmFlags
+   end
+   local
+      signature ASM_FORMAT_UTIL = gs_82
+      signature ASM_STREAM = gs_80
+      structure Annotations = gs_43
+      structure AsmFlags = gs_84
+      structure AsmFormatUtil = gs_83
+      structure AsmStream = gs_81
+      structure CellsBasis = gs_5
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature HPPAINSTR = gs_48
+      signature HPPASHUFFLE = gs_72
+      functor HppaInstr = gs_49
+      signature INSTRUCTION_EMITTER = gs_0
+      signature INSTRUCTION_STREAM = gs_37
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_3
+      structure MLRiscErrorMsg = gs_4
+      signature MLTREE_EVAL = gs_38
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure TextIO = gs_79
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../hppa/emit/hppaAsm.sml
+   in
+      functor gs_85 = HppaAsmEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_86 = FREQUENCY_PROPERTIES
+   end
+   local
+      open l77
+   in
+      signature gs_87 = PROBABILITY
+      structure gs_88 = Probability
+   end
+   local
+      signature FREQUENCY_PROPERTIES = gs_86
+      signature HPPAINSTR = gs_48
+      functor HppaInstr = gs_49
+      structure MLRiscAnnotations = gs_62
+      signature PROBABILITY = gs_87
+      structure Probability = gs_88
+      ../hppa/instructions/hppaFreqProps.sml
+   in
+      functor gs_89 = HppaFreqProps
+   end
+in
+   signature HPPACELLS = gs_46
+   signature HPPAINSTR = gs_48
+   signature HPPASHUFFLE = gs_72
+   signature HPPA_MILLICODE = gs_65
+   functor Hppa = gs_66
+   functor HppaAsmEmitter = gs_85
+   structure HppaCells = gs_47
+   functor HppaDelaySlots = gs_69
+   functor HppaFreqProps = gs_89
+   functor HppaGasPseudoOps = gs_56
+   functor HppaInstr = gs_49
+   functor HppaJumps = gs_78
+   functor HppaMCEmitter = gs_50
+   functor HppaProps = gs_74
+   functor HppaRewrite = gs_59
+   functor HppaShuffle = gs_76
+   functor HppaSpillInstr = gs_71
+   signature LABEL_COMP = gs_58
+end
+end
+
+end
diff --git a/mlb/IA32-Peephole.mlb b/mlb/IA32-Peephole.mlb
new file mode 100644
index 0000000..d9ee357
--- /dev/null
+++ b/mlb/IA32-Peephole.mlb
@@ -0,0 +1,62 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l8 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l4 =
+    bas
+      (* $Peephole.cm(=(proxyLib.cm):.)/Peephole.cm =??=> *) Peephole.mlb
+    end
+  basis l16 =
+    bas
+      (* $IA32.cm(=(proxyLib.cm):.)/IA32.cm =??=> *) IA32.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = PEEPHOLE
+   end
+   local
+      open l8
+   in
+      structure gs_1 = CellsBasis
+   end
+   local
+      open l8
+   in
+      signature gs_2 = MLTREE_EVAL
+   end
+   local
+      open l16
+   in
+      signature gs_3 = X86INSTR
+      functor gs_4 = X86Instr
+   end
+   local
+      structure CellsBasis = gs_1
+      signature MLTREE_EVAL = gs_2
+      signature PEEPHOLE = gs_0
+      signature X86INSTR = gs_3
+      functor X86Instr = gs_4
+      ../x86/instructions/x86Peephole.sml
+   in
+      functor gs_5 = X86Peephole
+   end
+in
+   functor X86Peephole = gs_5
+end
+end
+
+end
diff --git a/mlb/IA32.mlb b/mlb/IA32.mlb
new file mode 100644
index 0000000..96f3a14
--- /dev/null
+++ b/mlb/IA32.mlb
@@ -0,0 +1,1087 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l53 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l147 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l68 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l217 =
+    bas
+      (* $Graphs.cm(=(proxyLib.cm):.)/Graphs.cm =??=> *) Graphs.mlb
+    end
+  basis l17 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+  basis l193 =
+    bas
+      (* $MLTREE.cm(=(proxyLib.cm):.)/MLTREE.cm =??=> *) MLTREE.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = REGION
+   end
+   local
+      open l4
+   in
+      signature gs_1 = CONSTANT
+   end
+   local
+      open l4
+   in
+      signature gs_2 = MLTREE
+   end
+   local
+      open l4
+   in
+      signature gs_3 = CELLS_BASIS
+   end
+   local
+      open l17
+   in
+      structure gs_4 = Annotations
+   end
+   local
+      open l4
+   in
+      structure gs_5 = Label
+   end
+   local
+      open l53
+   in
+      structure gs_6 = Char
+      structure gs_7 = CharArray
+      structure gs_8 = CharVector
+      structure gs_9 = FixedInt
+      structure gs_10 = General
+      structure gs_11 = Int
+      structure gs_12 = Int32
+      structure gs_13 = Int64
+      structure gs_14 = IntInf
+      structure gs_15 = LargeInt
+      structure gs_16 = LargeReal
+      structure gs_17 = LargeWord
+      structure gs_18 = OS
+      structure gs_19 = Position
+      structure gs_20 = Real
+      structure gs_21 = Real64
+      structure gs_22 = RealArray
+      structure gs_23 = RealArraySlice
+      structure gs_24 = RealVector
+      structure gs_25 = RealVectorSlice
+      structure gs_26 = SMLofNJ
+      structure gs_27 = Socket
+      structure gs_28 = String
+      structure gs_29 = Substring
+      structure gs_30 = SysWord
+      structure gs_31 = Time
+      structure gs_32 = Word
+      structure gs_33 = Word32
+      structure gs_34 = Word64
+      structure gs_35 = Word8
+   end
+   local
+      open l4
+   in
+      structure gs_36 = CellsBasis
+   end
+   local
+      open l4
+   in
+      functor gs_37 = Cells
+   end
+   local
+      open l4
+   in
+      signature gs_38 = CELLS
+   end
+   local
+      open l68
+   in
+      signature gs_39 = MLRISC_ERROR_MSG
+      structure gs_40 = MLRiscErrorMsg
+   end
+   local
+      signature CELLS = gs_38
+      functor Cells = gs_37
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../x86/instructions/x86Cells.sml
+   in
+      signature gs_41 = X86CELLS
+      structure gs_42 = X86Cells
+   end
+   local
+      structure Annotations = gs_4
+      signature CELLS_BASIS = gs_3
+      signature CONSTANT = gs_1
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure Label = gs_5
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLTREE = gs_2
+      structure OS = gs_18
+      structure Position = gs_19
+      signature REGION = gs_0
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86CELLS = gs_41
+      structure X86Cells = gs_42
+      ../x86/instructions/x86Instr.sml
+   in
+      signature gs_43 = X86INSTR
+      functor gs_44 = X86Instr
+   end
+   local
+      open l4
+   in
+      signature gs_45 = ARCH_SPILL_INSTR
+   end
+   local
+      open l4
+   in
+      signature gs_46 = INSN_PROPERTIES
+   end
+   local
+      signature ARCH_SPILL_INSTR = gs_45
+      structure CellsBasis = gs_36
+      signature INSN_PROPERTIES = gs_46
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/ra/x86SpillInstr.sml
+   in
+      functor gs_47 = X86SpillInstr
+   end
+   local
+      open l4
+   in
+      signature gs_48 = FREQUENCY_PROPERTIES
+   end
+   local
+      open l4
+   in
+      structure gs_49 = MLRiscAnnotations
+   end
+   local
+      open l17
+   in
+      signature gs_50 = PROBABILITY
+      structure gs_51 = Probability
+   end
+   local
+      signature FREQUENCY_PROPERTIES = gs_48
+      structure MLRiscAnnotations = gs_49
+      signature PROBABILITY = gs_50
+      structure Probability = gs_51
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/instructions/x86FreqProps.sml
+   in
+      functor gs_52 = X86FreqProps
+   end
+   local
+      open l4
+   in
+      signature gs_53 = MC_EMIT
+   end
+   local
+      open l53
+   in
+      structure gs_54 = Word8Vector
+   end
+   local
+      open l53
+   in
+      structure gs_55 = Option
+   end
+   local
+      open l4
+   in
+      signature gs_56 = INSTRUCTION_EMITTER
+   end
+   local
+      open l4
+   in
+      signature gs_57 = MLTREE_EVAL
+   end
+   local
+      structure CellsBasis = gs_36
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/instructions/x86MemRegs.sig
+   in
+      signature gs_58 = MEMORY_REGISTERS
+   end
+   local
+      structure CellsBasis = gs_36
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/instructions/x86Shuffle.sig
+   in
+      signature gs_59 = X86SHUFFLE
+   end
+   local
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature INSTRUCTION_EMITTER = gs_56
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MC_EMIT = gs_53
+      signature MEMORY_REGISTERS = gs_58
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_57
+      structure OS = gs_18
+      structure Option = gs_55
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      structure Word8Vector = gs_54
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      signature X86SHUFFLE = gs_59
+      ../x86/x86MC.sml
+   in
+      functor gs_60 = X86MCEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_61 = MLTREE_HASH
+   end
+   local
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature INSN_PROPERTIES = gs_46
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure Label = gs_5
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_57
+      signature MLTREE_HASH = gs_61
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/instructions/x86Props.sml
+   in
+      functor gs_62 = X86Props
+   end
+   local
+      open l4
+   in
+      signature gs_63 = PSEUDO_OPS_BASIS
+   end
+   local
+      open l4
+   in
+      functor gs_64 = DarwinPseudoOps
+   end
+   local
+      open l4
+   in
+      functor gs_65 = PseudoOpsLittle
+   end
+   local
+      open l147
+   in
+      structure gs_66 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_67 = PseudoOpsBasisTyp
+   end
+   local
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      functor DarwinPseudoOps = gs_64
+      structure FixedInt = gs_9
+      structure Format = gs_66
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE = gs_2
+      signature MLTREE_EVAL = gs_57
+      structure OS = gs_18
+      signature PSEUDO_OPS_BASIS = gs_63
+      structure Position = gs_19
+      structure PseudoOpsBasisTyp = gs_67
+      functor PseudoOpsLittle = gs_65
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../x86/flowgraph/x86-darwin-pseudo-ops.sml
+   in
+      functor gs_68 = X86DarwinPseudoOps
+   end
+   local
+      open l4
+   in
+      signature gs_69 = SDI_JUMPS
+   end
+   local
+      signature MC_EMIT = gs_53
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_57
+      signature SDI_JUMPS = gs_69
+      structure Word8Vector = gs_54
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      signature X86SHUFFLE = gs_59
+      ../x86/backpatch/x86Jumps.sml
+   in
+      functor gs_70 = X86Jumps
+   end
+   local
+      open l4
+   in
+      signature gs_71 = CONTROL_FLOW_GRAPH
+   end
+   local
+      open l4
+   in
+      signature gs_72 = MLTREE_STREAM
+   end
+   local
+      ../x86/instructions/x86instr-ext.sml
+   in
+      structure gs_73 = X86InstrExt
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_71
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_STREAM = gs_72
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      structure X86InstrExt = gs_73
+      ../x86/instructions/x86comp-instr-ext.sml
+   in
+      signature gs_74 = X86COMP_INSTR_EXT
+      functor gs_75 = X86CompInstrExt
+   end
+   local
+      open l4
+   in
+      functor gs_76 = MLTreeGen
+   end
+   local
+      open l4
+   in
+      functor gs_77 = Shuffle
+   end
+   local
+      open l53
+   in
+      structure gs_78 = List
+   end
+   local
+      open l4
+   in
+      signature gs_79 = MLTREECOMP
+      signature gs_80 = MLTREE_EXTENSION_COMP
+   end
+   local
+      open l193
+   in
+      signature gs_81 = MLTREE_UTILS
+   end
+   local
+      structure Annotations = gs_4
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure Label = gs_5
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      structure List = gs_78
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscAnnotations = gs_49
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREECOMP = gs_79
+      signature MLTREE_EXTENSION_COMP = gs_80
+      signature MLTREE_STREAM = gs_72
+      signature MLTREE_UTILS = gs_81
+      functor MLTreeGen = gs_76
+      structure OS = gs_18
+      signature PROBABILITY = gs_50
+      structure Position = gs_19
+      structure Probability = gs_51
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      functor Shuffle = gs_77
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/mltree/x86.sml
+   in
+      functor gs_82 = X86
+   end
+   local
+      open l4
+   in
+      signature gs_83 = C_CALLS
+   end
+   local
+      open l4
+   in
+      structure gs_84 = CTypes
+   end
+   local
+      structure CTypes = gs_84
+      signature C_CALLS = gs_83
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      structure List = gs_78
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscAnnotations = gs_49
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE = gs_2
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86CELLS = gs_41
+      structure X86Cells = gs_42
+      structure X86InstrExt = gs_73
+      ../x86/c-calls/ia32-svid.sml
+   in
+      functor gs_85 = IA32SVID_CCalls
+   end
+   local
+      open l4
+   in
+      signature gs_86 = OMIT_FRAME_POINTER
+   end
+   local
+      open l147
+   in
+      structure gs_87 = IntHashTable
+   end
+   local
+      open l217
+   in
+      structure gs_88 = Graph
+   end
+   local
+      open l68
+   in
+      signature gs_89 = MLRISC_CONTROL
+      structure gs_90 = MLRiscControl
+   end
+   local
+      open l53
+   in
+      structure gs_91 = ListPair
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_71
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Graph = gs_88
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntHashTable = gs_87
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      structure ListPair = gs_91
+      signature MEMORY_REGISTERS = gs_58
+      signature MLRISC_CONTROL = gs_89
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscAnnotations = gs_49
+      structure MLRiscControl = gs_90
+      structure MLRiscErrorMsg = gs_40
+      signature OMIT_FRAME_POINTER = gs_86
+      structure OS = gs_18
+      structure Option = gs_55
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/omit-frameptr/x86omit-frameptr.sml
+   in
+      functor gs_92 = X86OmitFramePointer
+   end
+   local
+      open l4
+   in
+      signature gs_93 = CFG_OPTIMIZATION
+   end
+   local
+      open l4
+   in
+      functor gs_94 = GetReg
+   end
+   local
+      open l4
+   in
+      functor gs_95 = RegisterAllocator
+   end
+   local
+      open l4
+   in
+      functor gs_96 = MemoryRA
+   end
+   local
+      open l4
+   in
+      functor gs_97 = RADeadCodeElim
+   end
+   local
+      open l4
+   in
+      functor gs_98 = ClusterRA
+   end
+   local
+      open l4
+   in
+      signature gs_99 = LIVENESS
+      functor gs_100 = Liveness
+   end
+   local
+      open l4
+   in
+      signature gs_101 = PRINT_FLOWGRAPH
+      functor gs_102 = PrintFlowgraph
+   end
+   local
+      open l53
+   in
+      structure gs_103 = Array
+   end
+   local
+      open l4
+   in
+      signature gs_104 = RA_SPILL
+   end
+   local
+      open l4
+   in
+      signature gs_105 = RA_SPILL_HEURISTICS
+   end
+   local
+      open l4
+   in
+      structure gs_106 = RAGraph
+   end
+   local
+      open l147
+   in
+      structure gs_107 = IntRedBlackMap
+   end
+   local
+      open l53
+   in
+      structure gs_108 = TextIO
+   end
+   local
+      open l4
+   in
+      signature gs_109 = ASM_STREAM
+      structure gs_110 = AsmStream
+   end
+   local
+      open l17
+   in
+      structure gs_111 = StringOutStream
+   end
+   local
+      open l147
+   in
+      structure gs_112 = ListMergeSort
+   end
+   local
+      signature ASM_STREAM = gs_109
+      structure Annotations = gs_4
+      structure Array = gs_103
+      structure AsmStream = gs_110
+      signature CFG_OPTIMIZATION = gs_93
+      signature CONTROL_FLOW_GRAPH = gs_71
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      structure Graph = gs_88
+      signature INSN_PROPERTIES = gs_46
+      signature INSTRUCTION_EMITTER = gs_56
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntHashTable = gs_87
+      structure IntInf = gs_14
+      structure IntRedBlackMap = gs_107
+      signature LIVENESS = gs_99
+      structure Label = gs_5
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      structure List = gs_78
+      structure ListMergeSort = gs_112
+      structure ListPair = gs_91
+      functor Liveness = gs_100
+      signature MLRISC_CONTROL = gs_89
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscAnnotations = gs_49
+      structure MLRiscControl = gs_90
+      structure MLRiscErrorMsg = gs_40
+      structure OS = gs_18
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure StringOutStream = gs_111
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure TextIO = gs_108
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/mltree/x86-fp.sml
+   in
+      functor gs_113 = X86FP
+   end
+   local
+      structure Annotations = gs_4
+      structure Array = gs_103
+      signature CFG_OPTIMIZATION = gs_93
+      signature CONTROL_FLOW_GRAPH = gs_71
+      structure CellsBasis = gs_36
+      functor ClusterRA = gs_98
+      functor GetReg = gs_94
+      structure Graph = gs_88
+      signature INSN_PROPERTIES = gs_46
+      signature INSTRUCTION_EMITTER = gs_56
+      structure IntHashTable = gs_87
+      signature LIVENESS = gs_99
+      structure List = gs_78
+      functor Liveness = gs_100
+      signature MLRISC_CONTROL = gs_89
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscControl = gs_90
+      structure MLRiscErrorMsg = gs_40
+      functor MemoryRA = gs_96
+      signature PRINT_FLOWGRAPH = gs_101
+      functor PrintFlowgraph = gs_102
+      functor RADeadCodeElim = gs_97
+      structure RAGraph = gs_106
+      signature RA_SPILL = gs_104
+      signature RA_SPILL_HEURISTICS = gs_105
+      functor RegisterAllocator = gs_95
+      functor X86FP = gs_113
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      functor X86SpillInstr = gs_47
+      ../x86/ra/x86RA.sml
+   in
+      functor gs_114 = X86RA
+   end
+   local
+      signature CELLS_BASIS = gs_3
+      structure CellsBasis = gs_36
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      ../x86/ra/x86Rewrite.sig
+   in
+      signature gs_115 = X86REWRITE
+   end
+   local
+      open l4
+   in
+      signature gs_116 = ASM_FORMAT_UTIL
+      structure gs_117 = AsmFormatUtil
+   end
+   local
+      open l4
+   in
+      structure gs_118 = AsmFlags
+   end
+   local
+      open l4
+   in
+      signature gs_119 = INSTRUCTION_STREAM
+   end
+   local
+      signature ASM_FORMAT_UTIL = gs_116
+      signature ASM_STREAM = gs_109
+      structure Annotations = gs_4
+      structure AsmFlags = gs_118
+      structure AsmFormatUtil = gs_117
+      structure AsmStream = gs_110
+      structure CellsBasis = gs_36
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure General = gs_10
+      signature INSTRUCTION_EMITTER = gs_56
+      signature INSTRUCTION_STREAM = gs_119
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MEMORY_REGISTERS = gs_58
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_57
+      structure OS = gs_18
+      structure Option = gs_55
+      structure Position = gs_19
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure TextIO = gs_108
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      signature X86SHUFFLE = gs_59
+      ../x86/emit/x86Asm.sml
+   in
+      functor gs_120 = X86AsmEmitter
+   end
+   local
+      structure CellsBasis = gs_36
+      structure List = gs_78
+      functor Shuffle = gs_77
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      signature X86SHUFFLE = gs_59
+      ../x86/instructions/x86Shuffle.sml
+   in
+      functor gs_121 = X86Shuffle
+   end
+   local
+      structure CellsBasis = gs_36
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature X86INSTR = gs_43
+      functor X86Instr = gs_44
+      signature X86REWRITE = gs_115
+      ../x86/ra/x86Rewrite.sml
+   in
+      functor gs_122 = X86Rewrite
+   end
+   local
+      open l4
+   in
+      functor gs_123 = GasPseudoOps
+   end
+   local
+      structure Char = gs_6
+      structure CharArray = gs_7
+      structure CharVector = gs_8
+      structure FixedInt = gs_9
+      structure Format = gs_66
+      functor GasPseudoOps = gs_123
+      structure General = gs_10
+      structure Int = gs_11
+      structure Int32 = gs_12
+      structure Int64 = gs_13
+      structure IntInf = gs_14
+      structure LargeInt = gs_15
+      structure LargeReal = gs_16
+      structure LargeWord = gs_17
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE = gs_2
+      signature MLTREE_EVAL = gs_57
+      structure OS = gs_18
+      signature PSEUDO_OPS_BASIS = gs_63
+      structure Position = gs_19
+      structure PseudoOpsBasisTyp = gs_67
+      functor PseudoOpsLittle = gs_65
+      structure Real = gs_20
+      structure Real64 = gs_21
+      structure RealArray = gs_22
+      structure RealArraySlice = gs_23
+      structure RealVector = gs_24
+      structure RealVectorSlice = gs_25
+      structure SMLofNJ = gs_26
+      structure Socket = gs_27
+      structure String = gs_28
+      structure Substring = gs_29
+      structure SysWord = gs_30
+      structure Time = gs_31
+      structure Word = gs_32
+      structure Word32 = gs_33
+      structure Word64 = gs_34
+      structure Word8 = gs_35
+      ../x86/flowgraph/x86GasPseudoOps.sml
+   in
+      functor gs_124 = X86GasPseudoOps
+   end
+in
+   functor IA32SVID_CCalls = gs_85
+   signature MEMORY_REGISTERS = gs_58
+   functor X86 = gs_82
+   functor X86AsmEmitter = gs_120
+   signature X86CELLS = gs_41
+   signature X86COMP_INSTR_EXT = gs_74
+   structure X86Cells = gs_42
+   functor X86CompInstrExt = gs_75
+   functor X86DarwinPseudoOps = gs_68
+   functor X86FP = gs_113
+   functor X86FreqProps = gs_52
+   functor X86GasPseudoOps = gs_124
+   signature X86INSTR = gs_43
+   functor X86Instr = gs_44
+   structure X86InstrExt = gs_73
+   functor X86Jumps = gs_70
+   functor X86MCEmitter = gs_60
+   functor X86OmitFramePointer = gs_92
+   functor X86Props = gs_62
+   functor X86RA = gs_114
+   signature X86REWRITE = gs_115
+   functor X86Rewrite = gs_122
+   signature X86SHUFFLE = gs_59
+   functor X86Shuffle = gs_121
+   functor X86SpillInstr = gs_47
+end
+end
+
+end
diff --git a/mlb/Lib.mlb b/mlb/Lib.mlb
new file mode 100644
index 0000000..e7f0054
--- /dev/null
+++ b/mlb/Lib.mlb
@@ -0,0 +1,498 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l33 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l33
+   in
+      structure gs_0 = Char
+      structure gs_1 = CharArray
+      structure gs_2 = CharVector
+      structure gs_3 = FixedInt
+      structure gs_4 = General
+      structure gs_5 = Int
+      structure gs_6 = Int32
+      structure gs_7 = Int64
+      structure gs_8 = IntInf
+      structure gs_9 = LargeInt
+      structure gs_10 = LargeReal
+      structure gs_11 = LargeWord
+      structure gs_12 = OS
+      structure gs_13 = Position
+      structure gs_14 = Real
+      structure gs_15 = Real64
+      structure gs_16 = RealArray
+      structure gs_17 = RealArraySlice
+      structure gs_18 = RealVector
+      structure gs_19 = RealVectorSlice
+      structure gs_20 = SMLofNJ
+      structure gs_21 = Socket
+      structure gs_22 = String
+      structure gs_23 = Substring
+      structure gs_24 = SysWord
+      structure gs_25 = Time
+      structure gs_26 = Word
+      structure gs_27 = Word32
+      structure gs_28 = Word64
+      structure gs_29 = Word8
+   end
+   local
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/line-break.sml
+   in
+      signature gs_30 = LINE_BREAK
+      structure gs_31 = LineBreak
+   end
+   local
+      ../library/cache.sml
+   in
+      signature gs_32 = CACHE_REF
+      structure gs_33 = CacheRef
+   end
+   local
+      ../library/catlist.sml
+   in
+      signature gs_34 = CATNETABLE_LIST
+      structure gs_35 = CatnetableList
+   end
+   local
+      ../library/annotations.sig
+   in
+      signature gs_36 = ANNOTATIONS
+   end
+   local
+      signature ANNOTATIONS = gs_36
+      ../library/annotations.sml
+   in
+      structure gs_37 = Annotations
+   end
+   local
+      ../library/sortedlist.sml
+   in
+      structure gs_38 = SortedList
+   end
+   local
+      open l33
+   in
+      structure gs_39 = List
+   end
+   local
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_39
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/probability.sml
+   in
+      signature gs_40 = PROBABILITY
+      structure gs_41 = Probability
+   end
+   local
+      open l33
+   in
+      structure gs_42 = TextPrimIO
+   end
+   local
+      open l33
+   in
+      structure gs_43 = TextIO
+   end
+   local
+      open l33
+   in
+      structure gs_44 = CharArraySlice
+   end
+   local
+      open l33
+   in
+      structure gs_45 = CharVectorSlice
+   end
+   local
+      open l33
+   in
+      structure gs_46 = IO
+   end
+   local
+      structure TextIO = gs_43
+      ../library/stringOutStream.sig
+   in
+      signature gs_47 = STRING_OUTSTREAM
+   end
+   local
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharArraySlice = gs_44
+      structure CharVector = gs_2
+      structure CharVectorSlice = gs_45
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure IO = gs_46
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_39
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      signature STRING_OUTSTREAM = gs_47
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure TextIO = gs_43
+      structure TextPrimIO = gs_42
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/stringOutStream.sml
+   in
+      structure gs_48 = StringOutStream
+   end
+   local
+      open l33
+   in
+      signature gs_49 = INTEGER
+   end
+   local
+      signature INTEGER = gs_49
+      ../library/freq.sig
+   in
+      signature gs_50 = FREQ
+   end
+   local
+      ../library/array-noneq.sig
+   in
+      signature gs_51 = ARRAY_NONEQ
+   end
+   local
+      ../library/priQueue.sig
+   in
+      signature gs_52 = PRIORITY_QUEUE
+   end
+   local
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure OS = gs_12
+      signature PRIORITY_QUEUE = gs_52
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/priQueue.sml
+   in
+      structure gs_53 = PriorityQueue
+   end
+   local
+      open l33
+   in
+      structure gs_54 = Word8Array
+   end
+   local
+      ../library/bitset.sig
+   in
+      signature gs_55 = BITSET
+   end
+   local
+      signature BITSET = gs_55
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      structure Word8Array = gs_54
+      ../library/bitset.sml
+   in
+      structure gs_56 = BitSet
+   end
+   local
+      open l33
+   in
+      structure gs_57 = ArraySlice
+   end
+   local
+      open l33
+   in
+      structure gs_58 = Array
+   end
+   local
+      open l33
+   in
+      structure gs_59 = Vector
+   end
+   local
+      signature ARRAY_NONEQ = gs_51
+      structure Array = gs_58
+      structure ArraySlice = gs_57
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Vector = gs_59
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/dynamic-array.sml
+   in
+      structure gs_60 = DynArray
+   end
+   local
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      signature FREQ = gs_50
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/freq.sml
+   in
+      structure gs_61 = Freq
+   end
+   local
+      signature ARRAY_NONEQ = gs_51
+      structure Array = gs_58
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_39
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Vector = gs_59
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../library/hash-array.sml
+   in
+      structure gs_62 = HashArray
+   end
+   local
+      structure Array = gs_58
+      signature PRIORITY_QUEUE = gs_52
+      ../library/heap.sml
+   in
+      structure gs_63 = PriorityHeap
+   end
+in
+   signature ANNOTATIONS = gs_36
+   signature ARRAY_NONEQ = gs_51
+   structure Annotations = gs_37
+   signature BITSET = gs_55
+   structure BitSet = gs_56
+   signature CACHE_REF = gs_32
+   signature CATNETABLE_LIST = gs_34
+   structure CacheRef = gs_33
+   structure CatnetableList = gs_35
+   structure DynArray = gs_60
+   signature FREQ = gs_50
+   structure Freq = gs_61
+   structure HashArray = gs_62
+   signature LINE_BREAK = gs_30
+   structure LineBreak = gs_31
+   signature PRIORITY_QUEUE = gs_52
+   signature PROBABILITY = gs_40
+   structure PriorityHeap = gs_63
+   structure PriorityQueue = gs_53
+   structure Probability = gs_41
+   signature STRING_OUTSTREAM = gs_47
+   structure SortedList = gs_38
+   structure StringOutStream = gs_48
+end
+end
+
+end
diff --git a/mlb/MLRISC.mlb b/mlb/MLRISC.mlb
new file mode 100644
index 0000000..8df5424
--- /dev/null
+++ b/mlb/MLRISC.mlb
@@ -0,0 +1,3018 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l5 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l19 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l38 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l9 =
+    bas
+      (* $Graphs.cm(=(proxyLib.cm):.)/Graphs.cm =??=> *) Graphs.mlb
+    end
+  basis l13 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l5
+   in
+      structure gs_0 = TextIO
+   end
+   local
+      open l9
+   in
+      structure gs_1 = Graph
+   end
+   local
+      open l13
+   in
+      structure gs_2 = Annotations
+   end
+   local
+      open l19
+   in
+      signature gs_3 = MONO_HASH_TABLE
+   end
+   local
+      open l5
+   in
+      structure gs_4 = Array
+   end
+   local
+      structure Annotations = gs_2
+      structure Array = gs_4
+      signature MONO_HASH_TABLE = gs_3
+      ../instructions/cells-basis.sig
+   in
+      signature gs_5 = CELLS_BASIS
+   end
+   local
+      open l19
+   in
+      functor gs_6 = HashTableFn
+   end
+   local
+      open l5
+   in
+      structure gs_7 = List
+   end
+   local
+      open l38
+   in
+      signature gs_8 = MLRISC_ERROR_MSG
+      structure gs_9 = MLRiscErrorMsg
+   end
+   local
+      open l5
+   in
+      structure gs_10 = Char
+      structure gs_11 = CharArray
+      structure gs_12 = CharVector
+      structure gs_13 = FixedInt
+      structure gs_14 = General
+      structure gs_15 = Int
+      structure gs_16 = Int32
+      structure gs_17 = Int64
+      structure gs_18 = IntInf
+      structure gs_19 = LargeInt
+      structure gs_20 = LargeReal
+      structure gs_21 = LargeWord
+      structure gs_22 = OS
+      structure gs_23 = Position
+      structure gs_24 = Real
+      structure gs_25 = Real64
+      structure gs_26 = RealArray
+      structure gs_27 = RealArraySlice
+      structure gs_28 = RealVector
+      structure gs_29 = RealVectorSlice
+      structure gs_30 = SMLofNJ
+      structure gs_31 = Socket
+      structure gs_32 = String
+      structure gs_33 = Substring
+      structure gs_34 = SysWord
+      structure gs_35 = Time
+      structure gs_36 = Word
+      structure gs_37 = Word32
+      structure gs_38 = Word64
+      structure gs_39 = Word8
+   end
+   local
+      structure Annotations = gs_2
+      structure Array = gs_4
+      signature CELLS_BASIS = gs_5
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      functor HashTableFn = gs_6
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../instructions/cells-basis.sml
+   in
+      structure gs_40 = CellsBasis
+   end
+   local
+      structure CellsBasis = gs_40
+      ../instructions/cells.sig
+   in
+      signature gs_41 = CELLS
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS = gs_41
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      ../instructions/instructions.sig
+   in
+      signature gs_42 = INSTRUCTIONS
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/machine-int.sig
+   in
+      signature gs_43 = MACHINE_INT
+   end
+   local
+      ../mltree/mltree-extension.sig
+   in
+      signature gs_44 = MLTREE_EXTENSION
+   end
+   local
+      ../mltree/mltree-basis.sig
+   in
+      signature gs_45 = MLTREE_BASIS
+   end
+   local
+      ../instructions/region.sig
+   in
+      signature gs_46 = REGION
+   end
+   local
+      ../instructions/constant.sig
+   in
+      signature gs_47 = CONSTANT
+   end
+   local
+      ../instructions/label-sig.sml
+   in
+      signature gs_48 = LABEL
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      signature LABEL = gs_48
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../instructions/label.sml
+   in
+      structure gs_49 = Label
+   end
+   local
+      structure Annotations = gs_2
+      signature CONSTANT = gs_47
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MACHINE_INT = gs_43
+      signature MLTREE_BASIS = gs_45
+      signature MLTREE_EXTENSION = gs_44
+      structure OS = gs_22
+      structure Position = gs_23
+      signature REGION = gs_46
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree.sig
+   in
+      signature gs_50 = MLTREE
+   end
+   local
+      open l19
+   in
+      structure gs_51 = Atom
+   end
+   local
+      structure Atom = gs_51
+      structure Label = gs_49
+      ../flowgraph/pseudo-ops-basis-typ.sml
+   in
+      structure gs_52 = PseudoOpsBasisTyp
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLTREE = gs_50
+      structure OS = gs_22
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/pseudo-ops-basis.sig
+   in
+      signature gs_53 = PSEUDO_OPS_BASIS
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      signature PSEUDO_OPS_BASIS = gs_53
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/client-pseudo-ops.sig
+   in
+      signature gs_54 = CLIENT_PSEUDO_OPS
+   end
+   local
+      signature CLIENT_PSEUDO_OPS = gs_54
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLTREE = gs_50
+      structure OS = gs_22
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/pseudo-ops.sig
+   in
+      signature gs_55 = PSEUDO_OPS
+   end
+   local
+      structure Annotations = gs_2
+      structure Graph = gs_1
+      signature INSTRUCTIONS = gs_42
+      structure Label = gs_49
+      signature PSEUDO_OPS = gs_55
+      structure TextIO = gs_0
+      ../flowgraph/cfg.sig
+   in
+      signature gs_56 = CONTROL_FLOW_GRAPH
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      ../frequencies/compute-execution-freqs.sig
+   in
+      signature gs_57 = COMPUTE_EXECUTION_FREQUENCIES
+   end
+   local
+      open l19
+   in
+      structure gs_58 = IntHashTable
+   end
+   local
+      open l5
+   in
+      structure gs_59 = Option
+   end
+   local
+      open l13
+   in
+      structure gs_60 = PriorityHeap
+   end
+   local
+      structure Array = gs_4
+      ../ra/ra-bitmatrix.sig
+   in
+      signature gs_61 = RA_BITMATRIX
+   end
+   local
+      open l5
+   in
+      structure gs_62 = Unsafe
+   end
+   local
+      structure Array = gs_4
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      signature RA_BITMATRIX = gs_61
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Unsafe = gs_62
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/raBitmatrix.sml
+   in
+      structure gs_63 = RaBitmatrix
+   end
+   local
+      structure Array = gs_4
+      signature CELLS_BASIS = gs_5
+      structure IntHashTable = gs_58
+      signature MONO_HASH_TABLE = gs_3
+      signature RA_BITMATRIX = gs_61
+      structure RaBitmatrix = gs_63
+      ../ra/ra-graph.sig
+   in
+      signature gs_64 = RA_GRAPH
+   end
+   local
+      structure Array = gs_4
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      functor HashTableFn = gs_6
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      signature RA_GRAPH = gs_64
+      structure RaBitmatrix = gs_63
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/ra-graph.sml
+   in
+      structure gs_65 = RAGraph
+   end
+   local
+      structure RAGraph = gs_65
+      signature RA_GRAPH = gs_64
+      ../ra/ra-spillheur.sig
+   in
+      signature gs_66 = RA_SPILL_HEURISTICS
+   end
+   local
+      open l38
+   in
+      signature gs_67 = MLRISC_CONTROL
+      structure gs_68 = MLRiscControl
+   end
+   local
+      open l19
+   in
+      structure gs_69 = ListMergeSort
+   end
+   local
+      open l5
+   in
+      structure gs_70 = Word8Array
+   end
+   local
+      ../ra/ra-priqueue.sig
+   in
+      signature gs_71 = RA_PRIORITY_QUEUE
+   end
+   local
+      structure RAGraph = gs_65
+      signature RA_BITMATRIX = gs_61
+      signature RA_GRAPH = gs_64
+      signature RA_PRIORITY_QUEUE = gs_71
+      structure TextIO = gs_0
+      ../ra/ra-core.sig
+   in
+      signature gs_72 = RA_CORE
+   end
+   local
+      signature RA_PRIORITY_QUEUE = gs_71
+      ../ra/raPriQueue.sml
+   in
+      functor gs_73 = RaPriQueue
+   end
+   local
+      structure Array = gs_4
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      structure ListMergeSort = gs_69
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure RAGraph = gs_65
+      signature RA_CORE = gs_72
+      functor RaPriQueue = gs_73
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Unsafe = gs_62
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      structure Word8Array = gs_70
+      ../ra/ra-core.sml
+   in
+      structure gs_74 = RACore
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Option = gs_59
+      structure Position = gs_23
+      structure PriorityHeap = gs_60
+      structure RACore = gs_74
+      structure RAGraph = gs_65
+      signature RA_SPILL_HEURISTICS = gs_66
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/chow-hennessy-spillheur.sml
+   in
+      structure gs_75 = ChowHennessySpillHeur
+   end
+   local
+      ../aliasing/mlriscRegion.sig
+   in
+      signature gs_76 = MLRISC_REGION
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_REGION = gs_76
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../aliasing/mlriscRegion.sml
+   in
+      structure gs_77 = MLRiscRegion
+   end
+   local
+      structure Array = gs_4
+      ../ra/getreg.sig
+   in
+      signature gs_78 = GETREG
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      ../backpatch/bbsched.sig
+   in
+      signature gs_79 = BBSCHED
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      structure Label = gs_49
+      ../instructions/insnProps.sig
+   in
+      signature gs_80 = INSN_PROPERTIES
+   end
+   local
+      signature INSTRUCTIONS = gs_42
+      structure Label = gs_49
+      ../backpatch/delaySlotProps.sig
+   in
+      signature gs_81 = DELAY_SLOT_PROPERTIES
+   end
+   local
+      signature CELLS = gs_41
+      signature INSTRUCTIONS = gs_42
+      structure Label = gs_49
+      ../backpatch/sdi-jumps.sig
+   in
+      signature gs_82 = SDI_JUMPS
+   end
+   local
+      structure Annotations = gs_2
+      structure Label = gs_49
+      signature PSEUDO_OPS = gs_55
+      ../instructions/stream.sig
+   in
+      signature gs_83 = INSTRUCTION_STREAM
+   end
+   local
+      structure Annotations = gs_2
+      signature INSTRUCTIONS = gs_42
+      signature INSTRUCTION_STREAM = gs_83
+      ../emit/instruction-emitter.sig
+   in
+      signature gs_84 = INSTRUCTION_EMITTER
+   end
+   local
+      structure Array = gs_4
+      signature BBSCHED = gs_79
+      signature CONTROL_FLOW_GRAPH = gs_56
+      signature DELAY_SLOT_PROPERTIES = gs_81
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Label = gs_49
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      signature SDI_JUMPS = gs_82
+      ../backpatch/spanDep.sml
+   in
+      functor gs_85 = SpanDependencyResolution
+   end
+   local
+      signature MLTREE = gs_50
+      ../mltree/mltree-hash.sig
+   in
+      signature gs_86 = MLTREE_HASH
+   end
+   local
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      signature MLTREE_HASH = gs_86
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree-hash.sml
+   in
+      functor gs_87 = MLTreeHash
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS = gs_41
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      structure RAGraph = gs_65
+      signature RA_GRAPH = gs_64
+      ../ra/ra-spill.sig
+   in
+      signature gs_88 = RA_SPILL
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      structure RAGraph = gs_65
+      signature RA_GRAPH = gs_64
+      signature RA_SPILL = gs_88
+      structure TextIO = gs_0
+      ../ra/ra-flowgraph.sig
+   in
+      signature gs_89 = RA_FLOWGRAPH
+   end
+   local
+      structure Array = gs_4
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure RACore = gs_74
+      structure RAGraph = gs_65
+      signature RA_FLOWGRAPH = gs_89
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/mem-ra.sml
+   in
+      functor gs_90 = MemoryRA
+   end
+   local
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure RACore = gs_74
+      signature RA_FLOWGRAPH = gs_89
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/ra-deadCodeE.sml
+   in
+      functor gs_91 = RADeadCodeElim
+   end
+   local
+      open l5
+   in
+      structure gs_92 = Word8Vector
+   end
+   local
+      signature INSTRUCTIONS = gs_42
+      structure Word8Vector = gs_92
+      ../emit/mc-emit.sig
+   in
+      signature gs_93 = MC_EMIT
+   end
+   local
+      open l13
+   in
+      signature gs_94 = PROBABILITY
+      structure gs_95 = Probability
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      signature PROBABILITY = gs_94
+      structure Probability = gs_95
+      ../instructions/mlriscAnnotations.sig
+   in
+      signature gs_96 = MLRISC_ANNOTATIONS
+   end
+   local
+      structure Annotations = gs_2
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ANNOTATIONS = gs_96
+      structure OS = gs_22
+      signature PROBABILITY = gs_94
+      structure Position = gs_23
+      structure Probability = gs_95
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../instructions/mlriscAnnotations.sml
+   in
+      structure gs_97 = MLRiscAnnotations
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Graph = gs_1
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscAnnotations = gs_97
+      structure MLRiscControl = gs_68
+      signature PROBABILITY = gs_94
+      structure Probability = gs_95
+      ../frequencies/complete-probs-fn.sml
+   in
+      functor gs_98 = CompleteProbsFn
+   end
+   local
+      ../instructions/mlriscOptimization.sig
+   in
+      signature gs_99 = MLRISC_OPTIMIZATION
+   end
+   local
+      structure TextIO = gs_0
+      ../emit/asmStream.sml
+   in
+      signature gs_100 = ASM_STREAM
+      structure gs_101 = AsmStream
+   end
+   local
+      open l5
+   in
+      structure gs_102 = StringCvt
+   end
+   local
+      structure Array = gs_4
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MACHINE_INT = gs_43
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure StringCvt = gs_102
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/machine-int.sml
+   in
+      structure gs_103 = MachineInt
+   end
+   local
+      structure Array = gs_4
+      signature GETREG = gs_78
+      ../ra/getreg2.sml
+   in
+      functor gs_104 = GetReg2
+   end
+   local
+      structure Array = gs_4
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../block-placement/check-placement-fn.sml
+   in
+      functor gs_105 = CheckPlacementFn
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      ../emit/asmEmit.sig
+   in
+      signature gs_106 = ASSEMBLY_EMITTER
+   end
+   local
+      open l9
+   in
+      signature gs_107 = GRAPH_IMPLEMENTATION
+   end
+   local
+      structure Array = gs_4
+      signature GRAPH_IMPLEMENTATION = gs_107
+      structure Graph = gs_1
+      ../ir-archive/dominator.sig
+   in
+      signature gs_108 = DOMINATOR_TREE
+   end
+   local
+      structure Array = gs_4
+      signature DOMINATOR_TREE = gs_108
+      signature GRAPH_IMPLEMENTATION = gs_107
+      structure Graph = gs_1
+      ../ir-archive/loop-structure.sig
+   in
+      signature gs_109 = LOOP_STRUCTURE
+   end
+   local
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      ../aliasing/pointsTo.sig
+   in
+      signature gs_110 = POINTS_TO
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      signature INSTRUCTIONS = gs_42
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../omit-frameptr/omit-frame-pointer.sig
+   in
+      signature gs_111 = OMIT_FRAME_POINTER
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../c-calls/c-types.sml
+   in
+      structure gs_112 = CTypes
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      ../flowgraph/cfg-optimization.sig
+   in
+      signature gs_113 = CFG_OPTIMIZATION
+   end
+   local
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      ../instructions/shuffle.sig
+   in
+      signature gs_114 = SHUFFLE
+   end
+   local
+      signature CFG_OPTIMIZATION = gs_113
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      structure Graph = gs_1
+      structure List = gs_7
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature SHUFFLE = gs_114
+      ../flowgraph/cfgExpandCopies.sml
+   in
+      functor gs_115 = CFGExpandCopies
+   end
+   local
+      open l19
+   in
+      structure gs_116 = Format
+   end
+   local
+      structure Annotations = gs_2
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure Format = gs_116
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTIONS = gs_42
+      signature INSTRUCTION_STREAM = gs_83
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscAnnotations = gs_97
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      signature PSEUDO_OPS = gs_55
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/buildFlowgraph.sml
+   in
+      functor gs_117 = BuildFlowgraph
+      signature gs_118 = CONTROL_FLOWGRAPH_GEN
+   end
+   local
+      open l13
+   in
+      signature gs_119 = LINE_BREAK
+      structure gs_120 = LineBreak
+   end
+   local
+      open l5
+   in
+      structure gs_121 = Bool
+   end
+   local
+      open l13
+   in
+      structure gs_122 = StringOutStream
+   end
+   local
+      open l9
+   in
+      signature gs_123 = UPDATE_GRAPH_INFO
+      structure gs_124 = UpdateGraphInfo
+   end
+   local
+      signature ASM_STREAM = gs_100
+      structure Annotations = gs_2
+      structure Array = gs_4
+      structure AsmStream = gs_101
+      structure Bool = gs_121
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure Format = gs_116
+      signature GRAPH_IMPLEMENTATION = gs_107
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTIONS = gs_42
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      signature LINE_BREAK = gs_119
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure LineBreak = gs_120
+      structure List = gs_7
+      structure ListMergeSort = gs_69
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure StringOutStream = gs_122
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      signature UPDATE_GRAPH_INFO = gs_123
+      structure UpdateGraphInfo = gs_124
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/cfg.sml
+   in
+      functor gs_125 = ControlFlowGraph
+   end
+   local
+      structure Array = gs_4
+      signature COMPUTE_EXECUTION_FREQUENCIES = gs_57
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      functor CompleteProbsFn = gs_98
+      structure FixedInt = gs_13
+      structure Format = gs_116
+      structure General = gs_14
+      structure Graph = gs_1
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscControl = gs_68
+      structure OS = gs_22
+      signature PROBABILITY = gs_94
+      structure Position = gs_23
+      structure Probability = gs_95
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../frequencies/compute-freqs-fn.sml
+   in
+      functor gs_126 = ComputeFreqsFn
+   end
+   local
+      structure Annotations = gs_2
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../gc-safety/gc-type.sig
+   in
+      signature gs_127 = GC_TYPE
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS = gs_41
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      signature GC_TYPE = gs_127
+      ../gc-safety/gc-cells.sig
+   in
+      signature gs_128 = GC_CELLS
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      signature GC_CELLS = gs_128
+      signature GC_TYPE = gs_127
+      ../gc-safety/gc-cells.sml
+   in
+      functor gs_129 = GCCells
+   end
+   local
+      signature ASM_STREAM = gs_100
+      structure AsmStream = gs_101
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure Format = gs_116
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/printFlowgraph.sml
+   in
+      signature gs_130 = PRINT_FLOWGRAPH
+      functor gs_131 = PrintFlowgraph
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      structure Label = gs_49
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure TextIO = gs_0
+      ../block-placement/jump-chain-elim-fn.sml
+   in
+      functor gs_132 = JumpChainElimFn
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLTREE = gs_50
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree-eval.sig
+   in
+      signature gs_133 = MLTREE_EVAL
+   end
+   local
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      ../ra/ra-flowgraph-part.sig
+   in
+      signature gs_134 = RA_FLOWGRAPH_PARTITIONER
+   end
+   local
+      structure Array = gs_4
+      signature CELLS = gs_41
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      structure RAGraph = gs_65
+      signature RA_FLOWGRAPH = gs_89
+      ../ra/ra.sig
+   in
+      signature gs_135 = RA
+   end
+   local
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscControl = gs_68
+      signature RA = gs_135
+      structure RACore = gs_74
+      signature RA_FLOWGRAPH_PARTITIONER = gs_134
+      ../ra/region-based-ra.sml
+   in
+      functor gs_136 = RegionBasedRA
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLTREE = gs_50
+      structure OS = gs_22
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/pseudo-ops-endian.sig
+   in
+      signature gs_137 = PSEUDO_OPS_ENDIAN
+   end
+   local
+      signature ASSEMBLY_EMITTER = gs_106
+      structure Annotations = gs_2
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Graph = gs_1
+      signature INSTRUCTION_EMITTER = gs_84
+      structure List = gs_7
+      structure PseudoOpsBasisTyp = gs_52
+      ../emit/cfgEmit.sml
+   in
+      functor gs_138 = CFGEmit
+   end
+   local
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      ../instructions/rewrite.sig
+   in
+      signature gs_139 = REWRITE_INSTRUCTIONS
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      ../block-placement/block-placement.sig
+   in
+      signature gs_140 = BLOCK_PLACEMENT
+   end
+   local
+      open l19
+   in
+      functor gs_141 = LeftPriorityQFn
+   end
+   local
+      open l19
+   in
+      structure gs_142 = URef
+   end
+   local
+      signature BLOCK_PLACEMENT = gs_140
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      functor LeftPriorityQFn = gs_141
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscControl = gs_68
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure URef = gs_142
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../block-placement/weighted-block-placement-fn.sml
+   in
+      functor gs_143 = WeightedBlockPlacementFn
+   end
+   local
+      structure Array = gs_4
+      signature BLOCK_PLACEMENT = gs_140
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_1
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../block-placement/default-block-placement.sml
+   in
+      functor gs_144 = DefaultBlockPlacement
+   end
+   local
+      signature BLOCK_PLACEMENT = gs_140
+      signature CONTROL_FLOW_GRAPH = gs_56
+      functor DefaultBlockPlacement = gs_144
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscControl = gs_68
+      functor WeightedBlockPlacementFn = gs_143
+      ../block-placement/block-placement.sml
+   in
+      functor gs_145 = BlockPlacement
+   end
+   local
+      structure Array = gs_4
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      structure ListMergeSort = gs_69
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure RACore = gs_74
+      structure RAGraph = gs_65
+      signature RA_FLOWGRAPH = gs_89
+      signature RA_SPILL = gs_88
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Unsafe = gs_62
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/cluster-ra.sml
+   in
+      functor gs_146 = ClusterRA
+   end
+   local
+      open l9
+   in
+      functor gs_147 = DirectedGraph
+      structure gs_148 = DirectedGraph
+   end
+   local
+      structure Array = gs_4
+      signature DOMINATOR_TREE = gs_108
+      signature GRAPH_IMPLEMENTATION = gs_107
+      structure Graph = gs_1
+      signature LOOP_STRUCTURE = gs_109
+      structure List = gs_7
+      structure URef = gs_142
+      ../ir-archive/loop-structure.sml
+   in
+      functor gs_149 = LoopStructure
+   end
+   local
+      open l13
+   in
+      structure gs_150 = BitSet
+   end
+   local
+      open l9
+   in
+      signature gs_151 = REVERSED_GRAPH_VIEW
+      structure gs_152 = ReversedGraphView
+   end
+   local
+      structure Array = gs_4
+      structure BitSet = gs_150
+      signature DOMINATOR_TREE = gs_108
+      signature GRAPH_IMPLEMENTATION = gs_107
+      structure Graph = gs_1
+      structure List = gs_7
+      signature REVERSED_GRAPH_VIEW = gs_151
+      structure ReversedGraphView = gs_152
+      ../ir-archive/dominator.sml
+   in
+      functor gs_153 = DominatorTree
+   end
+   local
+      structure Annotations = gs_2
+      signature CONTROL_FLOW_GRAPH = gs_56
+      functor DirectedGraph = gs_147
+      structure DirectedGraph = gs_148
+      functor DominatorTree = gs_153
+      structure Graph = gs_1
+      structure List = gs_7
+      functor LoopStructure = gs_149
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscAnnotations = gs_97
+      structure MLRiscControl = gs_68
+      signature PROBABILITY = gs_94
+      structure Probability = gs_95
+      ../frequencies/estimate-loop-probs-fn.sml
+   in
+      functor gs_154 = EstimateLoopProbsFn
+   end
+   local
+      structure Annotations = gs_2
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      structure Label = gs_49
+      structure List = gs_7
+      structure MLRiscAnnotations = gs_97
+      ../emit/asmUtil.sml
+   in
+      signature gs_155 = ASM_FORMAT_UTIL
+      structure gs_156 = AsmFormatUtil
+   end
+   local
+      structure Annotations = gs_2
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      structure RAGraph = gs_65
+      ../ra/ra-spill-types.sml
+   in
+      functor gs_157 = RASpillTypes
+   end
+   local
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      ../ra/arch-spill-instr.sig
+   in
+      signature gs_158 = ARCH_SPILL_INSTR
+   end
+   local
+      structure CTypes = gs_112
+      signature MLTREE = gs_50
+      ../c-calls/c-calls.sig
+   in
+      signature gs_159 = C_CALLS
+   end
+   local
+      signature C_CALLS = gs_159
+      signature MLTREE = gs_50
+      ../c-calls/unimplemented-c-calls.sml
+   in
+      functor gs_160 = UnimplementedCCallsFn
+   end
+   local
+      signature MLTREE = gs_50
+      ../mltree/mltree-size.sig
+   in
+      signature gs_161 = MLTREE_SIZE
+   end
+   local
+      structure Annotations = gs_2
+      structure CellsBasis = gs_40
+      signature MLTREE = gs_50
+      signature MLTREE_SIZE = gs_161
+      ../mltree/mltree-gen.sig
+   in
+      signature gs_162 = MLTREEGEN
+   end
+   local
+      signature MLTREE = gs_50
+      signature MLTREE_SIZE = gs_161
+      ../mltree/mltree-size.sml
+   in
+      functor gs_163 = MLTreeSize
+   end
+   local
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      signature MLTREEGEN = gs_162
+      functor MLTreeSize = gs_163
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree-gen.sml
+   in
+      functor gs_164 = MLTreeGen
+   end
+   local
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      signature MLTREE = gs_50
+      ../mltree/mltree-mult.sig
+   in
+      signature gs_165 = MLTREE_MULT_DIV
+   end
+   local
+      structure Array = gs_4
+      signature CELLS_BASIS = gs_5
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      signature INSTRUCTIONS = gs_42
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      signature MLTREE_MULT_DIV = gs_165
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree-mult.sml
+   in
+      functor gs_166 = MLTreeMult
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../emit/code-string.sig
+   in
+      signature gs_167 = CODE_STRING
+   end
+   local
+      signature CODE_STRING = gs_167
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MC_EMIT = gs_93
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      signature SDI_JUMPS = gs_82
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      structure Word8Vector = gs_92
+      ../backpatch/vlBackPatch.sml
+   in
+      functor gs_168 = BackPatch
+   end
+   local
+      open l5
+   in
+      structure gs_169 = ListPair
+   end
+   local
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      structure List = gs_7
+      structure ListPair = gs_169
+      structure Option = gs_59
+      ../instructions/shuffle.sml
+   in
+      functor gs_170 = Shuffle
+   end
+   local
+      signature INSTRUCTION_STREAM = gs_83
+      signature MLTREE = gs_50
+      ../mltree/mltree-stream.sig
+   in
+      signature gs_171 = MLTREE_STREAM
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      signature INSTRUCTIONS = gs_42
+      signature MLTREE = gs_50
+      signature MLTREEGEN = gs_162
+      signature MLTREE_STREAM = gs_171
+      ../mltree/mltreecomp.sig
+   in
+      signature gs_172 = MLTREECOMP
+      signature gs_173 = MLTREE_EXTENSION_COMP
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      signature MLTREE_EVAL = gs_133
+      structure OS = gs_22
+      signature PSEUDO_OPS_ENDIAN = gs_137
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/pseudo-ops-big.sml
+   in
+      functor gs_174 = PseudoOpsBig
+   end
+   local
+      structure Array = gs_4
+      signature GETREG = gs_78
+      ../ra/getreg.sml
+   in
+      functor gs_175 = GetReg
+   end
+   local
+      structure Label = gs_49
+      signature MLTREE = gs_50
+      structure PseudoOpsBasisTyp = gs_52
+      ../flowgraph/as-pseudo-ops.sig
+   in
+      signature gs_176 = AS_PSEUDO_OPS
+   end
+   local
+      signature AS_PSEUDO_OPS = gs_176
+      structure Atom = gs_51
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure Format = gs_116
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      structure OS = gs_22
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/darwin-pseudo-ops.sml
+   in
+      functor gs_177 = DarwinPseudoOps
+   end
+   local
+      structure List = gs_7
+      signature MLTREE = gs_50
+      ../mltree/mltree-check-ty.sml
+   in
+      functor gs_178 = MLTreeCheckTy
+   end
+   local
+      structure RACore = gs_74
+      structure RAGraph = gs_65
+      signature RA_SPILL_HEURISTICS = gs_66
+      ../ra/chaitin-spillheur.sml
+   in
+      structure gs_179 = ChaitinSpillHeur
+   end
+   local
+      signature CFG_OPTIMIZATION = gs_113
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscControl = gs_68
+      signature SDI_JUMPS = gs_82
+      ../flowgraph/cfgCountCopies.sml
+   in
+      functor gs_180 = CFGCountCopies
+   end
+   local
+      signature INSTRUCTIONS = gs_42
+      signature PROBABILITY = gs_94
+      structure Probability = gs_95
+      ../instructions/freqProps.sig
+   in
+      signature gs_181 = FREQUENCY_PROPERTIES
+   end
+   local
+      signature FREQUENCY_PROPERTIES = gs_181
+      signature INSN_PROPERTIES = gs_80
+      structure MLRiscAnnotations = gs_97
+      signature PROBABILITY = gs_94
+      structure Probability = gs_95
+      ../instructions/freqProps.sml
+   in
+      functor gs_182 = FreqProps
+   end
+   local
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLTREE = gs_50
+      signature MLTREE_EVAL = gs_133
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree-eval.sml
+   in
+      functor gs_183 = MLTreeEval
+   end
+   local
+      structure Array = gs_4
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      signature RA = gs_135
+      structure RACore = gs_74
+      signature RA_FLOWGRAPH = gs_89
+      signature RA_SPILL_HEURISTICS = gs_66
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure TextIO = gs_0
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/ra.sml
+   in
+      functor gs_184 = RegisterAllocator
+   end
+   local
+      signature ARCH_SPILL_INSTR = gs_158
+      structure Annotations = gs_2
+      structure Array = gs_4
+      signature CFG_OPTIMIZATION = gs_113
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      functor ClusterRA = gs_146
+      structure FixedInt = gs_13
+      structure General = gs_14
+      functor GetReg = gs_175
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTIONS = gs_42
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure List = gs_7
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure RAGraph = gs_65
+      signature RA_SPILL = gs_88
+      signature RA_SPILL_HEURISTICS = gs_66
+      signature REWRITE_INSTRUCTIONS = gs_139
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      functor RegisterAllocator = gs_184
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/risc-ra.sml
+   in
+      functor gs_185 = RISC_RA
+   end
+   local
+      signature DELAY_SLOT_PROPERTIES = gs_81
+      signature INSTRUCTIONS = gs_42
+      ../backpatch/noDelaySlots.sml
+   in
+      functor gs_186 = NoDelaySlots
+   end
+   local
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure RACore = gs_74
+      functor RASpillTypes = gs_157
+      signature RA_SPILL = gs_88
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/ra-spill.sml
+   in
+      functor gs_187 = RASpill
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Graph = gs_1
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntHashTable = gs_58
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../ra/liveness.sml
+   in
+      signature gs_188 = LIVENESS
+      functor gs_189 = Liveness
+   end
+   local
+      structure Array = gs_4
+      signature CELLS = gs_41
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../instructions/cells.sml
+   in
+      functor gs_190 = Cells
+   end
+   local
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE_BASIS = gs_45
+      ../mltree/mltree-basis.sml
+   in
+      structure gs_191 = MLTreeBasis
+   end
+   local
+      structure Annotations = gs_2
+      signature INSTRUCTION_STREAM = gs_83
+      structure Label = gs_49
+      signature PSEUDO_OPS = gs_55
+      ../instructions/stream.sml
+   in
+      functor gs_192 = InstructionStream
+   end
+   local
+      signature AS_PSEUDO_OPS = gs_176
+      structure Atom = gs_51
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure Format = gs_116
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      structure OS = gs_22
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/gasPseudoOps.sml
+   in
+      functor gs_193 = GasPseudoOps
+   end
+   local
+      signature INSTRUCTION_STREAM = gs_83
+      signature MLTREE = gs_50
+      signature MLTREE_STREAM = gs_171
+      ../mltree/mltree-stream.sml
+   in
+      functor gs_194 = MLTreeStream
+   end
+   local
+      structure Annotations = gs_2
+      signature CONSTANT = gs_47
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLTREE = gs_50
+      signature MLTREE_EXTENSION = gs_44
+      structure MLTreeBasis = gs_191
+      structure MachineInt = gs_103
+      structure OS = gs_22
+      structure Position = gs_23
+      signature REGION = gs_46
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../mltree/mltree.sml
+   in
+      functor gs_195 = MLTreeF
+   end
+   local
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure Label = gs_49
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature MLTREE = gs_50
+      signature MLTREE_EVAL = gs_133
+      structure OS = gs_22
+      signature PSEUDO_OPS_ENDIAN = gs_137
+      structure Position = gs_23
+      structure PseudoOpsBasisTyp = gs_52
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../flowgraph/pseudo-ops-little.sml
+   in
+      functor gs_196 = PseudoOpsLittle
+   end
+   local
+      signature MLRISC_CONTROL = gs_67
+      structure MLRiscControl = gs_68
+      ../emit/asm-flags.sml
+   in
+      structure gs_197 = AsmFlags
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_56
+      structure Graph = gs_1
+      signature INSN_PROPERTIES = gs_80
+      signature INSTRUCTION_EMITTER = gs_84
+      structure Label = gs_49
+      structure List = gs_7
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscErrorMsg = gs_9
+      signature SDI_JUMPS = gs_82
+      ../backpatch/backpatch.sml
+   in
+      functor gs_198 = BBSched2
+   end
+   local
+      signature CLIENT_PSEUDO_OPS = gs_54
+      signature PSEUDO_OPS = gs_55
+      structure PseudoOpsBasisTyp = gs_52
+      ../flowgraph/pseudo-ops.sml
+   in
+      functor gs_199 = PseudoOps
+   end
+   local
+      structure CellsBasis = gs_40
+      structure Char = gs_10
+      structure CharArray = gs_11
+      structure CharVector = gs_12
+      structure FixedInt = gs_13
+      structure General = gs_14
+      structure Int = gs_15
+      structure Int32 = gs_16
+      structure Int64 = gs_17
+      structure IntInf = gs_18
+      structure LargeInt = gs_19
+      structure LargeReal = gs_20
+      structure LargeWord = gs_21
+      structure ListMergeSort = gs_69
+      signature MLRISC_CONTROL = gs_67
+      signature MLRISC_ERROR_MSG = gs_8
+      structure MLRiscControl = gs_68
+      structure MLRiscErrorMsg = gs_9
+      structure OS = gs_22
+      signature POINTS_TO = gs_110
+      structure Position = gs_23
+      structure Real = gs_24
+      structure Real64 = gs_25
+      structure RealArray = gs_26
+      structure RealArraySlice = gs_27
+      structure RealVector = gs_28
+      structure RealVectorSlice = gs_29
+      structure SMLofNJ = gs_30
+      structure Socket = gs_31
+      structure String = gs_32
+      structure Substring = gs_33
+      structure SysWord = gs_34
+      structure Time = gs_35
+      structure Word = gs_36
+      structure Word32 = gs_37
+      structure Word64 = gs_38
+      structure Word8 = gs_39
+      ../aliasing/pointsTo.sml
+   in
+      structure gs_200 = PointsTo
+   end
+in
+   signature ARCH_SPILL_INSTR = gs_158
+   signature ASM_FORMAT_UTIL = gs_155
+   signature ASM_STREAM = gs_100
+   signature ASSEMBLY_EMITTER = gs_106
+   signature AS_PSEUDO_OPS = gs_176
+   structure AsmFlags = gs_197
+   structure AsmFormatUtil = gs_156
+   structure AsmStream = gs_101
+   signature BBSCHED = gs_79
+   functor BBSched2 = gs_198
+   signature BLOCK_PLACEMENT = gs_140
+   functor BackPatch = gs_168
+   functor BlockPlacement = gs_145
+   functor BuildFlowgraph = gs_117
+   signature CELLS = gs_41
+   signature CELLS_BASIS = gs_5
+   functor CFGCountCopies = gs_180
+   functor CFGEmit = gs_138
+   functor CFGExpandCopies = gs_115
+   signature CFG_OPTIMIZATION = gs_113
+   signature CLIENT_PSEUDO_OPS = gs_54
+   signature CODE_STRING = gs_167
+   signature COMPUTE_EXECUTION_FREQUENCIES = gs_57
+   signature CONSTANT = gs_47
+   signature CONTROL_FLOWGRAPH_GEN = gs_118
+   signature CONTROL_FLOW_GRAPH = gs_56
+   structure CTypes = gs_112
+   signature C_CALLS = gs_159
+   functor Cells = gs_190
+   structure CellsBasis = gs_40
+   structure ChaitinSpillHeur = gs_179
+   functor CheckPlacementFn = gs_105
+   structure ChowHennessySpillHeur = gs_75
+   functor ClusterRA = gs_146
+   functor CompleteProbsFn = gs_98
+   functor ComputeFreqsFn = gs_126
+   functor ControlFlowGraph = gs_125
+   signature DELAY_SLOT_PROPERTIES = gs_81
+   signature DOMINATOR_TREE = gs_108
+   functor DarwinPseudoOps = gs_177
+   functor DefaultBlockPlacement = gs_144
+   functor DominatorTree = gs_153
+   functor EstimateLoopProbsFn = gs_154
+   signature FREQUENCY_PROPERTIES = gs_181
+   functor FreqProps = gs_182
+   functor GCCells = gs_129
+   signature GC_CELLS = gs_128
+   signature GC_TYPE = gs_127
+   signature GETREG = gs_78
+   functor GasPseudoOps = gs_193
+   functor GetReg = gs_175
+   functor GetReg2 = gs_104
+   signature INSN_PROPERTIES = gs_80
+   signature INSTRUCTIONS = gs_42
+   signature INSTRUCTION_EMITTER = gs_84
+   signature INSTRUCTION_STREAM = gs_83
+   functor InstructionStream = gs_192
+   functor JumpChainElimFn = gs_132
+   signature LABEL = gs_48
+   signature LIVENESS = gs_188
+   signature LOOP_STRUCTURE = gs_109
+   structure Label = gs_49
+   functor Liveness = gs_189
+   functor LoopStructure = gs_149
+   signature MACHINE_INT = gs_43
+   signature MC_EMIT = gs_93
+   signature MLRISC_ANNOTATIONS = gs_96
+   signature MLRISC_OPTIMIZATION = gs_99
+   signature MLRISC_REGION = gs_76
+   structure MLRiscAnnotations = gs_97
+   structure MLRiscRegion = gs_77
+   signature MLTREE = gs_50
+   signature MLTREECOMP = gs_172
+   signature MLTREEGEN = gs_162
+   signature MLTREE_BASIS = gs_45
+   signature MLTREE_EVAL = gs_133
+   signature MLTREE_EXTENSION = gs_44
+   signature MLTREE_EXTENSION_COMP = gs_173
+   signature MLTREE_HASH = gs_86
+   signature MLTREE_MULT_DIV = gs_165
+   signature MLTREE_SIZE = gs_161
+   signature MLTREE_STREAM = gs_171
+   structure MLTreeBasis = gs_191
+   functor MLTreeCheckTy = gs_178
+   functor MLTreeEval = gs_183
+   functor MLTreeF = gs_195
+   functor MLTreeGen = gs_164
+   functor MLTreeHash = gs_87
+   functor MLTreeMult = gs_166
+   functor MLTreeSize = gs_163
+   functor MLTreeStream = gs_194
+   structure MachineInt = gs_103
+   functor MemoryRA = gs_90
+   functor NoDelaySlots = gs_186
+   signature OMIT_FRAME_POINTER = gs_111
+   signature POINTS_TO = gs_110
+   signature PRINT_FLOWGRAPH = gs_130
+   signature PSEUDO_OPS = gs_55
+   signature PSEUDO_OPS_BASIS = gs_53
+   signature PSEUDO_OPS_ENDIAN = gs_137
+   structure PointsTo = gs_200
+   functor PrintFlowgraph = gs_131
+   functor PseudoOps = gs_199
+   structure PseudoOpsBasisTyp = gs_52
+   functor PseudoOpsBig = gs_174
+   functor PseudoOpsLittle = gs_196
+   signature RA = gs_135
+   structure RACore = gs_74
+   functor RADeadCodeElim = gs_91
+   structure RAGraph = gs_65
+   functor RASpill = gs_187
+   functor RASpillTypes = gs_157
+   signature RA_BITMATRIX = gs_61
+   signature RA_CORE = gs_72
+   signature RA_FLOWGRAPH = gs_89
+   signature RA_FLOWGRAPH_PARTITIONER = gs_134
+   signature RA_GRAPH = gs_64
+   signature RA_PRIORITY_QUEUE = gs_71
+   signature RA_SPILL = gs_88
+   signature RA_SPILL_HEURISTICS = gs_66
+   signature REGION = gs_46
+   signature REWRITE_INSTRUCTIONS = gs_139
+   functor RISC_RA = gs_185
+   structure RaBitmatrix = gs_63
+   functor RaPriQueue = gs_73
+   functor RegionBasedRA = gs_136
+   functor RegisterAllocator = gs_184
+   signature SDI_JUMPS = gs_82
+   signature SHUFFLE = gs_114
+   functor Shuffle = gs_170
+   functor SpanDependencyResolution = gs_85
+   functor UnimplementedCCallsFn = gs_160
+   functor WeightedBlockPlacementFn = gs_143
+end
+end
+
+end
diff --git a/mlb/MLTREE.mlb b/mlb/MLTREE.mlb
new file mode 100644
index 0000000..63a1a61
--- /dev/null
+++ b/mlb/MLTREE.mlb
@@ -0,0 +1,274 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l43 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l48 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l17 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = CONTROL_FLOW_GRAPH
+   end
+   local
+      open l4
+   in
+      signature gs_1 = INSTRUCTION_STREAM
+   end
+   local
+      open l4
+   in
+      signature gs_2 = INSTRUCTIONS
+   end
+   local
+      open l4
+   in
+      signature gs_3 = CELLS
+   end
+   local
+      open l17
+   in
+      structure gs_4 = Annotations
+   end
+   local
+      structure Annotations = gs_4
+      signature CELLS = gs_3
+      signature CONTROL_FLOW_GRAPH = gs_0
+      signature INSTRUCTIONS = gs_2
+      signature INSTRUCTION_STREAM = gs_1
+      ../mltree/instr-gen.sig
+   in
+      signature gs_5 = INSTR_GEN
+   end
+   local
+      open l4
+   in
+      signature gs_6 = MLTREE
+   end
+   local
+      signature MLTREE = gs_6
+      ../mltree/mltree-simplify.sig
+   in
+      signature gs_7 = MLTREE_SIMPLIFIER
+   end
+   local
+      signature MLTREE = gs_6
+      ../mltree/mltree-utils.sig
+   in
+      signature gs_8 = MLTREE_UTILS
+   end
+   local
+      signature MLTREE = gs_6
+      ../mltree/mltree-fold.sig
+   in
+      signature gs_9 = MLTREE_FOLD
+   end
+   local
+      open l4
+   in
+      structure gs_10 = CellsBasis
+   end
+   local
+      open l4
+   in
+      structure gs_11 = Label
+   end
+   local
+      open l43
+   in
+      structure gs_12 = List
+   end
+   local
+      open l48
+   in
+      signature gs_13 = MLRISC_ERROR_MSG
+      structure gs_14 = MLRiscErrorMsg
+   end
+   local
+      open l43
+   in
+      structure gs_15 = Char
+      structure gs_16 = CharArray
+      structure gs_17 = CharVector
+      structure gs_18 = FixedInt
+      structure gs_19 = General
+      structure gs_20 = Int
+      structure gs_21 = Int32
+      structure gs_22 = Int64
+      structure gs_23 = IntInf
+      structure gs_24 = LargeInt
+      structure gs_25 = LargeReal
+      structure gs_26 = LargeWord
+      structure gs_27 = OS
+      structure gs_28 = Position
+      structure gs_29 = Real
+      structure gs_30 = Real64
+      structure gs_31 = RealArray
+      structure gs_32 = RealArraySlice
+      structure gs_33 = RealVector
+      structure gs_34 = RealVectorSlice
+      structure gs_35 = SMLofNJ
+      structure gs_36 = Socket
+      structure gs_37 = String
+      structure gs_38 = Substring
+      structure gs_39 = SysWord
+      structure gs_40 = Time
+      structure gs_41 = Word
+      structure gs_42 = Word32
+      structure gs_43 = Word64
+      structure gs_44 = Word8
+   end
+   local
+      structure CellsBasis = gs_10
+      structure Char = gs_15
+      structure CharArray = gs_16
+      structure CharVector = gs_17
+      structure FixedInt = gs_18
+      structure General = gs_19
+      structure Int = gs_20
+      structure Int32 = gs_21
+      structure Int64 = gs_22
+      structure IntInf = gs_23
+      structure Label = gs_11
+      structure LargeInt = gs_24
+      structure LargeReal = gs_25
+      structure LargeWord = gs_26
+      structure List = gs_12
+      signature MLRISC_ERROR_MSG = gs_13
+      structure MLRiscErrorMsg = gs_14
+      signature MLTREE = gs_6
+      signature MLTREE_UTILS = gs_8
+      structure OS = gs_27
+      structure Position = gs_28
+      structure Real = gs_29
+      structure Real64 = gs_30
+      structure RealArray = gs_31
+      structure RealArraySlice = gs_32
+      structure RealVector = gs_33
+      structure RealVectorSlice = gs_34
+      structure SMLofNJ = gs_35
+      structure Socket = gs_36
+      structure String = gs_37
+      structure Substring = gs_38
+      structure SysWord = gs_39
+      structure Time = gs_40
+      structure Word = gs_41
+      structure Word32 = gs_42
+      structure Word64 = gs_43
+      structure Word8 = gs_44
+      ../mltree/mltree-utils.sml
+   in
+      functor gs_45 = MLTreeUtils
+   end
+   local
+      signature MLTREE = gs_6
+      ../mltree/mltree-rewrite.sig
+   in
+      signature gs_46 = MLTREE_REWRITE
+   end
+   local
+      signature MLTREE = gs_6
+      signature MLTREE_REWRITE = gs_46
+      ../mltree/mltree-rewrite.sml
+   in
+      functor gs_47 = MLTreeRewrite
+   end
+   local
+      signature MLTREE = gs_6
+      signature MLTREE_FOLD = gs_9
+      ../mltree/mltree-fold.sml
+   in
+      functor gs_48 = MLTreeFold
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_0
+      signature INSTRUCTIONS = gs_2
+      signature INSTRUCTION_STREAM = gs_1
+      signature INSTR_GEN = gs_5
+      signature MLRISC_ERROR_MSG = gs_13
+      structure MLRiscErrorMsg = gs_14
+      ../mltree/instr-gen.sml
+   in
+      functor gs_49 = InstrGen
+   end
+   local
+      open l4
+   in
+      signature gs_50 = MLTREE_SIZE
+   end
+   local
+      structure Char = gs_15
+      structure CharArray = gs_16
+      structure CharVector = gs_17
+      structure FixedInt = gs_18
+      structure General = gs_19
+      structure Int = gs_20
+      structure Int32 = gs_21
+      structure Int64 = gs_22
+      structure IntInf = gs_23
+      structure LargeInt = gs_24
+      structure LargeReal = gs_25
+      structure LargeWord = gs_26
+      signature MLTREE = gs_6
+      signature MLTREE_SIMPLIFIER = gs_7
+      signature MLTREE_SIZE = gs_50
+      functor MLTreeRewrite = gs_47
+      structure OS = gs_27
+      structure Position = gs_28
+      structure Real = gs_29
+      structure Real64 = gs_30
+      structure RealArray = gs_31
+      structure RealArraySlice = gs_32
+      structure RealVector = gs_33
+      structure RealVectorSlice = gs_34
+      structure SMLofNJ = gs_35
+      structure Socket = gs_36
+      structure String = gs_37
+      structure Substring = gs_38
+      structure SysWord = gs_39
+      structure Time = gs_40
+      structure Word = gs_41
+      structure Word32 = gs_42
+      structure Word64 = gs_43
+      structure Word8 = gs_44
+      ../mltree/mltree-simplify.sml
+   in
+      functor gs_51 = MLTreeSimplifier
+   end
+in
+   signature INSTR_GEN = gs_5
+   functor InstrGen = gs_49
+   signature MLTREE_FOLD = gs_9
+   signature MLTREE_REWRITE = gs_46
+   signature MLTREE_SIMPLIFIER = gs_7
+   signature MLTREE_UTILS = gs_8
+   functor MLTreeFold = gs_48
+   functor MLTreeRewrite = gs_47
+   functor MLTreeSimplifier = gs_51
+   functor MLTreeUtils = gs_45
+end
+end
+
+end
diff --git a/mlb/PPC.mlb b/mlb/PPC.mlb
new file mode 100644
index 0000000..057fc41
--- /dev/null
+++ b/mlb/PPC.mlb
@@ -0,0 +1,830 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l48 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l139 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l12 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l74 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = INSTRUCTION_EMITTER
+   end
+   local
+      open l4
+   in
+      structure gs_1 = Label
+   end
+   local
+      open l12
+   in
+      signature gs_2 = MLRISC_ERROR_MSG
+      structure gs_3 = MLRiscErrorMsg
+   end
+   local
+      open l4
+   in
+      structure gs_4 = CellsBasis
+   end
+   local
+      open l48
+   in
+      structure gs_5 = Char
+      structure gs_6 = CharArray
+      structure gs_7 = CharVector
+      structure gs_8 = FixedInt
+      structure gs_9 = General
+      structure gs_10 = Int
+      structure gs_11 = Int32
+      structure gs_12 = Int64
+      structure gs_13 = IntInf
+      structure gs_14 = LargeInt
+      structure gs_15 = LargeReal
+      structure gs_16 = LargeWord
+      structure gs_17 = OS
+      structure gs_18 = Position
+      structure gs_19 = Real
+      structure gs_20 = Real64
+      structure gs_21 = RealArray
+      structure gs_22 = RealArraySlice
+      structure gs_23 = RealVector
+      structure gs_24 = RealVectorSlice
+      structure gs_25 = SMLofNJ
+      structure gs_26 = Socket
+      structure gs_27 = String
+      structure gs_28 = Substring
+      structure gs_29 = SysWord
+      structure gs_30 = Time
+      structure gs_31 = Word
+      structure gs_32 = Word32
+      structure gs_33 = Word64
+      structure gs_34 = Word8
+   end
+   local
+      open l4
+   in
+      signature gs_35 = CODE_STRING
+   end
+   local
+      open l4
+   in
+      signature gs_36 = INSTRUCTION_STREAM
+   end
+   local
+      open l4
+   in
+      signature gs_37 = MLTREE_EVAL
+   end
+   local
+      open l4
+   in
+      signature gs_38 = REGION
+   end
+   local
+      open l4
+   in
+      signature gs_39 = CONSTANT
+   end
+   local
+      open l4
+   in
+      signature gs_40 = MLTREE
+   end
+   local
+      open l4
+   in
+      signature gs_41 = CELLS_BASIS
+   end
+   local
+      open l74
+   in
+      structure gs_42 = Annotations
+   end
+   local
+      open l4
+   in
+      functor gs_43 = Cells
+   end
+   local
+      open l4
+   in
+      signature gs_44 = CELLS
+   end
+   local
+      open l12
+   in
+      signature gs_45 = MLRISC_CONTROL
+      structure gs_46 = MLRiscControl
+   end
+   local
+      signature MLRISC_CONTROL = gs_45
+      structure MLRiscControl = gs_46
+      ../ppc/emit/ppcAsmSyntax.sml
+   in
+      structure gs_47 = PPCAsmSyntax
+   end
+   local
+      signature CELLS = gs_44
+      functor Cells = gs_43
+      structure CellsBasis = gs_4
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      structure OS = gs_17
+      structure PPCAsmSyntax = gs_47
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/instructions/ppcCells.sml
+   in
+      signature gs_48 = PPCCELLS
+      structure gs_49 = PPCCells
+   end
+   local
+      structure Annotations = gs_42
+      signature CELLS_BASIS = gs_41
+      signature CONSTANT = gs_39
+      structure CellsBasis = gs_4
+      structure Label = gs_1
+      signature MLTREE = gs_40
+      signature PPCCELLS = gs_48
+      structure PPCCells = gs_49
+      signature REGION = gs_38
+      ../ppc/instructions/ppcInstr.sml
+   in
+      signature gs_50 = PPCINSTR
+      functor gs_51 = PPCInstr
+   end
+   local
+      signature CODE_STRING = gs_35
+      structure CellsBasis = gs_4
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      signature INSTRUCTION_EMITTER = gs_0
+      signature INSTRUCTION_STREAM = gs_36
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_1
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE_EVAL = gs_37
+      structure OS = gs_17
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/emit/ppcMC.sml
+   in
+      functor gs_52 = PPCMCEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_53 = SDI_JUMPS
+   end
+   local
+      structure CellsBasis = gs_4
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      ../ppc/instructions/ppcShuffle.sig
+   in
+      signature gs_54 = PPCSHUFFLE
+   end
+   local
+      structure CellsBasis = gs_4
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_CONTROL = gs_45
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscControl = gs_46
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE_EVAL = gs_37
+      structure OS = gs_17
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      signature PPCSHUFFLE = gs_54
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      signature SDI_JUMPS = gs_53
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/backpatch/ppcJumps.sml
+   in
+      functor gs_55 = PPCJumps
+   end
+   local
+      open l4
+   in
+      functor gs_56 = Shuffle
+   end
+   local
+      structure CellsBasis = gs_4
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      functor Shuffle = gs_56
+      ../ppc/instructions/ppcShuffle.sml
+   in
+      functor gs_57 = PPCShuffle
+   end
+   local
+      open l4
+   in
+      signature gs_58 = ARCH_SPILL_INSTR
+   end
+   local
+      structure CellsBasis = gs_4
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      ../ppc/ra/ppcRewrite.sml
+   in
+      functor gs_59 = PPCRewrite
+   end
+   local
+      signature ARCH_SPILL_INSTR = gs_58
+      structure CellsBasis = gs_4
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      functor PPCRewrite = gs_59
+      ../ppc/ra/ppcSpillInstr.sml
+   in
+      functor gs_60 = PPCSpillInstr
+   end
+   local
+      open l4
+   in
+      signature gs_61 = PSEUDO_OPS_BASIS
+   end
+   local
+      open l4
+   in
+      functor gs_62 = PseudoOpsBig
+   end
+   local
+      open l139
+   in
+      structure gs_63 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_64 = PseudoOpsBasisTyp
+   end
+   local
+      open l139
+   in
+      structure gs_65 = Atom
+   end
+   local
+      structure Atom = gs_65
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure Format = gs_63
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_1
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE = gs_40
+      signature MLTREE_EVAL = gs_37
+      structure OS = gs_17
+      signature PSEUDO_OPS_BASIS = gs_61
+      structure Position = gs_18
+      structure PseudoOpsBasisTyp = gs_64
+      functor PseudoOpsBig = gs_62
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/flowgraph/ppcDarwinPseudoOps.sml
+   in
+      functor gs_66 = PPCDarwinPseudoOps
+   end
+   local
+      ../ppc/instructions/ppcInstrExt.sml
+   in
+      structure gs_67 = PPCInstrExt
+   end
+   local
+      open l4
+   in
+      signature gs_68 = CONTROL_FLOW_GRAPH
+   end
+   local
+      open l4
+   in
+      signature gs_69 = MLTREE_STREAM
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_68
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE_STREAM = gs_69
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      structure PPCInstrExt = gs_67
+      ../ppc/instructions/ppcCompInstrExt.sml
+   in
+      signature gs_70 = PPCCOMP_INSTR_EXT
+      functor gs_71 = PPCCompInstrExt
+   end
+   local
+      open l4
+   in
+      signature gs_72 = DELAY_SLOT_PROPERTIES
+   end
+   local
+      open l4
+   in
+      signature gs_73 = INSN_PROPERTIES
+   end
+   local
+      signature DELAY_SLOT_PROPERTIES = gs_72
+      signature INSN_PROPERTIES = gs_73
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      ../ppc/backpatch/ppcDelaySlots.sml
+   in
+      functor gs_74 = PPCDelaySlots
+   end
+   local
+      open l4
+   in
+      signature gs_75 = FREQUENCY_PROPERTIES
+   end
+   local
+      open l4
+   in
+      structure gs_76 = MLRiscAnnotations
+   end
+   local
+      open l74
+   in
+      signature gs_77 = PROBABILITY
+      structure gs_78 = Probability
+   end
+   local
+      signature FREQUENCY_PROPERTIES = gs_75
+      structure MLRiscAnnotations = gs_76
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      signature PROBABILITY = gs_77
+      structure Probability = gs_78
+      ../ppc/instructions/ppcFreqProps.sml
+   in
+      functor gs_79 = PPCFreqProps
+   end
+   local
+      open l4
+   in
+      structure gs_80 = CTypes
+   end
+   local
+      open l48
+   in
+      structure gs_81 = List
+   end
+   local
+      open l4
+   in
+      signature gs_82 = C_CALLS
+   end
+   local
+      structure CTypes = gs_80
+      signature C_CALLS = gs_82
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      structure List = gs_81
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscAnnotations = gs_76
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE = gs_40
+      structure OS = gs_17
+      signature PPCCELLS = gs_48
+      structure PPCCells = gs_49
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/c-calls/ppc-macosx.sml
+   in
+      functor gs_83 = PPCMacOSX_CCalls
+      signature gs_84 = PPC_MACOSX_C_CALLS
+   end
+   local
+      open l4
+   in
+      functor gs_85 = GasPseudoOps
+   end
+   local
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure Format = gs_63
+      functor GasPseudoOps = gs_85
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE = gs_40
+      signature MLTREE_EVAL = gs_37
+      structure OS = gs_17
+      signature PSEUDO_OPS_BASIS = gs_61
+      structure Position = gs_18
+      structure PseudoOpsBasisTyp = gs_64
+      functor PseudoOpsBig = gs_62
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/flowgraph/ppcGasPseudoOps.sml
+   in
+      functor gs_86 = PPCGasPseudoOps
+   end
+   local
+      open l48
+   in
+      structure gs_87 = TextIO
+   end
+   local
+      open l4
+   in
+      signature gs_88 = ASM_STREAM
+      structure gs_89 = AsmStream
+   end
+   local
+      open l4
+   in
+      signature gs_90 = ASM_FORMAT_UTIL
+      structure gs_91 = AsmFormatUtil
+   end
+   local
+      open l4
+   in
+      structure gs_92 = AsmFlags
+   end
+   local
+      signature ASM_FORMAT_UTIL = gs_90
+      signature ASM_STREAM = gs_88
+      structure Annotations = gs_42
+      structure AsmFlags = gs_92
+      structure AsmFormatUtil = gs_91
+      structure AsmStream = gs_89
+      structure CellsBasis = gs_4
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      signature INSTRUCTION_EMITTER = gs_0
+      signature INSTRUCTION_STREAM = gs_36
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE_EVAL = gs_37
+      structure OS = gs_17
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      signature PPCSHUFFLE = gs_54
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure TextIO = gs_87
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/emit/ppcAsm.sml
+   in
+      functor gs_93 = PPCAsmEmitter
+   end
+   local
+      structure CellsBasis = gs_4
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      ../ppc/mltree/ppcPseudoInstr.sig
+   in
+      signature gs_94 = PPC_PSEUDO_INSTR
+   end
+   local
+      open l4
+   in
+      functor gs_95 = MLTreeMult
+   end
+   local
+      open l4
+   in
+      functor gs_96 = MLTreeGen
+   end
+   local
+      open l4
+   in
+      signature gs_97 = MLTREECOMP
+      signature gs_98 = MLTREE_EXTENSION_COMP
+   end
+   local
+      structure CellsBasis = gs_4
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_1
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscAnnotations = gs_76
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREECOMP = gs_97
+      signature MLTREE_EXTENSION_COMP = gs_98
+      functor MLTreeGen = gs_96
+      functor MLTreeMult = gs_95
+      structure OS = gs_17
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      signature PPC_PSEUDO_INSTR = gs_94
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/mltree/ppc.sml
+   in
+      functor gs_99 = PPC
+   end
+   local
+      open l4
+   in
+      signature gs_100 = MLTREE_HASH
+   end
+   local
+      structure CellsBasis = gs_4
+      structure Char = gs_5
+      structure CharArray = gs_6
+      structure CharVector = gs_7
+      structure FixedInt = gs_8
+      structure General = gs_9
+      signature INSN_PROPERTIES = gs_73
+      structure Int = gs_10
+      structure Int32 = gs_11
+      structure Int64 = gs_12
+      structure IntInf = gs_13
+      structure Label = gs_1
+      structure LargeInt = gs_14
+      structure LargeReal = gs_15
+      structure LargeWord = gs_16
+      signature MLRISC_ERROR_MSG = gs_2
+      structure MLRiscErrorMsg = gs_3
+      signature MLTREE_EVAL = gs_37
+      signature MLTREE_HASH = gs_100
+      structure OS = gs_17
+      signature PPCINSTR = gs_50
+      functor PPCInstr = gs_51
+      structure Position = gs_18
+      structure Real = gs_19
+      structure Real64 = gs_20
+      structure RealArray = gs_21
+      structure RealArraySlice = gs_22
+      structure RealVector = gs_23
+      structure RealVectorSlice = gs_24
+      structure SMLofNJ = gs_25
+      structure Socket = gs_26
+      structure String = gs_27
+      structure Substring = gs_28
+      structure SysWord = gs_29
+      structure Time = gs_30
+      structure Word = gs_31
+      structure Word32 = gs_32
+      structure Word64 = gs_33
+      structure Word8 = gs_34
+      ../ppc/instructions/ppcProps.sml
+   in
+      functor gs_101 = PPCProps
+   end
+in
+   functor PPC = gs_99
+   functor PPCAsmEmitter = gs_93
+   structure PPCAsmSyntax = gs_47
+   signature PPCCELLS = gs_48
+   signature PPCCOMP_INSTR_EXT = gs_70
+   structure PPCCells = gs_49
+   functor PPCCompInstrExt = gs_71
+   functor PPCDarwinPseudoOps = gs_66
+   functor PPCDelaySlots = gs_74
+   functor PPCFreqProps = gs_79
+   functor PPCGasPseudoOps = gs_86
+   signature PPCINSTR = gs_50
+   functor PPCInstr = gs_51
+   structure PPCInstrExt = gs_67
+   functor PPCJumps = gs_55
+   functor PPCMCEmitter = gs_52
+   functor PPCMacOSX_CCalls = gs_83
+   functor PPCProps = gs_101
+   functor PPCRewrite = gs_59
+   signature PPCSHUFFLE = gs_54
+   functor PPCShuffle = gs_57
+   functor PPCSpillInstr = gs_60
+   signature PPC_PSEUDO_INSTR = gs_94
+end
+end
+
+end
diff --git a/mlb/Peephole.mlb b/mlb/Peephole.mlb
new file mode 100644
index 0000000..b7b7e43
--- /dev/null
+++ b/mlb/Peephole.mlb
@@ -0,0 +1,63 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l8 =
+    bas
+      (* $Graphs.cm(=(proxyLib.cm):.)/Graphs.cm =??=> *) Graphs.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = CFG_OPTIMIZATION
+   end
+   local
+      open l8
+   in
+      structure gs_1 = Graph
+   end
+   local
+      open l4
+   in
+      signature gs_2 = CONTROL_FLOW_GRAPH
+   end
+   local
+      open l4
+   in
+      signature gs_3 = INSTRUCTIONS
+   end
+   local
+      signature INSTRUCTIONS = gs_3
+      ../instructions/peephole.sig
+   in
+      signature gs_4 = PEEPHOLE
+   end
+   local
+      signature CFG_OPTIMIZATION = gs_0
+      signature CONTROL_FLOW_GRAPH = gs_2
+      structure Graph = gs_1
+      signature PEEPHOLE = gs_4
+      ../flowgraph/cfgPeephole.sml
+   in
+      functor gs_5 = CFGPeephole
+   end
+in
+   functor CFGPeephole = gs_5
+   signature PEEPHOLE = gs_4
+end
+end
+
+end
diff --git a/mlb/RA.mlb b/mlb/RA.mlb
new file mode 100644
index 0000000..966c29b
--- /dev/null
+++ b/mlb/RA.mlb
@@ -0,0 +1,259 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l37 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l41 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l76 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l51 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = RA_SPILL_HEURISTICS
+   end
+   local
+      open l37
+   in
+      structure gs_1 = Char
+      structure gs_2 = CharArray
+      structure gs_3 = CharVector
+      structure gs_4 = FixedInt
+      structure gs_5 = General
+      structure gs_6 = Int
+      structure gs_7 = Int32
+      structure gs_8 = Int64
+      structure gs_9 = IntInf
+      structure gs_10 = LargeInt
+      structure gs_11 = LargeReal
+      structure gs_12 = LargeWord
+      structure gs_13 = OS
+      structure gs_14 = Position
+      structure gs_15 = Real
+      structure gs_16 = Real64
+      structure gs_17 = RealArray
+      structure gs_18 = RealArraySlice
+      structure gs_19 = RealVector
+      structure gs_20 = RealVectorSlice
+      structure gs_21 = SMLofNJ
+      structure gs_22 = Socket
+      structure gs_23 = String
+      structure gs_24 = Substring
+      structure gs_25 = SysWord
+      structure gs_26 = Time
+      structure gs_27 = Word
+      structure gs_28 = Word32
+      structure gs_29 = Word64
+      structure gs_30 = Word8
+   end
+   local
+      open l41
+   in
+      structure gs_31 = IntHashTable
+   end
+   local
+      open l4
+   in
+      structure gs_32 = RACore
+   end
+   local
+      open l37
+   in
+      structure gs_33 = Option
+   end
+   local
+      open l51
+   in
+      structure gs_34 = PriorityHeap
+   end
+   local
+      open l4
+   in
+      structure gs_35 = RAGraph
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntHashTable = gs_31
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Option = gs_33
+      structure Position = gs_14
+      structure PriorityHeap = gs_34
+      structure RACore = gs_32
+      structure RAGraph = gs_35
+      signature RA_SPILL_HEURISTICS = gs_0
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../ra/chow-hennessy-spillheur2.sml
+   in
+      functor gs_36 = ImprovedChowHennessySpillHeur
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure RACore = gs_32
+      structure RAGraph = gs_35
+      signature RA_SPILL_HEURISTICS = gs_0
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../ra/chaitin-spillheur2.sml
+   in
+      functor gs_37 = ImprovedChaitinSpillHeur
+   end
+   local
+      open l4
+   in
+      signature gs_38 = RA_SPILL
+   end
+   local
+      open l4
+   in
+      functor gs_39 = RASpillTypes
+   end
+   local
+      open l4
+   in
+      structure gs_40 = CellsBasis
+   end
+   local
+      open l76
+   in
+      signature gs_41 = MLRISC_ERROR_MSG
+      structure gs_42 = MLRiscErrorMsg
+   end
+   local
+      open l4
+   in
+      signature gs_43 = INSTRUCTION_EMITTER
+   end
+   local
+      open l4
+   in
+      signature gs_44 = INSN_PROPERTIES
+   end
+   local
+      structure CellsBasis = gs_40
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      signature INSN_PROPERTIES = gs_44
+      signature INSTRUCTION_EMITTER = gs_43
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntHashTable = gs_31
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_ERROR_MSG = gs_41
+      structure MLRiscErrorMsg = gs_42
+      structure OS = gs_13
+      structure Position = gs_14
+      structure RACore = gs_32
+      functor RASpillTypes = gs_39
+      signature RA_SPILL = gs_38
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../ra/ra-spill-with-renaming.sml
+   in
+      functor gs_45 = RASpillWithRenaming
+   end
+in
+   functor ImprovedChaitinSpillHeur = gs_37
+   functor ImprovedChowHennessySpillHeur = gs_36
+   functor RASpillWithRenaming = gs_45
+end
+end
+
+end
diff --git a/mlb/SPARC.mlb b/mlb/SPARC.mlb
new file mode 100644
index 0000000..2d83c64
--- /dev/null
+++ b/mlb/SPARC.mlb
@@ -0,0 +1,800 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l60 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l198 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+  basis l68 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l17 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      signature gs_0 = REGION
+   end
+   local
+      open l4
+   in
+      signature gs_1 = CONSTANT
+   end
+   local
+      open l4
+   in
+      signature gs_2 = MLTREE
+   end
+   local
+      open l4
+   in
+      signature gs_3 = CELLS_BASIS
+   end
+   local
+      open l17
+   in
+      structure gs_4 = Annotations
+   end
+   local
+      open l4
+   in
+      structure gs_5 = Label
+   end
+   local
+      open l4
+   in
+      structure gs_6 = CellsBasis
+   end
+   local
+      open l4
+   in
+      functor gs_7 = Cells
+   end
+   local
+      open l60
+   in
+      structure gs_8 = Char
+      structure gs_9 = CharArray
+      structure gs_10 = CharVector
+      structure gs_11 = FixedInt
+      structure gs_12 = General
+      structure gs_13 = Int
+      structure gs_14 = Int32
+      structure gs_15 = Int64
+      structure gs_16 = IntInf
+      structure gs_17 = LargeInt
+      structure gs_18 = LargeReal
+      structure gs_19 = LargeWord
+      structure gs_20 = OS
+      structure gs_21 = Position
+      structure gs_22 = Real
+      structure gs_23 = Real64
+      structure gs_24 = RealArray
+      structure gs_25 = RealArraySlice
+      structure gs_26 = RealVector
+      structure gs_27 = RealVectorSlice
+      structure gs_28 = SMLofNJ
+      structure gs_29 = Socket
+      structure gs_30 = String
+      structure gs_31 = Substring
+      structure gs_32 = SysWord
+      structure gs_33 = Time
+      structure gs_34 = Word
+      structure gs_35 = Word32
+      structure gs_36 = Word64
+      structure gs_37 = Word8
+   end
+   local
+      open l4
+   in
+      signature gs_38 = CELLS
+   end
+   local
+      open l68
+   in
+      signature gs_39 = MLRISC_ERROR_MSG
+      structure gs_40 = MLRiscErrorMsg
+   end
+   local
+      signature CELLS = gs_38
+      functor Cells = gs_7
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      structure OS = gs_20
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      structure Socket = gs_29
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/instructions/sparcCells.sml
+   in
+      signature gs_41 = SPARCCELLS
+      structure gs_42 = SparcCells
+   end
+   local
+      structure Annotations = gs_4
+      signature CELLS_BASIS = gs_3
+      signature CONSTANT = gs_1
+      structure CellsBasis = gs_6
+      structure Label = gs_5
+      signature MLTREE = gs_2
+      signature REGION = gs_0
+      signature SPARCCELLS = gs_41
+      structure SparcCells = gs_42
+      ../sparc/instructions/sparcInstr.sml
+   in
+      signature gs_43 = SPARCINSTR
+      functor gs_44 = SparcInstr
+   end
+   local
+      open l4
+   in
+      signature gs_45 = SDI_JUMPS
+   end
+   local
+      open l4
+   in
+      signature gs_46 = MLTREE_EVAL
+   end
+   local
+      structure CellsBasis = gs_6
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      ../sparc/instructions/sparcShuffle.sig
+   in
+      signature gs_47 = SPARCSHUFFLE
+   end
+   local
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_46
+      structure OS = gs_20
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      signature SDI_JUMPS = gs_45
+      structure SMLofNJ = gs_28
+      signature SPARCINSTR = gs_43
+      signature SPARCSHUFFLE = gs_47
+      structure Socket = gs_29
+      functor SparcInstr = gs_44
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/backpatch/sparcJumps.sml
+   in
+      functor gs_48 = SparcJumps
+   end
+   local
+      open l4
+   in
+      signature gs_49 = INSN_PROPERTIES
+   end
+   local
+      open l60
+   in
+      structure gs_50 = Option
+   end
+   local
+      open l4
+   in
+      signature gs_51 = MLTREE_HASH
+   end
+   local
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      signature INSN_PROPERTIES = gs_49
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure Label = gs_5
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_46
+      signature MLTREE_HASH = gs_51
+      structure OS = gs_20
+      structure Option = gs_50
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      signature SPARCINSTR = gs_43
+      structure Socket = gs_29
+      functor SparcInstr = gs_44
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/instructions/sparcProps.sml
+   in
+      functor gs_52 = SparcProps
+   end
+   local
+      structure CellsBasis = gs_6
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      ../sparc/ra/sparcRewrite.sml
+   in
+      functor gs_53 = SparcRewrite
+   end
+   local
+      open l4
+   in
+      signature gs_54 = ARCH_SPILL_INSTR
+   end
+   local
+      signature ARCH_SPILL_INSTR = gs_54
+      structure CellsBasis = gs_6
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      functor SparcRewrite = gs_53
+      ../sparc/ra/sparcSpillInstr.sml
+   in
+      functor gs_55 = SparcSpillInstr
+   end
+   local
+      open l4
+   in
+      functor gs_56 = Shuffle
+   end
+   local
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      structure OS = gs_20
+      structure Option = gs_50
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      signature SPARCINSTR = gs_43
+      signature SPARCSHUFFLE = gs_47
+      functor Shuffle = gs_56
+      structure Socket = gs_29
+      functor SparcInstr = gs_44
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/instructions/sparcShuffle.sml
+   in
+      functor gs_57 = SparcShuffle
+   end
+   local
+      open l4
+   in
+      signature gs_58 = INSTRUCTION_EMITTER
+   end
+   local
+      open l4
+   in
+      signature gs_59 = CODE_STRING
+   end
+   local
+      open l4
+   in
+      signature gs_60 = INSTRUCTION_STREAM
+   end
+   local
+      signature CODE_STRING = gs_59
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      signature INSTRUCTION_EMITTER = gs_58
+      signature INSTRUCTION_STREAM = gs_60
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure Label = gs_5
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_46
+      structure OS = gs_20
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      signature SPARCINSTR = gs_43
+      structure Socket = gs_29
+      functor SparcInstr = gs_44
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/emit/sparcMC.sml
+   in
+      functor gs_61 = SparcMCEmitter
+   end
+   local
+      structure CellsBasis = gs_6
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      ../sparc/mltree/sparcPseudoInstr.sig
+   in
+      signature gs_62 = SPARC_PSEUDO_INSTR
+   end
+   local
+      open l4
+   in
+      signature gs_63 = CONTROL_FLOW_GRAPH
+   end
+   local
+      open l4
+   in
+      signature gs_64 = MLTREE_STREAM
+   end
+   local
+      ../sparc/instructions/sparcinstr-ext.sml
+   in
+      structure gs_65 = SparcInstrExt
+   end
+   local
+      signature CONTROL_FLOW_GRAPH = gs_63
+      signature MLTREE = gs_2
+      signature MLTREE_STREAM = gs_64
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      structure SparcInstrExt = gs_65
+      ../sparc/instructions/sparccomp-instr-ext.sml
+   in
+      signature gs_66 = SPARCCOMP_INSTR_EXT
+      functor gs_67 = SparcCompInstrExt
+   end
+   local
+      open l60
+   in
+      structure gs_68 = TextIO
+   end
+   local
+      open l4
+   in
+      signature gs_69 = ASM_STREAM
+      structure gs_70 = AsmStream
+   end
+   local
+      open l4
+   in
+      signature gs_71 = ASM_FORMAT_UTIL
+      structure gs_72 = AsmFormatUtil
+   end
+   local
+      open l4
+   in
+      structure gs_73 = AsmFlags
+   end
+   local
+      signature ASM_FORMAT_UTIL = gs_71
+      signature ASM_STREAM = gs_69
+      structure Annotations = gs_4
+      structure AsmFlags = gs_73
+      structure AsmFormatUtil = gs_72
+      structure AsmStream = gs_70
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      signature INSTRUCTION_EMITTER = gs_58
+      signature INSTRUCTION_STREAM = gs_60
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE_EVAL = gs_46
+      structure OS = gs_20
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      signature SPARCINSTR = gs_43
+      signature SPARCSHUFFLE = gs_47
+      structure Socket = gs_29
+      functor SparcInstr = gs_44
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure TextIO = gs_68
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/emit/sparcAsm.sml
+   in
+      functor gs_74 = SparcAsmEmitter
+   end
+   local
+      open l4
+   in
+      signature gs_75 = FREQUENCY_PROPERTIES
+   end
+   local
+      open l4
+   in
+      structure gs_76 = MLRiscAnnotations
+   end
+   local
+      open l17
+   in
+      signature gs_77 = PROBABILITY
+      structure gs_78 = Probability
+   end
+   local
+      signature FREQUENCY_PROPERTIES = gs_75
+      structure MLRiscAnnotations = gs_76
+      signature PROBABILITY = gs_77
+      structure Probability = gs_78
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      ../sparc/instructions/sparcFreqProps.sml
+   in
+      functor gs_79 = SparcFreqProps
+   end
+   local
+      open l4
+   in
+      signature gs_80 = PSEUDO_OPS_BASIS
+   end
+   local
+      open l4
+   in
+      functor gs_81 = GasPseudoOps
+   end
+   local
+      open l4
+   in
+      functor gs_82 = PseudoOpsBig
+   end
+   local
+      open l198
+   in
+      structure gs_83 = Format
+   end
+   local
+      open l4
+   in
+      structure gs_84 = PseudoOpsBasisTyp
+   end
+   local
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure Format = gs_83
+      functor GasPseudoOps = gs_81
+      structure General = gs_12
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE = gs_2
+      signature MLTREE_EVAL = gs_46
+      structure OS = gs_20
+      signature PSEUDO_OPS_BASIS = gs_80
+      structure Position = gs_21
+      structure PseudoOpsBasisTyp = gs_84
+      functor PseudoOpsBig = gs_82
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      structure Socket = gs_29
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/flowgraph/sparcGasPseudoOps.sml
+   in
+      functor gs_85 = SparcGasPseudoOps
+   end
+   local
+      open l4
+   in
+      signature gs_86 = C_CALLS
+   end
+   local
+      open l4
+   in
+      structure gs_87 = CTypes
+   end
+   local
+      open l60
+   in
+      structure gs_88 = List
+   end
+   local
+      structure CTypes = gs_87
+      signature C_CALLS = gs_86
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      structure List = gs_88
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscAnnotations = gs_76
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREE = gs_2
+      structure OS = gs_20
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      signature SPARCCELLS = gs_41
+      structure Socket = gs_29
+      structure SparcCells = gs_42
+      structure SparcInstrExt = gs_65
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/c-calls/sparc-c-calls.sml
+   in
+      functor gs_89 = Sparc_CCalls
+   end
+   local
+      open l4
+   in
+      signature gs_90 = DELAY_SLOT_PROPERTIES
+   end
+   local
+      structure CellsBasis = gs_6
+      signature DELAY_SLOT_PROPERTIES = gs_90
+      signature INSN_PROPERTIES = gs_49
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscErrorMsg = gs_40
+      structure Option = gs_50
+      signature SPARCINSTR = gs_43
+      functor SparcInstr = gs_44
+      ../sparc/backpatch/sparcDelaySlotProps.sml
+   in
+      functor gs_91 = SparcDelaySlots
+   end
+   local
+      open l4
+   in
+      functor gs_92 = MLTreeMult
+   end
+   local
+      open l4
+   in
+      functor gs_93 = MLTreeGen
+   end
+   local
+      open l4
+   in
+      signature gs_94 = MLTREECOMP
+      signature gs_95 = MLTREE_EXTENSION_COMP
+   end
+   local
+      structure CellsBasis = gs_6
+      structure Char = gs_8
+      structure CharArray = gs_9
+      structure CharVector = gs_10
+      structure FixedInt = gs_11
+      structure General = gs_12
+      structure Int = gs_13
+      structure Int32 = gs_14
+      structure Int64 = gs_15
+      structure IntInf = gs_16
+      structure LargeInt = gs_17
+      structure LargeReal = gs_18
+      structure LargeWord = gs_19
+      signature MLRISC_ERROR_MSG = gs_39
+      structure MLRiscAnnotations = gs_76
+      structure MLRiscErrorMsg = gs_40
+      signature MLTREECOMP = gs_94
+      signature MLTREE_EXTENSION_COMP = gs_95
+      functor MLTreeGen = gs_93
+      functor MLTreeMult = gs_92
+      structure OS = gs_20
+      structure Position = gs_21
+      structure Real = gs_22
+      structure Real64 = gs_23
+      structure RealArray = gs_24
+      structure RealArraySlice = gs_25
+      structure RealVector = gs_26
+      structure RealVectorSlice = gs_27
+      structure SMLofNJ = gs_28
+      signature SPARCINSTR = gs_43
+      signature SPARC_PSEUDO_INSTR = gs_62
+      structure Socket = gs_29
+      functor SparcInstr = gs_44
+      structure String = gs_30
+      structure Substring = gs_31
+      structure SysWord = gs_32
+      structure Time = gs_33
+      structure Word = gs_34
+      structure Word32 = gs_35
+      structure Word64 = gs_36
+      structure Word8 = gs_37
+      ../sparc/mltree/sparc.sml
+   in
+      functor gs_96 = Sparc
+   end
+in
+   signature SPARCCELLS = gs_41
+   signature SPARCCOMP_INSTR_EXT = gs_66
+   signature SPARCINSTR = gs_43
+   signature SPARCSHUFFLE = gs_47
+   signature SPARC_PSEUDO_INSTR = gs_62
+   functor Sparc = gs_96
+   functor SparcAsmEmitter = gs_74
+   structure SparcCells = gs_42
+   functor SparcCompInstrExt = gs_67
+   functor SparcDelaySlots = gs_91
+   functor SparcFreqProps = gs_79
+   functor SparcGasPseudoOps = gs_85
+   functor SparcInstr = gs_44
+   structure SparcInstrExt = gs_65
+   functor SparcJumps = gs_48
+   functor SparcMCEmitter = gs_61
+   functor SparcProps = gs_52
+   functor SparcRewrite = gs_53
+   functor SparcShuffle = gs_57
+   functor SparcSpillInstr = gs_55
+   functor Sparc_CCalls = gs_89
+end
+end
+
+end
diff --git a/mlb/StagedAlloc.mlb b/mlb/StagedAlloc.mlb
new file mode 100644
index 0000000..1c5ae49
--- /dev/null
+++ b/mlb/StagedAlloc.mlb
@@ -0,0 +1,238 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l33 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l51 =
+    bas
+      (* $/smlnj-lib.cm ====> *) $(SML_LIB)/smlnj-lib/Util/smlnj-lib.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l33
+   in
+      structure gs_0 = Char
+      structure gs_1 = CharArray
+      structure gs_2 = CharVector
+      structure gs_3 = FixedInt
+      structure gs_4 = General
+      structure gs_5 = Int
+      structure gs_6 = Int32
+      structure gs_7 = Int64
+      structure gs_8 = IntInf
+      structure gs_9 = LargeInt
+      structure gs_10 = LargeReal
+      structure gs_11 = LargeWord
+      structure gs_12 = OS
+      structure gs_13 = Position
+      structure gs_14 = Real
+      structure gs_15 = Real64
+      structure gs_16 = RealArray
+      structure gs_17 = RealArraySlice
+      structure gs_18 = RealVector
+      structure gs_19 = RealVectorSlice
+      structure gs_20 = SMLofNJ
+      structure gs_21 = Socket
+      structure gs_22 = String
+      structure gs_23 = Substring
+      structure gs_24 = SysWord
+      structure gs_25 = Time
+      structure gs_26 = Word
+      structure gs_27 = Word32
+      structure gs_28 = Word64
+      structure gs_29 = Word8
+   end
+   local
+      open l33
+   in
+      structure gs_30 = List
+   end
+   local
+      ../staged-alloc/allocator/staged-allocation-sig.sml
+   in
+      signature gs_31 = STAGED_ALLOCATION
+   end
+   local
+      ../staged-alloc/conventions/c-loc-kind.sml
+   in
+      structure gs_32 = CLocKind
+   end
+   local
+      structure CLocKind = gs_32
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_30
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      signature STAGED_ALLOCATION = gs_31
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../staged-alloc/conventions/x86-c-fn.sml
+   in
+      functor gs_33 = X86CConventionFn
+   end
+   local
+      open l51
+   in
+      structure gs_34 = IntBinaryMap
+   end
+   local
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntBinaryMap = gs_34
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_30
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      signature STAGED_ALLOCATION = gs_31
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../staged-alloc/allocator/staged-allocation-fn.sml
+   in
+      functor gs_35 = StagedAllocationFn
+   end
+   local
+      structure CLocKind = gs_32
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_30
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      signature STAGED_ALLOCATION = gs_31
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../staged-alloc/conventions/sparc-c-fn.sml
+   in
+      functor gs_36 = SparcCConventionFn
+   end
+   local
+      structure CLocKind = gs_32
+      structure Char = gs_0
+      structure CharArray = gs_1
+      structure CharVector = gs_2
+      structure FixedInt = gs_3
+      structure General = gs_4
+      structure Int = gs_5
+      structure Int32 = gs_6
+      structure Int64 = gs_7
+      structure IntInf = gs_8
+      structure LargeInt = gs_9
+      structure LargeReal = gs_10
+      structure LargeWord = gs_11
+      structure List = gs_30
+      structure OS = gs_12
+      structure Position = gs_13
+      structure Real = gs_14
+      structure Real64 = gs_15
+      structure RealArray = gs_16
+      structure RealArraySlice = gs_17
+      structure RealVector = gs_18
+      structure RealVectorSlice = gs_19
+      structure SMLofNJ = gs_20
+      signature STAGED_ALLOCATION = gs_31
+      structure Socket = gs_21
+      structure String = gs_22
+      structure Substring = gs_23
+      structure SysWord = gs_24
+      structure Time = gs_25
+      structure Word = gs_26
+      structure Word32 = gs_27
+      structure Word64 = gs_28
+      structure Word8 = gs_29
+      ../staged-alloc/conventions/x86-64-c-fn.sml
+   in
+      functor gs_37 = X86_64CConventionFn
+   end
+in
+   structure CLocKind = gs_32
+   signature STAGED_ALLOCATION = gs_31
+   functor SparcCConventionFn = gs_36
+   functor StagedAllocationFn = gs_35
+   functor X86CConventionFn = gs_33
+   functor X86_64CConventionFn = gs_37
+end
+end
+
+end
diff --git a/mlb/Visual.mlb b/mlb/Visual.mlb
new file mode 100644
index 0000000..ded6a54
--- /dev/null
+++ b/mlb/Visual.mlb
@@ -0,0 +1,465 @@
+
+ann
+  "nonexhaustiveBind warn" "nonexhaustiveMatch warn"
+  "redundantBind warn" "redundantMatch warn"
+  "sequenceNonUnit ignore"
+  "warnUnused false" "forceUsed"
+  "allowOrPats true" "allowSigWithtype true" "allowVectorExpsAndPats true"
+in
+
+local
+  basis l37 =
+    bas
+      (* $/basis.cm ====> *) $(SML_LIB)/basis/basis.mlb $(SML_LIB)/basis/sml-nj.mlb $(SML_LIB)/basis/unsafe.mlb
+    end
+  basis l64 =
+    bas
+      (* $Control.cm(=(proxyLib.cm):.)/Control.cm =??=> *) Control.mlb
+    end
+  basis l43 =
+    bas
+      (* $Lib.cm(=(proxyLib.cm):.)/Lib.cm =??=> *) Lib.mlb
+    end
+  basis l4 =
+    bas
+      (* $Graphs.cm(=(proxyLib.cm):.)/Graphs.cm =??=> *) Graphs.mlb
+    end
+  basis l68 =
+    bas
+      (* $MLRISC.cm(=(proxyLib.cm):.)/MLRISC.cm =??=> *) MLRISC.mlb
+    end
+in
+local
+   $(SML_LIB)/basis/pervasive.mlb
+   local
+      open l4
+   in
+      structure gs_0 = Graph
+   end
+   local
+      open l37
+   in
+      structure gs_1 = Char
+      structure gs_2 = CharArray
+      structure gs_3 = CharVector
+      structure gs_4 = FixedInt
+      structure gs_5 = General
+      structure gs_6 = Int
+      structure gs_7 = Int32
+      structure gs_8 = Int64
+      structure gs_9 = IntInf
+      structure gs_10 = LargeInt
+      structure gs_11 = LargeReal
+      structure gs_12 = LargeWord
+      structure gs_13 = OS
+      structure gs_14 = Position
+      structure gs_15 = Real
+      structure gs_16 = Real64
+      structure gs_17 = RealArray
+      structure gs_18 = RealArraySlice
+      structure gs_19 = RealVector
+      structure gs_20 = RealVectorSlice
+      structure gs_21 = SMLofNJ
+      structure gs_22 = Socket
+      structure gs_23 = String
+      structure gs_24 = Substring
+      structure gs_25 = SysWord
+      structure gs_26 = Time
+      structure gs_27 = Word
+      structure gs_28 = Word32
+      structure gs_29 = Word64
+      structure gs_30 = Word8
+   end
+   local
+      open l43
+   in
+      structure gs_31 = Annotations
+   end
+   local
+      open l4
+   in
+      signature gs_32 = ISOMORPHIC_GRAPH_VIEW
+      structure gs_33 = IsomorphicGraphView
+   end
+   local
+      structure Annotations = gs_31
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      structure Graph = gs_0
+      signature ISOMORPHIC_GRAPH_VIEW = gs_32
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure IsomorphicGraphView = gs_33
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/graphLayout.sml
+   in
+      structure gs_34 = GraphLayout
+   end
+   local
+      structure GraphLayout = gs_34
+      ../visualization/graphDisplay.sig
+   in
+      signature gs_35 = GRAPH_DISPLAY
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      signature GRAPH_DISPLAY = gs_35
+      structure General = gs_5
+      structure Graph = gs_0
+      structure GraphLayout = gs_34
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/vcg.sml
+   in
+      structure gs_36 = VCG
+   end
+   local
+      open l37
+   in
+      structure gs_37 = Array
+   end
+   local
+      open l64
+   in
+      signature gs_38 = MLRISC_CONTROL
+      structure gs_39 = MLRiscControl
+   end
+   local
+      open l68
+   in
+      structure gs_40 = Label
+   end
+   local
+      open l37
+   in
+      structure gs_41 = Math
+   end
+   local
+      open l37
+   in
+      structure gs_42 = List
+   end
+   local
+      open l68
+   in
+      signature gs_43 = INSTRUCTION_EMITTER
+   end
+   local
+      open l68
+   in
+      signature gs_44 = CONTROL_FLOW_GRAPH
+   end
+   local
+      open l68
+   in
+      signature gs_45 = ASM_STREAM
+      structure gs_46 = AsmStream
+   end
+   local
+      open l43
+   in
+      structure gs_47 = StringOutStream
+   end
+   local
+      open l68
+   in
+      signature gs_48 = INSTRUCTIONS
+   end
+   local
+      signature ASM_STREAM = gs_45
+      structure Annotations = gs_31
+      structure AsmStream = gs_46
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      structure General = gs_5
+      signature INSTRUCTIONS = gs_48
+      signature INSTRUCTION_EMITTER = gs_43
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure StringOutStream = gs_47
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/mlrisc-format-insn.sml
+   in
+      signature gs_49 = FORMAT_INSTRUCTION
+      functor gs_50 = FormatInstruction
+   end
+   local
+      structure GraphLayout = gs_34
+      ../visualization/graphViewer.sig
+   in
+      signature gs_51 = GRAPH_VIEWER
+   end
+   local
+      structure Annotations = gs_31
+      structure Array = gs_37
+      signature CONTROL_FLOW_GRAPH = gs_44
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      signature FORMAT_INSTRUCTION = gs_49
+      structure FixedInt = gs_4
+      functor FormatInstruction = gs_50
+      signature GRAPH_VIEWER = gs_51
+      structure General = gs_5
+      structure Graph = gs_0
+      structure GraphLayout = gs_34
+      signature INSTRUCTION_EMITTER = gs_43
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure Label = gs_40
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure List = gs_42
+      signature MLRISC_CONTROL = gs_38
+      structure MLRiscControl = gs_39
+      structure Math = gs_41
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/cfgViewer.sml
+   in
+      functor gs_52 = CFGViewer
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      signature GRAPH_DISPLAY = gs_35
+      structure General = gs_5
+      structure Graph = gs_0
+      structure GraphLayout = gs_34
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/dot.sml
+   in
+      structure gs_53 = Dot
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      signature GRAPH_DISPLAY = gs_35
+      structure General = gs_5
+      structure Graph = gs_0
+      structure GraphLayout = gs_34
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      structure List = gs_42
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/daVinci.sml
+   in
+      structure gs_54 = daVinci
+   end
+   local
+      structure Dot = gs_53
+      signature GRAPH_DISPLAY = gs_35
+      signature MLRISC_CONTROL = gs_38
+      structure MLRiscControl = gs_39
+      structure VCG = gs_36
+      structure daVinci = gs_54
+      ../visualization/allDisplays.sml
+   in
+      structure gs_55 = AllDisplays
+   end
+   local
+      open l37
+   in
+      structure gs_56 = TextIO
+   end
+   local
+      structure Char = gs_1
+      structure CharArray = gs_2
+      structure CharVector = gs_3
+      structure FixedInt = gs_4
+      signature GRAPH_DISPLAY = gs_35
+      signature GRAPH_VIEWER = gs_51
+      structure General = gs_5
+      structure Graph = gs_0
+      structure GraphLayout = gs_34
+      structure Int = gs_6
+      structure Int32 = gs_7
+      structure Int64 = gs_8
+      structure IntInf = gs_9
+      structure LargeInt = gs_10
+      structure LargeReal = gs_11
+      structure LargeWord = gs_12
+      signature MLRISC_CONTROL = gs_38
+      structure MLRiscControl = gs_39
+      structure OS = gs_13
+      structure Position = gs_14
+      structure Real = gs_15
+      structure Real64 = gs_16
+      structure RealArray = gs_17
+      structure RealArraySlice = gs_18
+      structure RealVector = gs_19
+      structure RealVectorSlice = gs_20
+      structure SMLofNJ = gs_21
+      structure Socket = gs_22
+      structure String = gs_23
+      structure Substring = gs_24
+      structure SysWord = gs_25
+      structure TextIO = gs_56
+      structure Time = gs_26
+      structure Word = gs_27
+      structure Word32 = gs_28
+      structure Word64 = gs_29
+      structure Word8 = gs_30
+      ../visualization/graphViewer.sml
+   in
+      functor gs_57 = GraphViewer
+   end
+in
+   structure AllDisplays = gs_55
+   functor CFGViewer = gs_52
+   structure Dot = gs_53
+   functor FormatInstruction = gs_50
+   signature GRAPH_DISPLAY = gs_35
+   signature GRAPH_VIEWER = gs_51
+   structure GraphLayout = gs_34
+   functor GraphViewer = gs_57
+   structure VCG = gs_36
+   structure daVinci = gs_54
+end
+end
+
+end
diff --git a/mlrisc-lib.mlb b/mlrisc-lib.mlb
new file mode 100644
index 0000000..3545999
--- /dev/null
+++ b/mlrisc-lib.mlb
@@ -0,0 +1,24 @@
+(* DO NOT USE.  Only suitable for type-checking purposes. *)
+local
+mlb/ALPHA.mlb
+mlb/AMD64.mlb
+mlb/AMD64-Peephole.mlb
+mlb/CCall.mlb
+mlb/CCall-sparc.mlb
+mlb/CCall-x86-64.mlb
+mlb/CCall-x86.mlb
+mlb/Control.mlb
+mlb/Graphs.mlb
+mlb/HPPA.mlb
+mlb/IA32.mlb
+mlb/IA32-Peephole.mlb
+mlb/Lib.mlb
+mlb/MLRISC.mlb
+mlb/MLTREE.mlb
+mlb/Peephole.mlb
+mlb/PPC.mlb
+mlb/RA.mlb
+mlb/SPARC.mlb
+mlb/StagedAlloc.mlb
+mlb/Visual.mlb
+in end
diff --git a/mltree/instr-gen.sig b/mltree/instr-gen.sig
index a46af29..c04db90 100644
--- a/mltree/instr-gen.sig
+++ b/mltree/instr-gen.sig
@@ -8,8 +8,29 @@ sig
    structure S   : INSTRUCTION_STREAM
    structure CFG : CONTROL_FLOW_GRAPH 
 
-   sharing I.C = C 
-   sharing CFG.P = S.P
+   (* sharing I.C = C *)
+   (* sharing CFG.P = S.P *)
+   where type P.Client.pseudo_op = S.P.Client.pseudo_op
+     and type P.T.Basis.cond = S.P.T.Basis.cond
+     and type P.T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+     and type P.T.Basis.ext = S.P.T.Basis.ext
+     and type P.T.Basis.fcond = S.P.T.Basis.fcond
+     and type P.T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+     and type P.T.Constant.const = S.P.T.Constant.const
+     and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+     and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+     and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+     and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+     and type P.T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+     and type P.T.Region.region = S.P.T.Region.region
+     and type P.T.ccexp = S.P.T.ccexp
+     and type P.T.fexp = S.P.T.fexp
+     (* and type P.T.labexp = S.P.T.labexp *)
+     and type P.T.mlrisc = S.P.T.mlrisc
+     and type P.T.oper = S.P.T.oper
+     and type P.T.rep = S.P.T.rep
+     and type P.T.rexp = S.P.T.rexp
+     and type P.T.stm = S.P.T.stm
 
    (* 
     * This function creates an instruction stream, which can be 
diff --git a/mltree/instr-gen.sml b/mltree/instr-gen.sml
index 4b5d6cd..d31db49 100644
--- a/mltree/instr-gen.sml
+++ b/mltree/instr-gen.sml
@@ -4,9 +4,33 @@
 functor InstrGen
    (structure I      : INSTRUCTIONS
     structure Stream : INSTRUCTION_STREAM
-    structure CFG    : CONTROL_FLOW_GRAPH
-    			where I = I
-			  and P = Stream.P
+    structure CFG    : CONTROL_FLOW_GRAPH (* where I = I and P = Stream.P *)
+                       where type I.addressing_mode = I.addressing_mode
+                         and type I.ea = I.ea
+                         and type I.instr = I.instr
+                         and type I.instruction = I.instruction
+                         and type I.operand = I.operand
+                       where type P.Client.pseudo_op = Stream.P.Client.pseudo_op
+                         and type P.T.Basis.cond = Stream.P.T.Basis.cond
+                         and type P.T.Basis.div_rounding_mode = Stream.P.T.Basis.div_rounding_mode
+                         and type P.T.Basis.ext = Stream.P.T.Basis.ext
+                         and type P.T.Basis.fcond = Stream.P.T.Basis.fcond
+                         and type P.T.Basis.rounding_mode = Stream.P.T.Basis.rounding_mode
+                         and type P.T.Constant.const = Stream.P.T.Constant.const
+                         and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Stream.P.T.Extension.ccx
+                         and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Stream.P.T.Extension.fx
+                         and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Stream.P.T.Extension.rx
+                         and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Stream.P.T.Extension.sx
+                         and type P.T.I.div_rounding_mode = Stream.P.T.I.div_rounding_mode
+                         and type P.T.Region.region = Stream.P.T.Region.region
+                         and type P.T.ccexp = Stream.P.T.ccexp
+                         and type P.T.fexp = Stream.P.T.fexp
+                         (* and type P.T.labexp = Stream.P.T.labexp *)
+                         and type P.T.mlrisc = Stream.P.T.mlrisc
+                         and type P.T.oper = Stream.P.T.oper
+                         and type P.T.rep = Stream.P.T.rep
+                         and type P.T.rexp = Stream.P.T.rexp
+                         and type P.T.stm = Stream.P.T.stm
    ) : INSTR_GEN =
 struct
    structure C   = I.C
diff --git a/mltree/mltree-gen.sig b/mltree/mltree-gen.sig
index f2d1937..757c6d1 100644
--- a/mltree/mltree-gen.sig
+++ b/mltree/mltree-gen.sig
@@ -9,8 +9,27 @@ signature MLTREEGEN =
 sig
 
    structure T : MLTREE
-   structure Size : MLTREE_SIZE
-   	where T = T
+   structure Size : MLTREE_SIZE (* where T = T *)
+                    where type T.Basis.cond = T.Basis.cond
+                      and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                      and type T.Basis.ext = T.Basis.ext
+                      and type T.Basis.fcond = T.Basis.fcond
+                      and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                      and type T.Constant.const = T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                      and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                      and type T.Region.region = T.Region.region
+                      and type T.ccexp = T.ccexp
+                      and type T.fexp = T.fexp
+                      (* and type T.labexp = T.labexp *)
+                      and type T.mlrisc = T.mlrisc
+                      and type T.oper = T.oper
+                      and type T.rep = T.rep
+                      and type T.rexp = T.rexp
+                      and type T.stm = T.stm
 
    val condOf : T.ccexp -> T.Basis.cond
    val fcondOf : T.ccexp -> T.Basis.fcond
diff --git a/mltree/mltree-mult.sig b/mltree/mltree-mult.sig
index 827c051..a69f5a6 100644
--- a/mltree/mltree-mult.sig
+++ b/mltree/mltree-mult.sig
@@ -8,7 +8,7 @@ sig
 
    structure T : MLTREE
    structure C : CELLS 
-   structure I : INSTRUCTIONS where C=C
+   structure I : INSTRUCTIONS (* where C = C *)
 
    exception TooComplex
 
diff --git a/mltree/mltree-mult.sml b/mltree/mltree-mult.sml
index 41c26eb..e0e0609 100644
--- a/mltree/mltree-mult.sml
+++ b/mltree/mltree-mult.sml
@@ -8,7 +8,16 @@ functor MLTreeMult
   (structure I : INSTRUCTIONS
    structure T : MLTREE
 
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    val intTy : int (* width of integer type *)
 
    type argi = {r:CB.cell, i:int, d:CB.cell}
@@ -20,8 +29,8 @@ functor MLTreeMult
    val slli  : argi -> I.instruction list
    val srli  : argi -> I.instruction list
    val srai  : argi -> I.instruction list
-  )
-  (val trapping : bool (* trap on overflow? *)
+
+   val trapping : bool (* trap on overflow? *)
    val multCost : int ref  (* cost of multiplication *)
 
        (* basic ops; these have to implemented by the architecture *)
@@ -37,8 +46,8 @@ functor MLTreeMult
    val sh1addv  : (arg -> I.instruction list) option (* a*2 + b *)
    val sh2addv  : (arg -> I.instruction list) option (* a*4 + b *)  
    val sh3addv  : (arg -> I.instruction list) option (* a*8 + b *)
-  )  
-  (val signed   : bool (* signed? *)
+
+   val signed   : bool (* signed? *)
   ) : MLTREE_MULT_DIV =
 struct
    structure T = T 
diff --git a/mltree/mltree-simplify.in b/mltree/mltree-simplify.in
index 0e8de12..63ebbc2 100644
--- a/mltree/mltree-simplify.in
+++ b/mltree/mltree-simplify.in
@@ -14,8 +14,27 @@ in
 
 functor MLTreeSimplifier
   (structure T    : MLTREE
-   structure Size : MLTREE_SIZE
-      where T = T
+   structure Size : MLTREE_SIZE (* where T = T *)
+                    where type T.Basis.cond = T.Basis.cond
+                      and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                      and type T.Basis.ext = T.Basis.ext
+                      and type T.Basis.fcond = T.Basis.fcond
+                      and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                      and type T.Constant.const = T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                      and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                      and type T.Region.region = T.Region.region
+                      and type T.ccexp = T.ccexp
+                      and type T.fexp = T.fexp
+                      (* and type T.labexp = T.labexp *)
+                      and type T.mlrisc = T.mlrisc
+                      and type T.oper = T.oper
+                      and type T.rep = T.rep
+                      and type T.rexp = T.rexp
+                      and type T.stm = T.stm
    (* Extension *)
    val sext : T.rewriter -> T.sext -> T.sext
    val rext : T.rewriter -> T.rext -> T.rext
diff --git a/mltree/mltree-simplify.sml b/mltree/mltree-simplify.sml
index 75e2867..5a15b04 100644
--- a/mltree/mltree-simplify.sml
+++ b/mltree/mltree-simplify.sml
@@ -9,7 +9,27 @@ functor MLTreeSimplifier(
                          structure T : MLTREE
 
 (*#line 17.4 "mltree-simplify.in"*)
-                         structure Size : MLTREE_SIZE where T=T
+                         structure Size : MLTREE_SIZE (* where T=T *)
+                                          where type T.Basis.cond = T.Basis.cond
+                                            and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                                            and type T.Basis.ext = T.Basis.ext
+                                            and type T.Basis.fcond = T.Basis.fcond
+                                            and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                                            and type T.Constant.const = T.Constant.const
+                                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                                            and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                                            and type T.Region.region = T.Region.region
+                                            and type T.ccexp = T.ccexp
+                                            and type T.fexp = T.fexp
+                                            (* and type T.labexp = T.labexp *)
+                                            and type T.mlrisc = T.mlrisc
+                                            and type T.oper = T.oper
+                                            and type T.rep = T.rep
+                                            and type T.rexp = T.rexp
+                                            and type T.stm = T.stm
 
 (*#line 20.4 "mltree-simplify.in"*)
                          val sext : T.rewriter -> T.sext -> T.sext
diff --git a/mltree/mltree.sig b/mltree/mltree.sig
index 90f25e9..554c25e 100644
--- a/mltree/mltree.sig
+++ b/mltree/mltree.sig
@@ -30,6 +30,10 @@ signature MLTREE = sig
    * extension type.  Unfortunately, this has to be made polymorphic to make
    * it possible for recursive type definitions to work.
    *)
+  type controlflow = Label.label list (* control flow info *)
+  type ctrl   = var                   (* control dependence info *)
+  type ctrls  = ctrl list
+
   datatype stm =
       (* assignment *)
       MV      of ty * dst * rexp
@@ -211,10 +215,7 @@ signature MLTREE = sig
     | GPR of rexp
     | FPR of fexp
 
-  withtype controlflow = Label.label list (* control flow info *)
-       and ctrl   = var                   (* control dependence info *)
-       and ctrls  = ctrl list
-       and sext   = (stm, rexp, fexp, ccexp) Extension.sx
+  withtype sext   = (stm, rexp, fexp, ccexp) Extension.sx
        and rext   = (stm, rexp, fexp, ccexp) Extension.rx
        and fext   = (stm, rexp, fexp, ccexp) Extension.fx
        and ccext  = (stm, rexp, fexp, ccexp) Extension.ccx
diff --git a/mltree/mltree.sml b/mltree/mltree.sml
index 7f5f1b1..b250ce2 100644
--- a/mltree/mltree.sml
+++ b/mltree/mltree.sml
@@ -32,6 +32,10 @@ struct
    * extension type.  Unfortunately, this has to be made polymorphic to make
    * it possible for recursive type definitions to work.
    *)
+  type controlflow = Label.label list (* control flow info *)
+  type ctrl   = var                   (* control dependence info *)
+  type ctrls  = ctrl list
+
   datatype stm =
       (* assignment *)
       MV      of ty * dst * rexp
@@ -199,10 +203,7 @@ struct
     | GPR of rexp
     | FPR of fexp
 
-  withtype controlflow = Label.label list (* control flow info *)
-       and ctrl   = var                   (* control dependence info *)
-       and ctrls  = ctrl list
-       and sext   = (stm, rexp, fexp, ccexp) Extension.sx
+  withtype sext   = (stm, rexp, fexp, ccexp) Extension.sx
        and rext   = (stm, rexp, fexp, ccexp) Extension.rx
        and fext   = (stm, rexp, fexp, ccexp) Extension.fx
        and ccext  = (stm, rexp, fexp, ccexp) Extension.ccx
diff --git a/mltree/mltreecomp.sig b/mltree/mltreecomp.sig
index 79ceab5..f6b72e1 100644
--- a/mltree/mltreecomp.sig
+++ b/mltree/mltreecomp.sig
@@ -9,11 +9,56 @@
 signature MLTREE_EXTENSION_COMP =
 sig
    structure T : MLTREE
-   structure TS : MLTREE_STREAM where T = T
+   structure TS : MLTREE_STREAM (* where T = T *)
+                  where type T.Basis.cond = T.Basis.cond
+                    and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                    and type T.Basis.ext = T.Basis.ext
+                    and type T.Basis.fcond = T.Basis.fcond
+                    and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                    and type T.Constant.const = T.Constant.const
+                    and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                    and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                    and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                    and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                    and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                    and type T.Region.region = T.Region.region
+                    and type T.ccexp = T.ccexp
+                    and type T.fexp = T.fexp
+                    (* and type T.labexp = T.labexp *)
+                    and type T.mlrisc = T.mlrisc
+                    and type T.oper = T.oper
+                    and type T.rep = T.rep
+                    and type T.rexp = T.rexp
+                    and type T.stm = T.stm
    structure I : INSTRUCTIONS
-   structure CFG : CONTROL_FLOW_GRAPH
-		where I = I
-	          and P = TS.S.P
+   structure CFG : CONTROL_FLOW_GRAPH (* where I = I and P = TS.S.P *)
+                   where type I.addressing_mode = I.addressing_mode
+                     and type I.ea = I.ea
+                     and type I.instr = I.instr
+                     and type I.instruction = I.instruction
+                     and type I.operand = I.operand
+                   where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                     and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                     and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                     and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                     and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                     and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                     and type P.T.Constant.const = TS.S.P.T.Constant.const
+                     and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                     and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                     and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                     and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                     and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                     and type P.T.Region.region = TS.S.P.T.Region.region
+                     and type P.T.ccexp = TS.S.P.T.ccexp
+                     and type P.T.fexp = TS.S.P.T.fexp
+	             (* and type P.T.labexp = TS.S.P.T.labexp *)
+                     and type P.T.mlrisc = TS.S.P.T.mlrisc
+                     and type P.T.oper = TS.S.P.T.oper
+                     and type P.T.rep = TS.S.P.T.rep
+                     and type P.T.rexp = TS.S.P.T.rexp
+                     and type P.T.stm = TS.S.P.T.stm
+
    (* 
     * The reducer is given to the client during the compilation of
     * the user extensions.
@@ -34,11 +79,54 @@ signature MLTREECOMP =
 sig
    structure TS : MLTREE_STREAM
    structure I : INSTRUCTIONS 
-   structure CFG : CONTROL_FLOW_GRAPH 
-      		where I = I
-		  and P = TS.S.P
-   structure Gen : MLTREEGEN 
-   		where T = TS.T
+   structure CFG : CONTROL_FLOW_GRAPH (* where I = I and P = TS.S.P *)
+                   where type I.addressing_mode = I.addressing_mode
+                     and type I.ea = I.ea
+                     and type I.instr = I.instr
+                     and type I.instruction = I.instruction
+                     and type I.operand = I.operand
+                   where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                     and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                     and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                     and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                     and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                     and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                     and type P.T.Constant.const = TS.S.P.T.Constant.const
+                     and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                     and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                     and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                     and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                     and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                     and type P.T.Region.region = TS.S.P.T.Region.region
+                     and type P.T.ccexp = TS.S.P.T.ccexp
+                     and type P.T.fexp = TS.S.P.T.fexp
+                     (* and type P.T.labexp = TS.S.P.T.labexp *)
+                     and type P.T.mlrisc = TS.S.P.T.mlrisc
+                     and type P.T.oper = TS.S.P.T.oper
+                     and type P.T.rep = TS.S.P.T.rep
+                     and type P.T.rexp = TS.S.P.T.rexp
+                     and type P.T.stm = TS.S.P.T.stm
+   structure Gen : MLTREEGEN (* where T = TS.T *)
+                   where type T.Basis.cond = TS.T.Basis.cond
+                     and type T.Basis.div_rounding_mode = TS.T.Basis.div_rounding_mode
+                     and type T.Basis.ext = TS.T.Basis.ext
+                     and type T.Basis.fcond = TS.T.Basis.fcond
+                     and type T.Basis.rounding_mode = TS.T.Basis.rounding_mode
+                     and type T.Constant.const = TS.T.Constant.const
+                     and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) TS.T.Extension.ccx
+                     and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) TS.T.Extension.fx
+                     and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) TS.T.Extension.rx
+                     and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) TS.T.Extension.sx
+                     and type T.I.div_rounding_mode = TS.T.I.div_rounding_mode
+                     and type T.Region.region = TS.T.Region.region
+                     and type T.ccexp = TS.T.ccexp
+                     and type T.fexp = TS.T.fexp
+                     (* and type T.labexp = TS.T.labexp *)
+                     and type T.mlrisc = TS.T.mlrisc
+                     and type T.oper = TS.T.oper
+                     and type T.rep = TS.T.rep
+                     and type T.rexp = TS.T.rexp
+                     and type T.stm = TS.T.stm
 
    type instrStream = (I.instruction, I.C.cellset, CFG.cfg) TS.stream  
    type mltreeStream = (TS.T.stm, TS.T.mlrisc list, CFG.cfg) TS.stream 
diff --git a/omit-frameptr/omit-frame-pointer.sig b/omit-frameptr/omit-frame-pointer.sig
index d7e54f7..58c9a45 100644
--- a/omit-frameptr/omit-frame-pointer.sig
+++ b/omit-frameptr/omit-frame-pointer.sig
@@ -8,7 +8,12 @@
 
 signature OMIT_FRAME_POINTER = sig
   structure I : INSTRUCTIONS
-  structure CFG : CONTROL_FLOW_GRAPH where I = I
+  structure CFG : CONTROL_FLOW_GRAPH (* where I = I *)
+                  where type I.addressing_mode = I.addressing_mode
+                    and type I.ea = I.ea
+                    and type I.instr = I.instr
+                    and type I.instruction = I.instruction
+                    and type I.operand = I.operand
 
   (* idelta is the intial displacement between the fp and sp. *)
   val omitframeptr : {vfp:CellsBasis.cell, idelta:Int32.int option, cfg:CFG.cfg} -> unit
diff --git a/ppc/backpatch/ppcDelaySlots.sml b/ppc/backpatch/ppcDelaySlots.sml
index 69823c1..a01898a 100644
--- a/ppc/backpatch/ppcDelaySlots.sml
+++ b/ppc/backpatch/ppcDelaySlots.sml
@@ -5,8 +5,12 @@
 
 
 functor PPCDelaySlots(structure I : PPCINSTR
-                      structure P : INSN_PROPERTIES
-                         where I = I
+                      structure P : INSN_PROPERTIES (* where I = I *)
+                                    where type I.addressing_mode = I.addressing_mode
+                                      and type I.ea = I.ea
+                                      and type I.instr = I.instr
+                                      and type I.instruction = I.instruction
+                                      and type I.operand = I.operand
                      ) : DELAY_SLOT_PROPERTIES =
 struct
    structure I = I
diff --git a/ppc/backpatch/ppcJumps.sml b/ppc/backpatch/ppcJumps.sml
index e12d7d2..7f27356 100644
--- a/ppc/backpatch/ppcJumps.sml
+++ b/ppc/backpatch/ppcJumps.sml
@@ -1,7 +1,70 @@
 functor PPCJumps 
   (structure Instr: PPCINSTR
-   structure Shuffle : PPCSHUFFLE where I = Instr
-   structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+   structure Shuffle : PPCSHUFFLE (* where I = Instr *)
+                       where type I.Constant.const = Instr.Constant.const
+                         and type I.Region.region = Instr.Region.region
+                         and type I.T.Basis.cond = Instr.T.Basis.cond
+                         and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                         and type I.T.Basis.ext = Instr.T.Basis.ext
+                         and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                         and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                         and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                         and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                         and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                         and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                         and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                         and type I.T.ccexp = Instr.T.ccexp
+                         and type I.T.fexp = Instr.T.fexp
+                         (* and type I.T.labexp = Instr.T.labexp *)
+                         and type I.T.mlrisc = Instr.T.mlrisc
+                         and type I.T.oper = Instr.T.oper
+                         and type I.T.rep = Instr.T.rep
+                         and type I.T.rexp = Instr.T.rexp
+                         and type I.T.stm = Instr.T.stm
+                         and type I.arith = Instr.arith
+                         and type I.arithi = Instr.arithi
+                         and type I.bit = Instr.bit
+                         and type I.bo = Instr.bo
+                         and type I.ccarith = Instr.ccarith
+                         and type I.cmp = Instr.cmp
+                         and type I.ea = Instr.ea
+                         and type I.farith = Instr.farith
+                         and type I.farith3 = Instr.farith3
+                         and type I.fcmp = Instr.fcmp
+                         and type I.fload = Instr.fload
+                         and type I.fstore = Instr.fstore
+                         and type I.funary = Instr.funary
+                         and type I.instr = Instr.instr
+                         and type I.instruction = Instr.instruction
+                         and type I.load = Instr.load
+                         and type I.operand = Instr.operand
+                         and type I.rotate = Instr.rotate
+                         and type I.rotatei = Instr.rotatei
+                         and type I.spr = Instr.spr
+                         and type I.store = Instr.store
+                         and type I.unary = Instr.unary
+                         and type I.xerbit = Instr.xerbit
+   structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                          where type T.Basis.cond = Instr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = Instr.T.Basis.ext
+                            and type T.Basis.fcond = Instr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                            and type T.Constant.const = Instr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                            and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                            and type T.Region.region = Instr.T.Region.region
+                            and type T.ccexp = Instr.T.ccexp
+                            and type T.fexp = Instr.T.fexp
+                            (* and type T.labexp = Instr.T.labexp *)
+                            and type T.mlrisc = Instr.T.mlrisc
+                            and type T.oper = Instr.T.oper
+                            and type T.rep = Instr.T.rep
+                            and type T.rexp = Instr.T.rexp
+                            and type T.stm = Instr.T.stm
   ) : SDI_JUMPS = 
 struct
   structure I = Instr
diff --git a/ppc/emit/ppcAsm.sml b/ppc/emit/ppcAsm.sml
index 646f56e..1eeb794 100644
--- a/ppc/emit/ppcAsm.sml
+++ b/ppc/emit/ppcAsm.sml
@@ -6,12 +6,92 @@
 
 
 functor PPCAsmEmitter(structure S : INSTRUCTION_STREAM
-                      structure Instr : PPCINSTR
-                         where T = S.P.T
-                      structure Shuffle : PPCSHUFFLE
-                         where I = Instr
-                      structure MLTreeEval : MLTREE_EVAL
-                         where T = Instr.T
+                      structure Instr : PPCINSTR (* where T = S.P.T *)
+                                        where type T.Basis.cond = S.P.T.Basis.cond
+                                          and type T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+                                          and type T.Basis.ext = S.P.T.Basis.ext
+                                          and type T.Basis.fcond = S.P.T.Basis.fcond
+                                          and type T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+                                          and type T.Constant.const = S.P.T.Constant.const
+                                          and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+                                          and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+                                          and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+                                          and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+                                          and type T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+                                          and type T.Region.region = S.P.T.Region.region
+                                          and type T.ccexp = S.P.T.ccexp
+                                          and type T.fexp = S.P.T.fexp
+                                          (* and type T.labexp = S.P.T.labexp *)
+                                          and type T.mlrisc = S.P.T.mlrisc
+                                          and type T.oper = S.P.T.oper
+                                          and type T.rep = S.P.T.rep
+                                          and type T.rexp = S.P.T.rexp
+                                          and type T.stm = S.P.T.stm
+                      structure Shuffle : PPCSHUFFLE (* where I = Instr *)
+                                          where type I.Constant.const = Instr.Constant.const
+                                            and type I.Region.region = Instr.Region.region
+                                            and type I.T.Basis.cond = Instr.T.Basis.cond
+                                            and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                            and type I.T.Basis.ext = Instr.T.Basis.ext
+                                            and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                            and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                            and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                            and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                            and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                            and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                            and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                            and type I.T.ccexp = Instr.T.ccexp
+                                            and type I.T.fexp = Instr.T.fexp
+                                            (* and type I.T.labexp = Instr.T.labexp *)
+                                            and type I.T.mlrisc = Instr.T.mlrisc
+                                            and type I.T.oper = Instr.T.oper
+                                            and type I.T.rep = Instr.T.rep
+                                            and type I.T.rexp = Instr.T.rexp
+                                            and type I.T.stm = Instr.T.stm
+                                            and type I.arith = Instr.arith
+                                            and type I.arithi = Instr.arithi
+                                            and type I.bit = Instr.bit
+                                            and type I.bo = Instr.bo
+                                            and type I.ccarith = Instr.ccarith
+                                            and type I.cmp = Instr.cmp
+                                            and type I.ea = Instr.ea
+                                            and type I.farith = Instr.farith
+                                            and type I.farith3 = Instr.farith3
+                                            and type I.fcmp = Instr.fcmp
+                                            and type I.fload = Instr.fload
+                                            and type I.fstore = Instr.fstore
+                                            and type I.funary = Instr.funary
+                                            and type I.instr = Instr.instr
+                                            and type I.instruction = Instr.instruction
+                                            and type I.load = Instr.load
+                                            and type I.operand = Instr.operand
+                                            and type I.rotate = Instr.rotate
+                                            and type I.rotatei = Instr.rotatei
+                                            and type I.spr = Instr.spr
+                                            and type I.store = Instr.store
+                                            and type I.unary = Instr.unary
+                                            and type I.xerbit = Instr.xerbit
+                      structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                             where type T.Basis.cond = Instr.T.Basis.cond
+                                               and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                               and type T.Basis.ext = Instr.T.Basis.ext
+                                               and type T.Basis.fcond = Instr.T.Basis.fcond
+                                               and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                               and type T.Constant.const = Instr.T.Constant.const
+                                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                               and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                               and type T.Region.region = Instr.T.Region.region
+                                               and type T.ccexp = Instr.T.ccexp
+                                               and type T.fexp = Instr.T.fexp
+                                               (* and type T.labexp = Instr.T.labexp *)
+                                               and type T.mlrisc = Instr.T.mlrisc
+                                               and type T.oper = Instr.T.oper
+                                               and type T.rep = Instr.T.rep
+                                               and type T.rexp = Instr.T.rexp
+                                               and type T.stm = Instr.T.stm
                      ) : INSTRUCTION_EMITTER =
 struct
    structure I  = Instr
diff --git a/ppc/emit/ppcMC.sml b/ppc/emit/ppcMC.sml
index a2524c9..4b9ff78 100644
--- a/ppc/emit/ppcMC.sml
+++ b/ppc/emit/ppcMC.sml
@@ -6,7 +6,27 @@
 
 
 functor PPCMCEmitter(structure Instr : PPCINSTR
-                     structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+                     structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                            where type T.Basis.cond = Instr.T.Basis.cond
+                                              and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                              and type T.Basis.ext = Instr.T.Basis.ext
+                                              and type T.Basis.fcond = Instr.T.Basis.fcond
+                                              and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                              and type T.Constant.const = Instr.T.Constant.const
+                                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                              and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                              and type T.Region.region = Instr.T.Region.region
+                                              and type T.ccexp = Instr.T.ccexp
+                                              and type T.fexp = Instr.T.fexp
+                                              (* and type T.labexp = Instr.T.labexp *)
+                                              and type T.mlrisc = Instr.T.mlrisc
+                                              and type T.oper = Instr.T.oper
+                                              and type T.rep = Instr.T.rep
+                                              and type T.rexp = Instr.T.rexp
+                                              and type T.stm = Instr.T.stm
                      structure Stream : INSTRUCTION_STREAM
                      structure CodeString : CODE_STRING
                     ) : INSTRUCTION_EMITTER =
diff --git a/ppc/flowgraph/ppcDarwinPseudoOps.sml b/ppc/flowgraph/ppcDarwinPseudoOps.sml
index daf6933..533b845 100644
--- a/ppc/flowgraph/ppcDarwinPseudoOps.sml
+++ b/ppc/flowgraph/ppcDarwinPseudoOps.sml
@@ -7,7 +7,27 @@
 
 functor PPCDarwinPseudoOps (
     structure T : MLTREE
-    structure MLTreeEval : MLTREE_EVAL  where T = T
+    structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                           where type T.Basis.cond = T.Basis.cond
+                             and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                             and type T.Basis.ext = T.Basis.ext
+                             and type T.Basis.fcond = T.Basis.fcond
+                             and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                             and type T.Constant.const = T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                             and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                             and type T.Region.region = T.Region.region
+                             and type T.ccexp = T.ccexp
+                             and type T.fexp = T.fexp
+                             (* and type T.labexp = T.labexp *)
+                             and type T.mlrisc = T.mlrisc
+                             and type T.oper = T.oper
+                             and type T.rep = T.rep
+                             and type T.rexp = T.rexp
+                             and type T.stm = T.stm
   ) : PSEUDO_OPS_BASIS = struct
 
     structure T = T
diff --git a/ppc/flowgraph/ppcGasPseudoOps.sml b/ppc/flowgraph/ppcGasPseudoOps.sml
index e627bfa..267246d 100644
--- a/ppc/flowgraph/ppcGasPseudoOps.sml
+++ b/ppc/flowgraph/ppcGasPseudoOps.sml
@@ -1,6 +1,26 @@
 functor PPCGasPseudoOps 
    ( structure T : MLTREE
-     structure MLTreeEval : MLTREE_EVAL  where T = T
+     structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                            where type T.Basis.cond = T.Basis.cond
+                              and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                              and type T.Basis.ext = T.Basis.ext
+                              and type T.Basis.fcond = T.Basis.fcond
+                              and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                              and type T.Constant.const = T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                              and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                              and type T.Region.region = T.Region.region
+                              and type T.ccexp = T.ccexp
+                              and type T.fexp = T.fexp
+                              (* and type T.labexp = T.labexp *)
+                              and type T.mlrisc = T.mlrisc
+                              and type T.oper = T.oper
+                              and type T.rep = T.rep
+                              and type T.rexp = T.rexp
+                              and type T.stm = T.stm
     ) : PSEUDO_OPS_BASIS = 
 
 struct
diff --git a/ppc/instructions/ppcCompInstrExt.sml b/ppc/instructions/ppcCompInstrExt.sml
index b2354cd..d7b6562 100644
--- a/ppc/instructions/ppcCompInstrExt.sml
+++ b/ppc/instructions/ppcCompInstrExt.sml
@@ -9,11 +9,54 @@
 signature PPCCOMP_INSTR_EXT =
   sig
     structure I : PPCINSTR
-    structure TS : MLTREE_STREAM
-      where T = I.T
-    structure CFG : CONTROL_FLOW_GRAPH 
-      where I = I
-	and P = TS.S.P
+    structure TS : MLTREE_STREAM (* where T = I.T *)
+                   where type T.Basis.cond = I.T.Basis.cond
+                     and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                     and type T.Basis.ext = I.T.Basis.ext
+                     and type T.Basis.fcond = I.T.Basis.fcond
+                     and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                     and type T.Constant.const = I.T.Constant.const
+                     and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                     and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                     and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                     and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                     and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                     and type T.Region.region = I.T.Region.region
+                     and type T.ccexp = I.T.ccexp
+                     and type T.fexp = I.T.fexp
+                     (* and type T.labexp = I.T.labexp *)
+                     and type T.mlrisc = I.T.mlrisc
+                     and type T.oper = I.T.oper
+                     and type T.rep = I.T.rep
+                     and type T.rexp = I.T.rexp
+                     and type T.stm = I.T.stm
+    structure CFG : CONTROL_FLOW_GRAPH  (* where I = I and  and P = TS.S.P *)
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
+                    where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                      and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                      and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                      and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                      and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                      and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                      and type P.T.Constant.const = TS.S.P.T.Constant.const
+                      and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                      and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                      and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                      and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                      and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                      and type P.T.Region.region = TS.S.P.T.Region.region
+                      and type P.T.ccexp = TS.S.P.T.ccexp
+                      and type P.T.fexp = TS.S.P.T.fexp
+                      (* and type P.T.labexp = TS.S.P.T.labexp *)
+                      and type P.T.mlrisc = TS.S.P.T.mlrisc
+                      and type P.T.oper = TS.S.P.T.oper
+                      and type P.T.rep = TS.S.P.T.rep
+                      and type P.T.rexp = TS.S.P.T.rexp
+                      and type P.T.stm = TS.S.P.T.stm
 
     type reducer = 
       (I.instruction, I.C.cellset, I.operand, I.addressing_mode, CFG.cfg) TS.reducer
@@ -28,12 +71,54 @@ signature PPCCOMP_INSTR_EXT =
 functor PPCCompInstrExt (
 
     structure I : PPCINSTR
-    structure TS  : MLTREE_STREAM
-      where T = I.T
-    structure CFG : CONTROL_FLOW_GRAPH 
-      where P = TS.S.P
-	and I = I
-
+    structure TS  : MLTREE_STREAM (* where T = I.T *)
+                    where type T.Basis.cond = I.T.Basis.cond
+                      and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                      and type T.Basis.ext = I.T.Basis.ext
+                      and type T.Basis.fcond = I.T.Basis.fcond
+                      and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                      and type T.Constant.const = I.T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                      and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                      and type T.Region.region = I.T.Region.region
+                      and type T.ccexp = I.T.ccexp
+                      and type T.fexp = I.T.fexp
+                      (* and type T.labexp = I.T.labexp *)
+                      and type T.mlrisc = I.T.mlrisc
+                      and type T.oper = I.T.oper
+                      and type T.rep = I.T.rep
+                      and type T.rexp = I.T.rexp
+                      and type T.stm = I.T.stm
+    structure CFG : CONTROL_FLOW_GRAPH (* where P = TS.S.P and I = I *)
+                    where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                      and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                      and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                      and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                      and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                      and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                      and type P.T.Constant.const = TS.S.P.T.Constant.const
+                      and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                      and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                      and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                      and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                      and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                      and type P.T.Region.region = TS.S.P.T.Region.region
+                      and type P.T.ccexp = TS.S.P.T.ccexp
+                      and type P.T.fexp = TS.S.P.T.fexp
+                      (* and type P.T.labexp = TS.S.P.T.labexp *)
+                      and type P.T.mlrisc = TS.S.P.T.mlrisc
+                      and type P.T.oper = TS.S.P.T.oper
+                      and type P.T.rep = TS.S.P.T.rep
+                      and type P.T.rexp = TS.S.P.T.rexp
+                      and type P.T.stm = TS.S.P.T.stm
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
   ) : PPCCOMP_INSTR_EXT =  struct
 
     structure CFG = CFG
diff --git a/ppc/instructions/ppcInstr.sml b/ppc/instructions/ppcInstr.sml
index c6d3ec4..4d654e2 100644
--- a/ppc/instructions/ppcInstr.sml
+++ b/ppc/instructions/ppcInstr.sml
@@ -8,7 +8,16 @@
 signature PPCINSTR =
 sig
    structure C : PPCCELLS
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    structure T : MLTREE
    structure Constant: CONSTANT
    structure Region : REGION
diff --git a/ppc/instructions/ppcProps.sml b/ppc/instructions/ppcProps.sml
index d1dd455..ee9be9b 100644
--- a/ppc/instructions/ppcProps.sml
+++ b/ppc/instructions/ppcProps.sml
@@ -5,8 +5,48 @@
 
 functor PPCProps
    ( structure PPCInstr : PPCINSTR
-     structure MLTreeEval : MLTREE_EVAL where T = PPCInstr.T
-     structure MLTreeHash : MLTREE_HASH where T = PPCInstr.T
+     structure MLTreeEval : MLTREE_EVAL (* where T = PPCInstr.T *)
+                            where type T.Basis.cond = PPCInstr.T.Basis.cond
+                              and type T.Basis.div_rounding_mode = PPCInstr.T.Basis.div_rounding_mode
+                              and type T.Basis.ext = PPCInstr.T.Basis.ext
+                              and type T.Basis.fcond = PPCInstr.T.Basis.fcond
+                              and type T.Basis.rounding_mode = PPCInstr.T.Basis.rounding_mode
+                              and type T.Constant.const = PPCInstr.T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) PPCInstr.T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) PPCInstr.T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) PPCInstr.T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) PPCInstr.T.Extension.sx
+                              and type T.I.div_rounding_mode = PPCInstr.T.I.div_rounding_mode
+                              and type T.Region.region = PPCInstr.T.Region.region
+                              and type T.ccexp = PPCInstr.T.ccexp
+                              and type T.fexp = PPCInstr.T.fexp
+                              (* and type T.labexp = PPCInstr.T.labexp *)
+                              and type T.mlrisc = PPCInstr.T.mlrisc
+                              and type T.oper = PPCInstr.T.oper
+                              and type T.rep = PPCInstr.T.rep
+                              and type T.rexp = PPCInstr.T.rexp
+                              and type T.stm = PPCInstr.T.stm
+     structure MLTreeHash : MLTREE_HASH (* where T = PPCInstr.T *)
+                            where type T.Basis.cond = PPCInstr.T.Basis.cond
+                              and type T.Basis.div_rounding_mode = PPCInstr.T.Basis.div_rounding_mode
+                              and type T.Basis.ext = PPCInstr.T.Basis.ext
+                              and type T.Basis.fcond = PPCInstr.T.Basis.fcond
+                              and type T.Basis.rounding_mode = PPCInstr.T.Basis.rounding_mode
+                              and type T.Constant.const = PPCInstr.T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) PPCInstr.T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) PPCInstr.T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) PPCInstr.T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) PPCInstr.T.Extension.sx
+                              and type T.I.div_rounding_mode = PPCInstr.T.I.div_rounding_mode
+                              and type T.Region.region = PPCInstr.T.Region.region
+                              and type T.ccexp = PPCInstr.T.ccexp
+                              and type T.fexp = PPCInstr.T.fexp
+                              (* and type T.labexp = PPCInstr.T.labexp *)
+                              and type T.mlrisc = PPCInstr.T.mlrisc
+                              and type T.oper = PPCInstr.T.oper
+                              and type T.rep = PPCInstr.T.rep
+                              and type T.rexp = PPCInstr.T.rexp
+                              and type T.stm = PPCInstr.T.stm
     ) : INSN_PROPERTIES = 
 struct
   structure I = PPCInstr
diff --git a/ppc/mltree/ppc.sml b/ppc/mltree/ppc.sml
index 94d81f6..a749c02 100644
--- a/ppc/mltree/ppc.sml
+++ b/ppc/mltree/ppc.sml
@@ -10,10 +10,76 @@
 
 functor PPC
   (structure PPCInstr : PPCINSTR
-   structure PseudoInstrs : PPC_PSEUDO_INSTR 
-   			where I = PPCInstr
-   structure ExtensionComp : MLTREE_EXTENSION_COMP 
-   			where I = PPCInstr and T = PPCInstr.T
+   structure PseudoInstrs : PPC_PSEUDO_INSTR (* where I = PPCInstr *)
+                            where type I.Constant.const = PPCInstr.Constant.const
+                              and type I.Region.region = PPCInstr.Region.region
+                              and type I.T.Basis.cond = PPCInstr.T.Basis.cond
+                              and type I.T.Basis.div_rounding_mode = PPCInstr.T.Basis.div_rounding_mode
+                              and type I.T.Basis.ext = PPCInstr.T.Basis.ext
+                              and type I.T.Basis.fcond = PPCInstr.T.Basis.fcond
+                              and type I.T.Basis.rounding_mode = PPCInstr.T.Basis.rounding_mode
+                              and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) PPCInstr.T.Extension.ccx
+                              and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) PPCInstr.T.Extension.fx
+                              and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) PPCInstr.T.Extension.rx
+                              and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) PPCInstr.T.Extension.sx
+                              and type I.T.I.div_rounding_mode = PPCInstr.T.I.div_rounding_mode
+                              and type I.T.ccexp = PPCInstr.T.ccexp
+                              and type I.T.fexp = PPCInstr.T.fexp
+                              (* and type I.T.labexp = PPCInstr.T.labexp *)
+                              and type I.T.mlrisc = PPCInstr.T.mlrisc
+                              and type I.T.oper = PPCInstr.T.oper
+                              and type I.T.rep = PPCInstr.T.rep
+                              and type I.T.rexp = PPCInstr.T.rexp
+                              and type I.T.stm = PPCInstr.T.stm
+                              and type I.arith = PPCInstr.arith
+                              and type I.arithi = PPCInstr.arithi
+                              and type I.bit = PPCInstr.bit
+                              and type I.bo = PPCInstr.bo
+                              and type I.ccarith = PPCInstr.ccarith
+                              and type I.cmp = PPCInstr.cmp
+                              and type I.ea = PPCInstr.ea
+                              and type I.farith = PPCInstr.farith
+                              and type I.farith3 = PPCInstr.farith3
+                              and type I.fcmp = PPCInstr.fcmp
+                              and type I.fload = PPCInstr.fload
+                              and type I.fstore = PPCInstr.fstore
+                              and type I.funary = PPCInstr.funary
+                              and type I.instr = PPCInstr.instr
+                              and type I.instruction = PPCInstr.instruction
+                              and type I.load = PPCInstr.load
+                              and type I.operand = PPCInstr.operand
+                              and type I.rotate = PPCInstr.rotate
+                              and type I.rotatei = PPCInstr.rotatei
+                              and type I.spr = PPCInstr.spr
+                              and type I.store = PPCInstr.store
+                              and type I.unary = PPCInstr.unary
+                              and type I.xerbit = PPCInstr.xerbit
+   structure ExtensionComp : MLTREE_EXTENSION_COMP (* where I = PPCInstr and T = PPCInstr.T *)
+                             where type I.addressing_mode = PPCInstr.addressing_mode
+                               and type I.ea = PPCInstr.ea
+                               and type I.instr = PPCInstr.instr
+                               and type I.instruction = PPCInstr.instruction
+                               and type I.operand = PPCInstr.operand
+                             where type T.Basis.cond = PPCInstr.T.Basis.cond
+                               and type T.Basis.div_rounding_mode = PPCInstr.T.Basis.div_rounding_mode
+                               and type T.Basis.ext = PPCInstr.T.Basis.ext
+                               and type T.Basis.fcond = PPCInstr.T.Basis.fcond
+                               and type T.Basis.rounding_mode = PPCInstr.T.Basis.rounding_mode
+                               and type T.Constant.const = PPCInstr.T.Constant.const
+                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) PPCInstr.T.Extension.ccx
+                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) PPCInstr.T.Extension.fx
+                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) PPCInstr.T.Extension.rx
+                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) PPCInstr.T.Extension.sx
+                               and type T.I.div_rounding_mode = PPCInstr.T.I.div_rounding_mode
+                               and type T.Region.region = PPCInstr.T.Region.region
+                               and type T.ccexp = PPCInstr.T.ccexp
+                               and type T.fexp = PPCInstr.T.fexp
+                               (* and type T.labexp = PPCInstr.T.labexp *)
+                               and type T.mlrisc = PPCInstr.T.mlrisc
+                               and type T.oper = PPCInstr.T.oper
+                               and type T.rep = PPCInstr.T.rep
+                               and type T.rexp = PPCInstr.T.rexp
+                               and type T.stm = PPCInstr.T.stm
 
    (* 
     * Support 64 bit mode? 
@@ -71,7 +137,7 @@ struct
   (*  
    * Integer multiplication 
    *)
-  functor Multiply32 = MLTreeMult
+  structure Mulu32 = MLTreeMult
     (structure I = I
      structure T = T
      structure CB = CellsBasis
@@ -84,40 +150,64 @@ struct
      fun slli{r,i,d} = [I.INSTR(SLLI32{r=r,i=i,d=d})]
      fun srli{r,i,d} = [I.INSTR(SRLI32{r=r,i=i,d=d})]
      fun srai{r,i,d} = [I.arithi{oper=I.SRAWI,rt=d,ra=r,im=I.ImmedOp i}]
-    )
 
-  structure Mulu32 = Multiply32
-    (val trapping = false
+     val trapping = false
      val multCost = multCost
      fun addv{r1,r2,d}=[I.arith{oper=I.ADD,ra=r1,rb=r2,rt=d,Rc=false,OE=false}]
      fun subv{r1,r2,d}=[I.arith{oper=I.SUBF,ra=r2,rb=r1,rt=d,Rc=false,OE=false}]
      val sh1addv = NONE
      val sh2addv = NONE
      val sh3addv = NONE
-    )
-    (val signed = false)
 
-  structure Muls32 = Multiply32
-    (val trapping = false
+     val signed = false)
+
+  structure Muls32 = MLTreeMult
+    (structure I = I
+     structure T = T
+     structure CB = CellsBasis
+     val intTy = 32
+     type arg  = {r1:CB.cell,r2:CB.cell,d:CB.cell}
+     type argi = {r:CB.cell,i:int,d:CB.cell}
+
+     fun mov{r,d} = COPY{dst=[d],src=[r],tmp=NONE}
+     fun add{r1,r2,d}= I.arith{oper=I.ADD,ra=r1,rb=r2,rt=d,Rc=false,OE=false}
+     fun slli{r,i,d} = [I.INSTR(SLLI32{r=r,i=i,d=d})]
+     fun srli{r,i,d} = [I.INSTR(SRLI32{r=r,i=i,d=d})]
+     fun srai{r,i,d} = [I.arithi{oper=I.SRAWI,rt=d,ra=r,im=I.ImmedOp i}]
+
+     val trapping = false
      val multCost = multCost
      fun addv{r1,r2,d}=[I.arith{oper=I.ADD,ra=r1,rb=r2,rt=d,Rc=false,OE=false}]
      fun subv{r1,r2,d}=[I.arith{oper=I.SUBF,ra=r2,rb=r1,rt=d,Rc=false,OE=false}]
      val sh1addv = NONE
      val sh2addv = NONE
      val sh3addv = NONE
-    )
-    (val signed = true)
 
-  structure Mult32 = Multiply32
-    (val trapping = true
+     val signed = true)
+
+  structure Mult32 = MLTreeMult
+    (structure I = I
+     structure T = T
+     structure CB = CellsBasis
+     val intTy = 32
+     type arg  = {r1:CB.cell,r2:CB.cell,d:CB.cell}
+     type argi = {r:CB.cell,i:int,d:CB.cell}
+
+     fun mov{r,d} = COPY{dst=[d],src=[r],tmp=NONE}
+     fun add{r1,r2,d}= I.arith{oper=I.ADD,ra=r1,rb=r2,rt=d,Rc=false,OE=false}
+     fun slli{r,i,d} = [I.INSTR(SLLI32{r=r,i=i,d=d})]
+     fun srli{r,i,d} = [I.INSTR(SRLI32{r=r,i=i,d=d})]
+     fun srai{r,i,d} = [I.arithi{oper=I.SRAWI,rt=d,ra=r,im=I.ImmedOp i}]
+
+     val trapping = true
      val multCost = multCost
      fun addv{r1,r2,d} = error "Mult32.addv"
      fun subv{r1,r2,d} = error "Mult32.subv"
      val sh1addv = NONE
      val sh2addv = NONE
      val sh3addv = NONE
-    )
-    (val signed = true)
+
+     val signed = true)
 
   fun selectInstructions
       (instrStream as 
diff --git a/ra/arch-spill-instr.sig b/ra/arch-spill-instr.sig
index b91475f..a76c52c 100644
--- a/ra/arch-spill-instr.sig
+++ b/ra/arch-spill-instr.sig
@@ -10,7 +10,16 @@
  *)
 signature ARCH_SPILL_INSTR = sig
   structure I : INSTRUCTIONS
-  structure CB : CELLS_BASIS = CellsBasis
+  structure CB : CELLS_BASIS (* = CellsBasis *)
+                 where type CellSet.cellset = CellsBasis.CellSet.cellset
+                   and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                   and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                   and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                   and type cell = CellsBasis.cell
+                   and type cellColor = CellsBasis.cellColor
+                   and type cellkind = CellsBasis.cellkind
+                   and type cellkindDesc = CellsBasis.cellkindDesc
+                   and type cellkindInfo = CellsBasis.cellkindInfo
   
   val spillToEA :
       CB.cellkind ->
diff --git a/ra/cluster-ra.sml b/ra/cluster-ra.sml
index 129fe40..edef1e1 100644
--- a/ra/cluster-ra.sml
+++ b/ra/cluster-ra.sml
@@ -14,13 +14,45 @@
 
 functor ClusterRA
    (structure Asm       : INSTRUCTION_EMITTER
-    structure Flowgraph : CONTROL_FLOW_GRAPH
-    			where I = Asm.I 
-			  and P = Asm.S.P
-    structure InsnProps : INSN_PROPERTIES
-    			where I = Flowgraph.I 
-    structure Spill : RA_SPILL 
-    			where I = Flowgraph.I
+    structure Flowgraph : CONTROL_FLOW_GRAPH (* where I = Asm.I and P = Asm.S.P *)
+                          where type I.addressing_mode = Asm.I.addressing_mode
+                            and type I.ea = Asm.I.ea
+                            and type I.instr = Asm.I.instr
+                            and type I.instruction = Asm.I.instruction
+                            and type I.operand = Asm.I.operand
+                          where type P.Client.pseudo_op = Asm.S.P.Client.pseudo_op
+                            and type P.T.Basis.cond = Asm.S.P.T.Basis.cond
+                            and type P.T.Basis.div_rounding_mode = Asm.S.P.T.Basis.div_rounding_mode
+                            and type P.T.Basis.ext = Asm.S.P.T.Basis.ext
+                            and type P.T.Basis.fcond = Asm.S.P.T.Basis.fcond
+                            and type P.T.Basis.rounding_mode = Asm.S.P.T.Basis.rounding_mode
+                            and type P.T.Constant.const = Asm.S.P.T.Constant.const
+                            and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Asm.S.P.T.Extension.ccx
+                            and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Asm.S.P.T.Extension.fx
+                            and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Asm.S.P.T.Extension.rx
+                            and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Asm.S.P.T.Extension.sx
+                            and type P.T.I.div_rounding_mode = Asm.S.P.T.I.div_rounding_mode
+                            and type P.T.Region.region = Asm.S.P.T.Region.region
+                            and type P.T.ccexp = Asm.S.P.T.ccexp
+                            and type P.T.fexp = Asm.S.P.T.fexp
+                            (* and type P.T.labexp = Asm.S.P.T.labexp *)
+                            and type P.T.mlrisc = Asm.S.P.T.mlrisc
+                            and type P.T.oper = Asm.S.P.T.oper
+                            and type P.T.rep = Asm.S.P.T.rep
+                            and type P.T.rexp = Asm.S.P.T.rexp
+                            and type P.T.stm = Asm.S.P.T.stm
+    structure InsnProps : INSN_PROPERTIES (* where I = Flowgraph.I *)
+                          where type I.addressing_mode = Flowgraph.I.addressing_mode
+                            and type I.ea = Flowgraph.I.ea
+                            and type I.instr = Flowgraph.I.instr
+                            and type I.instruction = Flowgraph.I.instruction
+                            and type I.operand = Flowgraph.I.operand
+    structure Spill     : RA_SPILL (* where I = Flowgraph.I *)
+                          where type I.addressing_mode = Flowgraph.I.addressing_mode
+                            and type I.ea = Flowgraph.I.ea
+                            and type I.instr = Flowgraph.I.instr
+                            and type I.instruction = Flowgraph.I.instruction
+                            and type I.operand = Flowgraph.I.operand
    ) : RA_FLOWGRAPH =
 struct
    structure CFG    = Flowgraph
diff --git a/ra/ra-core.sig b/ra/ra-core.sig
index 3127769..1cecd17 100644
--- a/ra/ra-core.sig
+++ b/ra/ra-core.sig
@@ -11,7 +11,26 @@
 signature RA_CORE = 
 sig
 
-   structure G  : RA_GRAPH = RAGraph
+   structure G  : RA_GRAPH (* = RAGraph *)
+                  where type C.CellSet.cellset = RAGraph.C.CellSet.cellset
+                    and type 'a C.ColorTable.hash_table = 'a RAGraph.C.ColorTable.hash_table
+                    and type 'a C.HashTable.hash_table = 'a RAGraph.C.HashTable.hash_table
+                    and type C.SortedCells.sorted_cells = RAGraph.C.SortedCells.sorted_cells
+                    and type C.cell = RAGraph.C.cell
+                    and type C.cellColor = RAGraph.C.cellColor
+                    and type C.cellkind = RAGraph.C.cellkind
+                    and type C.cellkindDesc = RAGraph.C.cellkindDesc
+                    and type C.cellkindInfo = RAGraph.C.cellkindInfo
+                    and type 'a PPtHashTable.hash_table = 'a RAGraph.PPtHashTable.hash_table
+                    and type 'a SpillLocHashTable.hash_table = 'a RAGraph.SpillLocHashTable.hash_table
+                    and type interferenceGraph = RAGraph.interferenceGraph
+                    and type move = RAGraph.move
+                    and type moveKind = RAGraph.moveKind
+                    and type moveStatus = RAGraph.moveStatus
+                    and type node = RAGraph.node
+                    and type nodeStatus = RAGraph.nodeStatus
+                    and type spillLoc = RAGraph.spillLoc
+                    and type trailInfo = RAGraph.trailInfo
    structure BM : RA_BITMATRIX
    structure MV : RA_PRIORITY_QUEUE where type elem = G.move
    structure FZ : RA_PRIORITY_QUEUE where type elem = G.node
diff --git a/ra/ra-deadCodeE.sml b/ra/ra-deadCodeE.sml
index 8f05f89..a7bb8c8 100644
--- a/ra/ra-deadCodeE.sml
+++ b/ra/ra-deadCodeE.sml
@@ -6,9 +6,9 @@
  * -- Allen
  *)
 
-functor RADeadCodeElim
-   (Flowgraph : RA_FLOWGRAPH)
-   (  (* check for dead code on these cellkinds only *)
+functor RADeadCodeElim (
+    structure Flowgraph : RA_FLOWGRAPH
+      (* check for dead code on these cellkinds only *)
     val cellkind : CellsBasis.cellkind -> bool
       (* Dead registers are stored here. *)
     val deadRegs : bool IntHashTable.hash_table 
diff --git a/ra/ra-flowgraph.sig b/ra/ra-flowgraph.sig
index 6837166..d7b6981 100644
--- a/ra/ra-flowgraph.sig
+++ b/ra/ra-flowgraph.sig
@@ -12,10 +12,34 @@ sig
 
    structure I     : INSTRUCTIONS
    structure C     : CELLS  
-   structure G     : RA_GRAPH = RAGraph
+   structure G     : RA_GRAPH (* = RAGraph *)
+                     where type C.CellSet.cellset = RAGraph.C.CellSet.cellset
+                       and type 'a C.ColorTable.hash_table = 'a RAGraph.C.ColorTable.hash_table
+                       and type 'a C.HashTable.hash_table = 'a RAGraph.C.HashTable.hash_table
+                       and type C.SortedCells.sorted_cells = RAGraph.C.SortedCells.sorted_cells
+                       and type C.cell = RAGraph.C.cell
+                       and type C.cellColor = RAGraph.C.cellColor
+                       and type C.cellkind = RAGraph.C.cellkind
+                       and type C.cellkindDesc = RAGraph.C.cellkindDesc
+                       and type C.cellkindInfo = RAGraph.C.cellkindInfo
+                       and type 'a PPtHashTable.hash_table = 'a RAGraph.PPtHashTable.hash_table
+                       and type 'a SpillLocHashTable.hash_table = 'a RAGraph.SpillLocHashTable.hash_table
+                       and type interferenceGraph = RAGraph.interferenceGraph
+                       and type move = RAGraph.move
+                       and type moveKind = RAGraph.moveKind
+                       and type moveStatus = RAGraph.moveStatus
+                       and type node = RAGraph.node
+                       and type nodeStatus = RAGraph.nodeStatus
+                       and type spillLoc = RAGraph.spillLoc
+                       and type trailInfo = RAGraph.trailInfo
    structure Spill : RA_SPILL
-     sharing Spill.I = I
-     sharing I.C = C 
+     (* sharing Spill.I = I *)
+     where type I.addressing_mode = I.addressing_mode
+       and type I.ea = I.ea
+       and type I.instr = I.instr
+       and type I.instruction = I.instruction
+       and type I.operand = I.operand
+     (* sharing I.C = C *)
 
    type flowgraph
 
diff --git a/ra/ra-graph.sig b/ra/ra-graph.sig
index 67f7d89..db2435b 100644
--- a/ra/ra-graph.sig
+++ b/ra/ra-graph.sig
@@ -11,7 +11,10 @@ signature RA_GRAPH =
 sig
 
   structure C : CELLS_BASIS
-  structure BM : RA_BITMATRIX = RaBitmatrix
+  structure BM : RA_BITMATRIX (* = RaBitmatrix *)
+                 where type bitMatrix = RaBitmatrix.bitMatrix
+                   and type bucket = RaBitmatrix.bucket
+                   and type hashTable = RaBitmatrix.hashTable
   (*
    * The following are the data structures used in the register allocator.
    *)
diff --git a/ra/ra-spill-with-renaming.sml b/ra/ra-spill-with-renaming.sml
index d5d2b8b..ba4dff1 100644
--- a/ra/ra-spill-with-renaming.sml
+++ b/ra/ra-spill-with-renaming.sml
@@ -79,16 +79,14 @@
  * -- Allen
  *)
 
-local
-
-   val debug = false
-
-in
-
 functor RASpillWithRenaming
    (structure InsnProps : INSN_PROPERTIES 
-    structure Asm       : INSTRUCTION_EMITTER
-    			where I = InsnProps.I
+    structure Asm       : INSTRUCTION_EMITTER (* where I = InsnProps.I *)
+                          where type I.addressing_mode = InsnProps.I.addressing_mode
+                            and type I.ea = InsnProps.I.ea
+                            and type I.instr = InsnProps.I.instr
+                            and type I.instruction = InsnProps.I.instruction
+                            and type I.operand = InsnProps.I.operand
 
     (* Spilling a variable v creates tiny live-ranges at all its definitions
      * and uses.  The following parameter is the maximal distance of
@@ -107,6 +105,7 @@ functor RASpillWithRenaming
     val keep_multiple_values : bool ref
    ) : RA_SPILL =
 struct
+   val debug = false
 
    structure I      = InsnProps.I
    structure P      = InsnProps
@@ -584,5 +583,3 @@ struct
    in  spillRewrite
    end
 end
-
-end (* local *)
diff --git a/ra/ra-spill.sig b/ra/ra-spill.sig
index 2d19e00..39279de 100644
--- a/ra/ra-spill.sig
+++ b/ra/ra-spill.sig
@@ -7,11 +7,39 @@ signature RA_SPILL =
 sig
 
    structure I : INSTRUCTIONS
-   structure G : RA_GRAPH = RAGraph
+   structure G : RA_GRAPH (* = RAGraph *)
+                 where type C.CellSet.cellset = RAGraph.C.CellSet.cellset
+                   and type 'a C.ColorTable.hash_table = 'a RAGraph.C.ColorTable.hash_table
+                   and type 'a C.HashTable.hash_table = 'a RAGraph.C.HashTable.hash_table
+                   and type C.SortedCells.sorted_cells = RAGraph.C.SortedCells.sorted_cells
+                   and type C.cell = RAGraph.C.cell
+                   and type C.cellColor = RAGraph.C.cellColor
+                   and type C.cellkind = RAGraph.C.cellkind
+                   and type C.cellkindDesc = RAGraph.C.cellkindDesc
+                   and type C.cellkindInfo = RAGraph.C.cellkindInfo
+                   and type 'a PPtHashTable.hash_table = 'a RAGraph.PPtHashTable.hash_table
+                   and type 'a SpillLocHashTable.hash_table = 'a RAGraph.SpillLocHashTable.hash_table
+                   and type interferenceGraph = RAGraph.interferenceGraph
+                   and type move = RAGraph.move
+                   and type moveKind = RAGraph.moveKind
+                   and type moveStatus = RAGraph.moveStatus
+                   and type node = RAGraph.node
+                   and type nodeStatus = RAGraph.nodeStatus
+                   and type spillLoc = RAGraph.spillLoc
+                   and type trailInfo = RAGraph.trailInfo
    structure C : CELLS 
-      sharing I.C = C
+      (* sharing I.C = C *)
 
-   structure CB : CELLS_BASIS = CellsBasis 
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    type copyInstr =
           (CB.cell list * CB.cell list) * I.instruction -> I.instruction list
 
diff --git a/ra/ra-spill.sml b/ra/ra-spill.sml
index d89a67a..8df619e 100644
--- a/ra/ra-spill.sml
+++ b/ra/ra-spill.sml
@@ -48,18 +48,17 @@
  * -- Allen
  *)
 
-local
-
-   val debug = false
-
-in
-
 functor RASpill
    (structure InsnProps : INSN_PROPERTIES
-    structure Asm       : INSTRUCTION_EMITTER
-    			where I = InsnProps.I
+    structure Asm       : INSTRUCTION_EMITTER (* where I = InsnProps.I *)
+                          where type I.addressing_mode = InsnProps.I.addressing_mode
+                            and type I.ea = InsnProps.I.ea
+                            and type I.instr = InsnProps.I.instr
+                            and type I.instruction = InsnProps.I.instruction
+                            and type I.operand = InsnProps.I.operand
    ) : RA_SPILL =
 struct
+   val debug = false
 
    structure I      = InsnProps.I
    structure P      = InsnProps
@@ -451,5 +450,3 @@ struct
    in  spillRewrite
    end
 end
-
-end (* local *)
diff --git a/ra/ra-spillheur.sig b/ra/ra-spillheur.sig
index 50f0224..77aeeb5 100644
--- a/ra/ra-spillheur.sig
+++ b/ra/ra-spillheur.sig
@@ -3,7 +3,26 @@
  *)
 signature RA_SPILL_HEURISTICS =
 sig
-   structure G : RA_GRAPH = RAGraph
+   structure G : RA_GRAPH (* = RAGraph *)
+                 where type C.CellSet.cellset = RAGraph.C.CellSet.cellset
+                   and type 'a C.ColorTable.hash_table = 'a RAGraph.C.ColorTable.hash_table
+                   and type 'a C.HashTable.hash_table = 'a RAGraph.C.HashTable.hash_table
+                   and type C.SortedCells.sorted_cells = RAGraph.C.SortedCells.sorted_cells
+                   and type C.cell = RAGraph.C.cell
+                   and type C.cellColor = RAGraph.C.cellColor
+                   and type C.cellkind = RAGraph.C.cellkind
+                   and type C.cellkindDesc = RAGraph.C.cellkindDesc
+                   and type C.cellkindInfo = RAGraph.C.cellkindInfo
+                   and type 'a PPtHashTable.hash_table = 'a RAGraph.PPtHashTable.hash_table
+                   and type 'a SpillLocHashTable.hash_table = 'a RAGraph.SpillLocHashTable.hash_table
+                   and type interferenceGraph = RAGraph.interferenceGraph
+                   and type move = RAGraph.move
+                   and type moveKind = RAGraph.moveKind
+                   and type moveStatus = RAGraph.moveStatus
+                   and type node = RAGraph.node
+                   and type nodeStatus = RAGraph.nodeStatus
+                   and type spillLoc = RAGraph.spillLoc
+                   and type trailInfo = RAGraph.trailInfo
 
    exception NoCandidate
 
diff --git a/ra/ra.sig b/ra/ra.sig
index 7fdacac..549c5a4 100644
--- a/ra/ra.sig
+++ b/ra/ra.sig
@@ -9,9 +9,23 @@ sig
    structure I : INSTRUCTIONS
    structure C : CELLS
    structure F : RA_FLOWGRAPH 
-      sharing F.I   = I
-      sharing I.C   = C
-   structure CB : CELLS_BASIS = CellsBasis
+      (* sharing F.I = I *)
+     where type I.addressing_mode = I.addressing_mode
+       and type I.ea = I.ea
+       and type I.instr = I.instr
+       and type I.instruction = I.instruction
+       and type I.operand = I.operand
+      (* sharing I.C = C *)
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
 
    type getreg = { pref  : CB.cell_id list,
                    stamp : int, 
diff --git a/ra/ra.sml b/ra/ra.sml
index 388f0b2..bf66604 100644
--- a/ra/ra.sml
+++ b/ra/ra.sml
@@ -37,9 +37,10 @@
  * -- Allen Leung (leunga@cs.nyu.edu)
  *)
 
-functor RegisterAllocator
-   (SpillHeuristics : RA_SPILL_HEURISTICS) 
-   (Flowgraph : RA_FLOWGRAPH where C = CellsBasis) : RA =
+functor RegisterAllocator (
+   structure SpillHeuristics : RA_SPILL_HEURISTICS
+   structure Flowgraph : RA_FLOWGRAPH (* where C = CellsBasis *)
+) : RA =
 struct
 
    structure F      = Flowgraph
diff --git a/ra/region-based-ra.sml b/ra/region-based-ra.sml
index 7166945..e31e981 100644
--- a/ra/region-based-ra.sml
+++ b/ra/region-based-ra.sml
@@ -4,10 +4,10 @@
  * it into manageable pieces to be allocated.
  *)
 functor RegionBasedRA
-   (RA : RA)
-   (FlowgraphPartitioner : RA_FLOWGRAPH_PARTITIONER 
+   (structure RA : RA
+    structure FlowgraphPartitioner : RA_FLOWGRAPH_PARTITIONER
        where type flowgraph = RA.F.flowgraph
-       where C = RA.C
+       (* where C = RA.C *)
    ) : RA =
 struct
 
diff --git a/ra/risc-ra.sml b/ra/risc-ra.sml
index d5d2ec3..b965871 100644
--- a/ra/risc-ra.sml
+++ b/ra/risc-ra.sml
@@ -5,17 +5,57 @@
  *)
 functor RISC_RA
   (structure I         : INSTRUCTIONS
-   structure Asm       : INSTRUCTION_EMITTER
-   			where I = I 
-   structure CFG       : CONTROL_FLOW_GRAPH 
-   			where I = I
-		          and P = Asm.S.P
-   structure InsnProps : INSN_PROPERTIES
-   			where I = I
-   structure Rewrite   : REWRITE_INSTRUCTIONS
-   			where I = I
-   structure SpillInstr : ARCH_SPILL_INSTR
-                        where I = I
+   structure Asm        : INSTRUCTION_EMITTER (* where I = I *)
+                          where type I.addressing_mode = I.addressing_mode
+                            and type I.ea = I.ea
+                            and type I.instr = I.instr
+                            and type I.instruction = I.instruction
+                            and type I.operand = I.operand
+   structure CFG        : CONTROL_FLOW_GRAPH (* where I = I and P = Asm.S.P *)
+                          where type I.addressing_mode = I.addressing_mode
+                            and type I.ea = I.ea
+                            and type I.instr = I.instr
+                            and type I.instruction = I.instruction
+                            and type I.operand = I.operand
+                          where type P.Client.pseudo_op = Asm.S.P.Client.pseudo_op
+                            and type P.T.Basis.cond = Asm.S.P.T.Basis.cond
+                            and type P.T.Basis.div_rounding_mode = Asm.S.P.T.Basis.div_rounding_mode
+                            and type P.T.Basis.ext = Asm.S.P.T.Basis.ext
+                            and type P.T.Basis.fcond = Asm.S.P.T.Basis.fcond
+                            and type P.T.Basis.rounding_mode = Asm.S.P.T.Basis.rounding_mode
+                            and type P.T.Constant.const = Asm.S.P.T.Constant.const
+                            and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) Asm.S.P.T.Extension.ccx
+                            and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) Asm.S.P.T.Extension.fx
+                            and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) Asm.S.P.T.Extension.rx
+                            and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) Asm.S.P.T.Extension.sx
+                            and type P.T.I.div_rounding_mode = Asm.S.P.T.I.div_rounding_mode
+                            and type P.T.Region.region = Asm.S.P.T.Region.region
+                            and type P.T.ccexp = Asm.S.P.T.ccexp
+                            and type P.T.fexp = Asm.S.P.T.fexp
+                            (* and type P.T.labexp = Asm.S.P.T.labexp *)
+                            and type P.T.mlrisc = Asm.S.P.T.mlrisc
+                            and type P.T.oper = Asm.S.P.T.oper
+                            and type P.T.rep = Asm.S.P.T.rep
+                            and type P.T.rexp = Asm.S.P.T.rexp
+                            and type P.T.stm = Asm.S.P.T.stm
+   structure InsnProps  : INSN_PROPERTIES (* where I = I *)
+                          where type I.addressing_mode = I.addressing_mode
+                            and type I.ea = I.ea
+                            and type I.instr = I.instr
+                            and type I.instruction = I.instruction
+                            and type I.operand = I.operand
+   structure Rewrite    : REWRITE_INSTRUCTIONS (* where I = I *)
+                          where type I.addressing_mode = I.addressing_mode
+                            and type I.ea = I.ea
+                            and type I.instr = I.instr
+                            and type I.instruction = I.instruction
+                            and type I.operand = I.operand
+   structure SpillInstr : ARCH_SPILL_INSTR (* where I = I *)
+                          where type I.addressing_mode = I.addressing_mode
+                            and type I.ea = I.ea
+                            and type I.instr = I.instr
+                            and type I.instruction = I.instruction
+                            and type I.operand = I.operand
 
       (* Spilling heuristics determines which node should be spilled.
        * You can use Chaitin, ChowHenessey, or one of your own.
@@ -26,7 +66,12 @@ functor RISC_RA
        * spill code.  You can use RASpill, or RASpillWithRenaming,
        * or write your own if you are feeling adventurous.
        *)
-   structure Spill : RA_SPILL where I = I
+   structure Spill : RA_SPILL (* where I = I *)
+                     where type I.addressing_mode = I.addressing_mode
+                       and type I.ea = I.ea
+                       and type I.instr = I.instr
+                       and type I.instruction = I.instruction
+                       and type I.operand = I.operand
           
    val architecture : string
 
@@ -85,9 +130,9 @@ struct
    (* The generic register allocator *)
    structure Ra =
       RegisterAllocator
-        (SpillHeur) 
+        (structure SpillHeuristics = SpillHeur
         (* (ChowHennessySpillHeur) *)
-        (ClusterRA 
+         structure Flowgraph = ClusterRA
           (structure Flowgraph = CFG
            structure Asm = Asm
            structure InsnProps = InsnProps
diff --git a/sparc/backpatch/sparcDelaySlotProps.sml b/sparc/backpatch/sparcDelaySlotProps.sml
index e552cd8..26c9691 100644
--- a/sparc/backpatch/sparcDelaySlotProps.sml
+++ b/sparc/backpatch/sparcDelaySlotProps.sml
@@ -1,6 +1,11 @@
 functor SparcDelaySlots
    (structure I : SPARCINSTR
-    structure P : INSN_PROPERTIES where I = I
+    structure P : INSN_PROPERTIES (* where I = I *)
+                  where type I.addressing_mode = I.addressing_mode
+                    and type I.ea = I.ea
+                    and type I.instr = I.instr
+                    and type I.instruction = I.instruction
+                    and type I.operand = I.operand
     (* sharing/defn conflict:   sharing P.I = I*)
    ) : DELAY_SLOT_PROPERTIES =
 struct
diff --git a/sparc/backpatch/sparcJumps.sml b/sparc/backpatch/sparcJumps.sml
index 43763bd..95e3c31 100644
--- a/sparc/backpatch/sparcJumps.sml
+++ b/sparc/backpatch/sparcJumps.sml
@@ -5,8 +5,67 @@
  *)
 functor SparcJumps
   (structure Instr:SPARCINSTR
-   structure Shuffle:SPARCSHUFFLE where I = Instr
-   structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+   structure Shuffle:SPARCSHUFFLE (* where I = Instr *)
+                     where type I.Constant.const = Instr.Constant.const
+                       and type I.Region.region = Instr.Region.region
+                       and type I.T.Basis.cond = Instr.T.Basis.cond
+                       and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                       and type I.T.Basis.ext = Instr.T.Basis.ext
+                       and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                       and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                       and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                       and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                       and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                       and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                       and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                       and type I.T.ccexp = Instr.T.ccexp
+                       and type I.T.fexp = Instr.T.fexp
+                       (* and type I.T.labexp = Instr.T.labexp *)
+                       and type I.T.mlrisc = Instr.T.mlrisc
+                       and type I.T.oper = Instr.T.oper
+                       and type I.T.rep = Instr.T.rep
+                       and type I.T.rexp = Instr.T.rexp
+                       and type I.T.stm = Instr.T.stm
+                       and type I.arith = Instr.arith
+                       and type I.branch = Instr.branch
+                       and type I.cc = Instr.cc
+                       and type I.ea = Instr.ea
+                       and type I.farith1 = Instr.farith1
+                       and type I.farith2 = Instr.farith2
+                       and type I.fbranch = Instr.fbranch
+                       and type I.fcmp = Instr.fcmp
+                       and type I.fload = Instr.fload
+                       and type I.fsize = Instr.fsize
+                       and type I.fstore = Instr.fstore
+                       and type I.instr = Instr.instr
+                       and type I.instruction = Instr.instruction
+                       and type I.load = Instr.load
+                       and type I.operand = Instr.operand
+                       and type I.prediction = Instr.prediction
+                       and type I.rcond = Instr.rcond
+                       and type I.shift = Instr.shift
+                       and type I.store = Instr.store
+   structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                          where type T.Basis.cond = Instr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = Instr.T.Basis.ext
+                            and type T.Basis.fcond = Instr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                            and type T.Constant.const = Instr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                            and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                            and type T.Region.region = Instr.T.Region.region
+                            and type T.ccexp = Instr.T.ccexp
+                            and type T.fexp = Instr.T.fexp
+                            (* and type T.labexp = Instr.T.labexp *)
+                            and type T.mlrisc = Instr.T.mlrisc
+                            and type T.oper = Instr.T.oper
+                            and type T.rep = Instr.T.rep
+                            and type T.rexp = Instr.T.rexp
+                            and type T.stm = Instr.T.stm
   ) : SDI_JUMPS = 
 struct
   structure I = Instr
diff --git a/sparc/emit/sparcAsm.sml b/sparc/emit/sparcAsm.sml
index 510b7bb..3c29ded 100644
--- a/sparc/emit/sparcAsm.sml
+++ b/sparc/emit/sparcAsm.sml
@@ -6,12 +6,88 @@
 
 
 functor SparcAsmEmitter(structure S : INSTRUCTION_STREAM
-                        structure Instr : SPARCINSTR
-                           where T = S.P.T
-                        structure Shuffle : SPARCSHUFFLE
-                           where I = Instr
-                        structure MLTreeEval : MLTREE_EVAL
-                           where T = Instr.T
+                        structure Instr : SPARCINSTR (* where T = S.P.T *)
+                                          where type T.Basis.cond = S.P.T.Basis.cond
+                                            and type T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+                                            and type T.Basis.ext = S.P.T.Basis.ext
+                                            and type T.Basis.fcond = S.P.T.Basis.fcond
+                                            and type T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+                                            and type T.Constant.const = S.P.T.Constant.const
+                                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+                                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+                                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+                                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+                                            and type T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+                                            and type T.Region.region = S.P.T.Region.region
+                                            and type T.ccexp = S.P.T.ccexp
+                                            and type T.fexp = S.P.T.fexp
+                                            (* and type T.labexp = S.P.T.labexp *)
+                                            and type T.mlrisc = S.P.T.mlrisc
+                                            and type T.oper = S.P.T.oper
+                                            and type T.rep = S.P.T.rep
+	                                    and type T.rexp = S.P.T.rexp
+                                            and type T.stm = S.P.T.stm
+                        structure Shuffle : SPARCSHUFFLE (* where I = Instr *)
+                                            where type I.Constant.const = Instr.Constant.const
+                                              and type I.Region.region = Instr.Region.region
+                                              and type I.T.Basis.cond = Instr.T.Basis.cond
+                                              and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                              and type I.T.Basis.ext = Instr.T.Basis.ext
+                                              and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                              and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                              and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                              and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                              and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                              and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                              and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                              and type I.T.ccexp = Instr.T.ccexp
+                                              and type I.T.fexp = Instr.T.fexp
+                                              (* and type I.T.labexp = Instr.T.labexp *)
+                                              and type I.T.mlrisc = Instr.T.mlrisc
+                                              and type I.T.oper = Instr.T.oper
+                                              and type I.T.rep = Instr.T.rep
+                                              and type I.T.rexp = Instr.T.rexp
+                                              and type I.T.stm = Instr.T.stm
+                                              and type I.arith = Instr.arith
+                                              and type I.branch = Instr.branch
+                                              and type I.cc = Instr.cc
+                                              and type I.ea = Instr.ea
+                                              and type I.farith1 = Instr.farith1
+                                              and type I.farith2 = Instr.farith2
+                                              and type I.fbranch = Instr.fbranch
+                                              and type I.fcmp = Instr.fcmp
+                                              and type I.fload = Instr.fload
+                                              and type I.fsize = Instr.fsize
+                                              and type I.fstore = Instr.fstore
+                                              and type I.instr = Instr.instr
+                                              and type I.instruction = Instr.instruction
+                                              and type I.load = Instr.load
+                                              and type I.operand = Instr.operand
+                                              and type I.prediction = Instr.prediction
+                                              and type I.rcond = Instr.rcond
+                                              and type I.shift = Instr.shift
+                                              and type I.store = Instr.store
+                        structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                               where type T.Basis.cond = Instr.T.Basis.cond
+                                                 and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                                 and type T.Basis.ext = Instr.T.Basis.ext
+                                                 and type T.Basis.fcond = Instr.T.Basis.fcond
+                                                 and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                                 and type T.Constant.const = Instr.T.Constant.const
+                                                 and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                                 and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                                 and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                                 and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                                 and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                                 and type T.Region.region = Instr.T.Region.region
+                                                 and type T.ccexp = Instr.T.ccexp
+                                                 and type T.fexp = Instr.T.fexp
+                                                 (* and type T.labexp = Instr.T.labexp *)
+                                                 and type T.mlrisc = Instr.T.mlrisc
+                                                 and type T.oper = Instr.T.oper
+                                                 and type T.rep = Instr.T.rep
+                                                 and type T.rexp = Instr.T.rexp
+                                                 and type T.stm = Instr.T.stm
 
 (*#line 466.21 "sparc/sparc.mdl"*)
                         val V9 : bool
diff --git a/sparc/emit/sparcMC.sml b/sparc/emit/sparcMC.sml
index eeea673..5cb8d01 100644
--- a/sparc/emit/sparcMC.sml
+++ b/sparc/emit/sparcMC.sml
@@ -6,7 +6,27 @@
 
 
 functor SparcMCEmitter(structure Instr : SPARCINSTR
-                       structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+                       structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                              where type T.Basis.cond = Instr.T.Basis.cond
+                                                and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                                and type T.Basis.ext = Instr.T.Basis.ext
+                                                and type T.Basis.fcond = Instr.T.Basis.fcond
+                                                and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                                and type T.Constant.const = Instr.T.Constant.const
+                                                and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                                and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                                and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                                and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                                and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                                and type T.Region.region = Instr.T.Region.region
+                                                and type T.ccexp = Instr.T.ccexp
+                                                and type T.fexp = Instr.T.fexp
+                                                (* and type T.labexp = Instr.T.labexp *)
+                                                and type T.mlrisc = Instr.T.mlrisc
+                                                and type T.oper = Instr.T.oper
+                                                and type T.rep = Instr.T.rep
+                                                and type T.rexp = Instr.T.rexp
+                                                and type T.stm = Instr.T.stm
                        structure Stream : INSTRUCTION_STREAM
                        structure CodeString : CODE_STRING
                       ) : INSTRUCTION_EMITTER =
diff --git a/sparc/flowgraph/sparcGasPseudoOps.sml b/sparc/flowgraph/sparcGasPseudoOps.sml
index 3675d5f..66f08f0 100644
--- a/sparc/flowgraph/sparcGasPseudoOps.sml
+++ b/sparc/flowgraph/sparcGasPseudoOps.sml
@@ -1,6 +1,26 @@
 functor SparcGasPseudoOps 
    ( structure T : MLTREE
-     structure MLTreeEval : MLTREE_EVAL  where T = T
+     structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                            where type T.Basis.cond = T.Basis.cond
+                              and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                              and type T.Basis.ext = T.Basis.ext
+                              and type T.Basis.fcond = T.Basis.fcond
+                              and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                              and type T.Constant.const = T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                              and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                              and type T.Region.region = T.Region.region
+                              and type T.ccexp = T.ccexp
+                              and type T.fexp = T.fexp
+                              (* and type T.labexp = T.labexp *)
+                              and type T.mlrisc = T.mlrisc
+                              and type T.oper = T.oper
+                              and type T.rep = T.rep
+                              and type T.rexp = T.rexp
+                              and type T.stm = T.stm
     ) : PSEUDO_OPS_BASIS = 
 
 struct
diff --git a/sparc/instructions/sparcInstr.sml b/sparc/instructions/sparcInstr.sml
index dd319d5..0c5f5fc 100644
--- a/sparc/instructions/sparcInstr.sml
+++ b/sparc/instructions/sparcInstr.sml
@@ -8,7 +8,16 @@
 signature SPARCINSTR =
 sig
    structure C : SPARCCELLS
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    structure T : MLTREE
    structure Constant: CONSTANT
    structure Region : REGION
diff --git a/sparc/instructions/sparcProps.sml b/sparc/instructions/sparcProps.sml
index 8f6c283..b67eda6 100644
--- a/sparc/instructions/sparcProps.sml
+++ b/sparc/instructions/sparcProps.sml
@@ -5,8 +5,48 @@
 
 functor SparcProps
   (structure SparcInstr : SPARCINSTR
-   structure MLTreeEval : MLTREE_EVAL where T = SparcInstr.T
-   structure MLTreeHash : MLTREE_HASH where T = SparcInstr.T
+   structure MLTreeEval : MLTREE_EVAL (* where T = SparcInstr.T *)
+                          where type T.Basis.cond = SparcInstr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = SparcInstr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = SparcInstr.T.Basis.ext
+                            and type T.Basis.fcond = SparcInstr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = SparcInstr.T.Basis.rounding_mode
+                            and type T.Constant.const = SparcInstr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) SparcInstr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) SparcInstr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) SparcInstr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) SparcInstr.T.Extension.sx
+                            and type T.I.div_rounding_mode = SparcInstr.T.I.div_rounding_mode
+                            and type T.Region.region = SparcInstr.T.Region.region
+                            and type T.ccexp = SparcInstr.T.ccexp
+                            and type T.fexp = SparcInstr.T.fexp
+                            (* and type T.labexp = SparcInstr.T.labexp *)
+                            and type T.mlrisc = SparcInstr.T.mlrisc
+                            and type T.oper = SparcInstr.T.oper
+                            and type T.rep = SparcInstr.T.rep
+                            and type T.rexp = SparcInstr.T.rexp
+                            and type T.stm = SparcInstr.T.stm
+   structure MLTreeHash : MLTREE_HASH (* where T = SparcInstr.T *)
+                          where type T.Basis.cond = SparcInstr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = SparcInstr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = SparcInstr.T.Basis.ext
+                            and type T.Basis.fcond = SparcInstr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = SparcInstr.T.Basis.rounding_mode
+                            and type T.Constant.const = SparcInstr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) SparcInstr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) SparcInstr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) SparcInstr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) SparcInstr.T.Extension.sx
+                            and type T.I.div_rounding_mode = SparcInstr.T.I.div_rounding_mode
+                            and type T.Region.region = SparcInstr.T.Region.region
+                            and type T.ccexp = SparcInstr.T.ccexp
+                            and type T.fexp = SparcInstr.T.fexp
+                            (* and type T.labexp = SparcInstr.T.labexp *)
+                            and type T.mlrisc = SparcInstr.T.mlrisc
+                            and type T.oper = SparcInstr.T.oper
+                            and type T.rep = SparcInstr.T.rep
+                            and type T.rexp = SparcInstr.T.rexp
+                            and type T.stm = SparcInstr.T.stm
    ) : INSN_PROPERTIES =
 struct
   structure I = SparcInstr
diff --git a/sparc/instructions/sparccomp-instr-ext.sml b/sparc/instructions/sparccomp-instr-ext.sml
index 918dbaa..7cf7daf 100644
--- a/sparc/instructions/sparccomp-instr-ext.sml
+++ b/sparc/instructions/sparccomp-instr-ext.sml
@@ -7,12 +7,54 @@
  *)
 signature SPARCCOMP_INSTR_EXT = sig
     structure T : MLTREE
-    structure I : SPARCINSTR
-    		where T = T
-    structure TS : MLTREE_STREAM
-		where T = I.T
-    structure CFG : CONTROL_FLOW_GRAPH 
-    		where I = I 
+    structure I : SPARCINSTR (* where T = T *)
+                  where type T.Basis.cond = T.Basis.cond
+                    and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                    and type T.Basis.ext = T.Basis.ext
+                    and type T.Basis.fcond = T.Basis.fcond
+                    and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                    and type T.Constant.const = T.Constant.const
+                    and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                    and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                    and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                    and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                    and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                    and type T.Region.region = T.Region.region
+                    and type T.ccexp = T.ccexp
+                    and type T.fexp = T.fexp
+                    (* and type T.labexp = T.labexp *)
+                    and type T.mlrisc = T.mlrisc
+                    and type T.oper = T.oper
+                    and type T.rep = T.rep
+                    and type T.rexp = T.rexp
+                    and type T.stm = T.stm
+    structure TS : MLTREE_STREAM (* where T = I.T *)
+                   where type T.Basis.cond = I.T.Basis.cond
+                     and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                     and type T.Basis.ext = I.T.Basis.ext
+                     and type T.Basis.fcond = I.T.Basis.fcond
+                     and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                     and type T.Constant.const = I.T.Constant.const
+                     and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                     and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                     and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                     and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                     and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                     and type T.Region.region = I.T.Region.region
+                     and type T.ccexp = I.T.ccexp
+                     and type T.fexp = I.T.fexp
+                     (* and type T.labexp = I.T.labexp *)
+                     and type T.mlrisc = I.T.mlrisc
+                     and type T.oper = I.T.oper
+                     and type T.rep = I.T.rep
+                     and type T.rexp = I.T.rexp
+                     and type T.stm = I.T.stm
+    structure CFG : CONTROL_FLOW_GRAPH (* where I = I *)
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
 
 
     type reducer =
@@ -27,11 +69,54 @@ end
 
 functor SparcCompInstrExt 
   (structure I   : SPARCINSTR
-   structure TS  : MLTREE_STREAM
-		where T = I.T
-   structure CFG : CONTROL_FLOW_GRAPH 
-   		where I = I
-                  and P = TS.S.P
+   structure TS  : MLTREE_STREAM (* where T = I.T *)
+                   where type T.Basis.cond = I.T.Basis.cond
+                     and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                     and type T.Basis.ext = I.T.Basis.ext
+                     and type T.Basis.fcond = I.T.Basis.fcond
+                     and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                     and type T.Constant.const = I.T.Constant.const
+                     and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                     and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                     and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                     and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                     and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                     and type T.Region.region = I.T.Region.region
+                     and type T.ccexp = I.T.ccexp
+                     and type T.fexp = I.T.fexp
+                     (* and type T.labexp = I.T.labexp *)
+                     and type T.mlrisc = I.T.mlrisc
+                     and type T.oper = I.T.oper
+                     and type T.rep = I.T.rep
+	             and type T.rexp = I.T.rexp
+                     and type T.stm = I.T.stm
+   structure CFG : CONTROL_FLOW_GRAPH (* where I = I and P = TS.S.P *)
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
+                    where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                      and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                      and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                      and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                      and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                      and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                      and type P.T.Constant.const = TS.S.P.T.Constant.const
+                      and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                      and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                      and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                      and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                      and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                      and type P.T.Region.region = TS.S.P.T.Region.region
+                      and type P.T.ccexp = TS.S.P.T.ccexp
+                      and type P.T.fexp = TS.S.P.T.fexp
+                      (* and type P.T.labexp = TS.S.P.T.labexp *)
+                      and type P.T.mlrisc = TS.S.P.T.mlrisc
+                      and type P.T.oper = TS.S.P.T.oper
+                      and type P.T.rep = TS.S.P.T.rep
+                      and type P.T.rexp = TS.S.P.T.rexp
+                      and type P.T.stm = TS.S.P.T.stm
   ) : SPARCCOMP_INSTR_EXT = 
 struct
     structure CFG = CFG
diff --git a/sparc/mltree/sparc.sml b/sparc/mltree/sparc.sml
index b8e7e40..792f9f3 100644
--- a/sparc/mltree/sparc.sml
+++ b/sparc/mltree/sparc.sml
@@ -14,12 +14,72 @@
 
 functor Sparc
   (structure SparcInstr : SPARCINSTR
-   structure PseudoInstrs : SPARC_PSEUDO_INSTR 
-   			where I = SparcInstr
-   structure ExtensionComp : MLTREE_EXTENSION_COMP
-   			where I = SparcInstr
-			  and T = SparcInstr.T
-
+   structure PseudoInstrs : SPARC_PSEUDO_INSTR (* where I = SparcInstr *)
+                            where type I.Constant.const = SparcInstr.Constant.const
+                              and type I.Region.region = SparcInstr.Region.region
+                              and type I.T.Basis.cond = SparcInstr.T.Basis.cond
+                              and type I.T.Basis.div_rounding_mode = SparcInstr.T.Basis.div_rounding_mode
+                              and type I.T.Basis.ext = SparcInstr.T.Basis.ext
+                              and type I.T.Basis.fcond = SparcInstr.T.Basis.fcond
+                              and type I.T.Basis.rounding_mode = SparcInstr.T.Basis.rounding_mode
+                              and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) SparcInstr.T.Extension.ccx
+                              and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) SparcInstr.T.Extension.fx
+                              and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) SparcInstr.T.Extension.rx
+                              and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) SparcInstr.T.Extension.sx
+                              and type I.T.I.div_rounding_mode = SparcInstr.T.I.div_rounding_mode
+                              and type I.T.ccexp = SparcInstr.T.ccexp
+                              and type I.T.fexp = SparcInstr.T.fexp
+                              (* and type I.T.labexp = SparcInstr.T.labexp *)
+                              and type I.T.mlrisc = SparcInstr.T.mlrisc
+                              and type I.T.oper = SparcInstr.T.oper
+                              and type I.T.rep = SparcInstr.T.rep
+                              and type I.T.rexp = SparcInstr.T.rexp
+                              and type I.T.stm = SparcInstr.T.stm
+                              and type I.arith = SparcInstr.arith
+                              and type I.branch = SparcInstr.branch
+                              and type I.cc = SparcInstr.cc
+                              and type I.ea = SparcInstr.ea
+                              and type I.farith1 = SparcInstr.farith1
+                              and type I.farith2 = SparcInstr.farith2
+                              and type I.fbranch = SparcInstr.fbranch
+                              and type I.fcmp = SparcInstr.fcmp
+                              and type I.fload = SparcInstr.fload
+                              and type I.fsize = SparcInstr.fsize
+                              and type I.fstore = SparcInstr.fstore
+                              and type I.instr = SparcInstr.instr
+                              and type I.instruction = SparcInstr.instruction
+                              and type I.load = SparcInstr.load
+                              and type I.operand = SparcInstr.operand
+                              and type I.prediction = SparcInstr.prediction
+                              and type I.rcond = SparcInstr.rcond
+                              and type I.shift = SparcInstr.shift
+                              and type I.store = SparcInstr.store
+   structure ExtensionComp : MLTREE_EXTENSION_COMP (* where I = SparcInstr and T = SparcInstr.T *)
+                             where type I.addressing_mode = SparcInstr.addressing_mode
+                               and type I.ea = SparcInstr.ea
+                               and type I.instr = SparcInstr.instr
+                               and type I.instruction = SparcInstr.instruction
+                               and type I.operand = SparcInstr.operand
+                             where type T.Basis.cond = SparcInstr.T.Basis.cond
+                               and type T.Basis.div_rounding_mode = SparcInstr.T.Basis.div_rounding_mode
+                               and type T.Basis.ext = SparcInstr.T.Basis.ext
+                               and type T.Basis.fcond = SparcInstr.T.Basis.fcond
+                               and type T.Basis.rounding_mode = SparcInstr.T.Basis.rounding_mode
+                               and type T.Constant.const = SparcInstr.T.Constant.const
+                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) SparcInstr.T.Extension.ccx
+                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) SparcInstr.T.Extension.fx
+                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) SparcInstr.T.Extension.rx
+                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) SparcInstr.T.Extension.sx
+                               and type T.I.div_rounding_mode = SparcInstr.T.I.div_rounding_mode
+                               and type T.Region.region = SparcInstr.T.Region.region
+                               and type T.ccexp = SparcInstr.T.ccexp
+                               and type T.fexp = SparcInstr.T.fexp
+                               (* and type T.labexp = SparcInstr.T.labexp *)
+                               and type T.mlrisc = SparcInstr.T.mlrisc
+                               and type T.oper = SparcInstr.T.oper
+                               and type T.rep = SparcInstr.T.rep
+                               and type T.rexp = SparcInstr.T.rexp
+                               and type T.stm = SparcInstr.T.stm
 			  
    (* 
     * The client should also specify these parameters.
@@ -76,8 +136,8 @@ struct
                             val rep = NEITHER 
                            )
 
-  functor Multiply32 = MLTreeMult
-    (structure I = I
+  structure Multiply32 = struct
+     structure I = I
      structure T = T
      structure CB = CellsBasis
      type arg  = {r1:CB.cell,r2:CB.cell,d:CB.cell}
@@ -89,10 +149,10 @@ struct
      fun slli{r,i,d} = [I.shift{s=I.SLL,r=r,i=I.IMMED i,d=d}]
      fun srli{r,i,d} = [I.shift{s=I.SRL,r=r,i=I.IMMED i,d=d}]
      fun srai{r,i,d} = [I.shift{s=I.SRA,r=r,i=I.IMMED i,d=d}]
-    )
+  end
 
-  functor Multiply64 = MLTreeMult
-    (structure I = I
+  structure Multiply64 = struct
+     structure I = I
      structure T = T
      structure CB = CellsBasis
      type arg  = {r1:CB.cell,r2:CB.cell,d:CB.cell}
@@ -104,11 +164,12 @@ struct
      fun slli{r,i,d} = [I.shift{s=I.SLLX,r=r,i=I.IMMED i,d=d}]
      fun srli{r,i,d} = [I.shift{s=I.SRLX,r=r,i=I.IMMED i,d=d}]
      fun srai{r,i,d} = [I.shift{s=I.SRAX,r=r,i=I.IMMED i,d=d}]
-    )
+  end
 
   (* signed, trapping version of multiply and divide *)
-  structure Mult32 = Multiply32
-    (val trapping = true
+  structure Mult32 = MLTreeMult
+    (open Multiply32
+     val trapping = true
      val multCost = multCost 
      fun addv{r1,r2,d} = 
          I.arith{a=I.ADDCC,r=r1,i=I.REG r2,d=d}::PseudoInstrs.overflowtrap32 
@@ -117,26 +178,28 @@ struct
      val sh1addv = NONE 
      val sh2addv = NONE 
      val sh3addv = NONE 
-    )
-    (val signed = true)
+
+     val signed = true)
 
   (* unsigned, non-trapping version of multiply and divide *)
-  functor Mul32 = Multiply32
-    (val trapping = false
+  structure Mul32 = struct
+     open Multiply32
+     val trapping = false
      val multCost = muluCost
      fun addv{r1,r2,d} = [I.arith{a=I.ADD,r=r1,i=I.REG r2,d=d}]
      fun subv{r1,r2,d} = [I.arith{a=I.SUB,r=r1,i=I.REG r2,d=d}]
      val sh1addv = NONE 
      val sh2addv = NONE 
      val sh3addv = NONE 
-    )
-  structure Mulu32 = Mul32(val signed = false)
+  end
+  structure Mulu32 = MLTreeMult(open Mul32 val signed = false)
 
-  structure Muls32 = Mul32(val signed = true)
+  structure Muls32 = MLTreeMult(open Mul32 val signed = true)
 
   (* signed, trapping version of multiply and divide *)
-  structure Mult64 = Multiply64
-    (val trapping = true
+  structure Mult64 = MLTreeMult
+    (open Multiply64
+     val trapping = true
      val multCost = multCost 
      fun addv{r1,r2,d} = 
          I.arith{a=I.ADDCC,r=r1,i=I.REG r2,d=d}::PseudoInstrs.overflowtrap64 
@@ -145,22 +208,23 @@ struct
      val sh1addv = NONE 
      val sh2addv = NONE 
      val sh3addv = NONE 
-    )
-    (val signed = true)
+
+     val signed = true)
 
   (* unsigned, non-trapping version of multiply and divide *)
-  functor Mul64 = Multiply64
-    (val trapping = false
+  structure Mul64 = struct
+     open Multiply64
+     val trapping = false
      val multCost = muluCost
      fun addv{r1,r2,d} = [I.arith{a=I.ADD,r=r1,i=I.REG r2,d=d}]
      fun subv{r1,r2,d} = [I.arith{a=I.SUB,r=r1,i=I.REG r2,d=d}]
      val sh1addv = NONE 
      val sh2addv = NONE 
      val sh3addv = NONE 
-    )
-  structure Mulu64 = Mul64(val signed = false)
+  end
+  structure Mulu64 = MLTreeMult(open Mul64 val signed = false)
 
-  structure Muls64 = Mul64(val signed = true)
+  structure Muls64 = MLTreeMult(open Mul64 val signed = true)
 
   datatype commutative = COMMUTE | NOCOMMUTE
   datatype cc = REG    (* write to register *)
diff --git a/visualization/cfgViewer.sml b/visualization/cfgViewer.sml
index 65c6251..877f496 100644
--- a/visualization/cfgViewer.sml
+++ b/visualization/cfgViewer.sml
@@ -1,8 +1,13 @@
 functor CFGViewer
    (structure CFG : CONTROL_FLOW_GRAPH
     structure GraphViewer : GRAPH_VIEWER
-    structure Asm	  : INSTRUCTION_EMITTER where I = CFG.I)
-      : sig
+    structure Asm	  : INSTRUCTION_EMITTER (* where I = CFG.I *)
+                            where type I.addressing_mode = CFG.I.addressing_mode
+                              and type I.ea = CFG.I.ea
+                              and type I.instr = CFG.I.instr
+                              and type I.instruction = CFG.I.instruction
+                              and type I.operand = CFG.I.operand
+   ) : sig
 	    val view : CFG.cfg -> unit
 	end =
 struct
diff --git a/x86/backpatch/x86Jumps.sml b/x86/backpatch/x86Jumps.sml
index 120792e..ddf292e 100644
--- a/x86/backpatch/x86Jumps.sml
+++ b/x86/backpatch/x86Jumps.sml
@@ -5,9 +5,72 @@
 
 functor X86Jumps
   (structure Instr : X86INSTR
-   structure Eval : MLTREE_EVAL where T = Instr.T
-   structure Shuffle : X86SHUFFLE where I = Instr
-   structure MCEmitter : MC_EMIT where I = Instr) : SDI_JUMPS = 
+   structure Eval : MLTREE_EVAL (* where T = Instr.T *)
+                    where type T.Basis.cond = Instr.T.Basis.cond
+                      and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                      and type T.Basis.ext = Instr.T.Basis.ext
+                      and type T.Basis.fcond = Instr.T.Basis.fcond
+                      and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                      and type T.Constant.const = Instr.T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                      and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                      and type T.Region.region = Instr.T.Region.region
+                      and type T.ccexp = Instr.T.ccexp
+                      and type T.fexp = Instr.T.fexp
+                      (* and type T.labexp = Instr.T.labexp *)
+                      and type T.mlrisc = Instr.T.mlrisc
+                      and type T.oper = Instr.T.oper
+                      and type T.rep = Instr.T.rep
+                      and type T.rexp = Instr.T.rexp
+                      and type T.stm = Instr.T.stm
+   structure Shuffle : X86SHUFFLE (* where I = Instr *)
+                       where type I.Constant.const = Instr.Constant.const
+                         and type I.Region.region = Instr.Region.region
+                         and type I.T.Basis.cond = Instr.T.Basis.cond
+                         and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                         and type I.T.Basis.ext = Instr.T.Basis.ext
+                         and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                         and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                         and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                         and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                         and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                         and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                         and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                         and type I.T.ccexp = Instr.T.ccexp
+                         and type I.T.fexp = Instr.T.fexp
+                         (* and type I.T.labexp = Instr.T.labexp *)
+                         and type I.T.mlrisc = Instr.T.mlrisc
+                         and type I.T.oper = Instr.T.oper
+                         and type I.T.rep = Instr.T.rep
+                         and type I.T.rexp = Instr.T.rexp
+                         and type I.T.stm = Instr.T.stm
+                         (* and type I.addressing_mode = Instr.addressing_mode *)
+                         and type I.binaryOp = Instr.binaryOp
+                         and type I.bitOp = Instr.bitOp
+                         and type I.cond = Instr.cond
+                         and type I.fbinOp = Instr.fbinOp
+                         and type I.fenvOp = Instr.fenvOp
+                         and type I.fibinOp = Instr.fibinOp
+                         and type I.fsize = Instr.fsize
+                         and type I.funOp = Instr.funOp
+                         and type I.instr = Instr.instr
+                         and type I.instruction = Instr.instruction
+                         and type I.isize = Instr.isize
+                         and type I.move = Instr.move
+                         and type I.multDivOp = Instr.multDivOp
+                         and type I.operand = Instr.operand
+                         and type I.shiftOp = Instr.shiftOp
+                         and type I.unaryOp = Instr.unaryOp
+   structure MCEmitter : MC_EMIT (* where I = Instr *)
+                         where type I.addressing_mode = Instr.addressing_mode
+                           and type I.ea = Instr.ea
+                           and type I.instr = Instr.instr
+                           and type I.instruction = Instr.instruction
+                           and type I.operand = Instr.operand
+  ) : SDI_JUMPS =
 struct
   structure I = Instr
   structure C = I.C
diff --git a/x86/emit/x86Asm.sml b/x86/emit/x86Asm.sml
index 1e46642..6ed6ea2 100644
--- a/x86/emit/x86Asm.sml
+++ b/x86/emit/x86Asm.sml
@@ -6,15 +6,126 @@
 
 
 functor X86AsmEmitter(structure S : INSTRUCTION_STREAM
-                      structure Instr : X86INSTR
-                         where T = S.P.T
-                      structure Shuffle : X86SHUFFLE
-                         where I = Instr
-                      structure MLTreeEval : MLTREE_EVAL
-                         where T = Instr.T
+                      structure Instr : X86INSTR (* where T = S.P.T *)
+                                        where type T.Basis.cond = S.P.T.Basis.cond
+                                          and type T.Basis.div_rounding_mode = S.P.T.Basis.div_rounding_mode
+                                          and type T.Basis.ext = S.P.T.Basis.ext
+                                          and type T.Basis.fcond = S.P.T.Basis.fcond
+                                          and type T.Basis.rounding_mode = S.P.T.Basis.rounding_mode
+                                          and type T.Constant.const = S.P.T.Constant.const
+                                          and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) S.P.T.Extension.ccx
+                                          and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) S.P.T.Extension.fx
+                                          and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) S.P.T.Extension.rx
+                                          and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) S.P.T.Extension.sx
+                                          and type T.I.div_rounding_mode = S.P.T.I.div_rounding_mode
+                                          and type T.Region.region = S.P.T.Region.region
+                                          and type T.ccexp = S.P.T.ccexp
+                                          and type T.fexp = S.P.T.fexp
+                                          (* and type T.labexp = S.P.T.labexp *)
+                                          and type T.mlrisc = S.P.T.mlrisc
+                                          and type T.oper = S.P.T.oper
+                                          and type T.rep = S.P.T.rep
+                                          and type T.rexp = S.P.T.rexp
+                                          and type T.stm = S.P.T.stm
+                      structure Shuffle : X86SHUFFLE (* where I = Instr *)
+                                          where type I.Constant.const = Instr.Constant.const
+                                            and type I.Region.region = Instr.Region.region
+                                            and type I.T.Basis.cond = Instr.T.Basis.cond
+                                            and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                            and type I.T.Basis.ext = Instr.T.Basis.ext
+                                            and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                            and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                            and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                            and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                            and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                            and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                            and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                            and type I.T.ccexp = Instr.T.ccexp
+                                            and type I.T.fexp = Instr.T.fexp
+                                            (* and type I.T.labexp = Instr.T.labexp *)
+                                            and type I.T.mlrisc = Instr.T.mlrisc
+                                            and type I.T.oper = Instr.T.oper
+                                            and type I.T.rep = Instr.T.rep
+                                            and type I.T.rexp = Instr.T.rexp
+                                            and type I.T.stm = Instr.T.stm
+                                            (* and type I.addressing_mode = Instr.addressing_mode *)
+                                            and type I.binaryOp = Instr.binaryOp
+                                            and type I.bitOp = Instr.bitOp
+                                            and type I.cond = Instr.cond
+                                            and type I.fbinOp = Instr.fbinOp
+                                            and type I.fenvOp = Instr.fenvOp
+                                            and type I.fibinOp = Instr.fibinOp
+                                            and type I.fsize = Instr.fsize
+                                            and type I.funOp = Instr.funOp
+                                            and type I.instr = Instr.instr
+                                            and type I.instruction = Instr.instruction
+                                            and type I.isize = Instr.isize
+                                            and type I.move = Instr.move
+                                            and type I.multDivOp = Instr.multDivOp
+                                            and type I.operand = Instr.operand
+                                            and type I.shiftOp = Instr.shiftOp
+                                            and type I.unaryOp = Instr.unaryOp
+                      structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                                             where type T.Basis.cond = Instr.T.Basis.cond
+                                               and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                               and type T.Basis.ext = Instr.T.Basis.ext
+                                               and type T.Basis.fcond = Instr.T.Basis.fcond
+                                               and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                               and type T.Constant.const = Instr.T.Constant.const
+                                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                               and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                               and type T.Region.region = Instr.T.Region.region
+                                               and type T.ccexp = Instr.T.ccexp
+                                               and type T.fexp = Instr.T.fexp
+                                               (* and type T.labexp = Instr.T.labexp *)
+                                               and type T.mlrisc = Instr.T.mlrisc
+                                               and type T.oper = Instr.T.oper
+                                               and type T.rep = Instr.T.rep
+                                               and type T.rexp = Instr.T.rexp
+                                               and type T.stm = Instr.T.stm
 
 (*#line 512.7 "x86/x86.mdl"*)
-                      structure MemRegs : MEMORY_REGISTERS where I=Instr
+                      structure MemRegs : MEMORY_REGISTERS (* where I = Instr *)
+                                          where type I.Constant.const = Instr.Constant.const
+                                            and type I.Region.region = Instr.Region.region
+                                            and type I.T.Basis.cond = Instr.T.Basis.cond
+                                            and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                                            and type I.T.Basis.ext = Instr.T.Basis.ext
+                                            and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                                            and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                                            and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                                            and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                                            and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                                            and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                                            and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                                            and type I.T.ccexp = Instr.T.ccexp
+                                            and type I.T.fexp = Instr.T.fexp
+                                            (* and type I.T.labexp = Instr.T.labexp *)
+                                            and type I.T.mlrisc = Instr.T.mlrisc
+                                            and type I.T.oper = Instr.T.oper
+                                            and type I.T.rep = Instr.T.rep
+                                            and type I.T.rexp = Instr.T.rexp
+                                            and type I.T.stm = Instr.T.stm
+                                            (* and type I.addressing_mode = Instr.addressing_mode *)
+                                            and type I.binaryOp = Instr.binaryOp
+                                            and type I.bitOp = Instr.bitOp
+                                            and type I.cond = Instr.cond
+                                            and type I.fbinOp = Instr.fbinOp
+                                            and type I.fenvOp = Instr.fenvOp
+                                            and type I.fibinOp = Instr.fibinOp
+                                            and type I.fsize = Instr.fsize
+                                            and type I.funOp = Instr.funOp
+                                            and type I.instr = Instr.instr
+                                            and type I.instruction = Instr.instruction
+                                            and type I.isize = Instr.isize
+                                            and type I.move = Instr.move
+                                            and type I.multDivOp = Instr.multDivOp
+                                            and type I.operand = Instr.operand
+                                            and type I.shiftOp = Instr.shiftOp
+                                            and type I.unaryOp = Instr.unaryOp
 
 (*#line 513.7 "x86/x86.mdl"*)
                       val memRegBase : CellsBasis.cell option
diff --git a/x86/flowgraph/x86-darwin-pseudo-ops.sml b/x86/flowgraph/x86-darwin-pseudo-ops.sml
index 2b3db45..d848c1c 100644
--- a/x86/flowgraph/x86-darwin-pseudo-ops.sml
+++ b/x86/flowgraph/x86-darwin-pseudo-ops.sml
@@ -7,7 +7,27 @@
 functor X86DarwinPseudoOps (
 
     structure T : MLTREE
-    structure MLTreeEval : MLTREE_EVAL  where T = T
+    structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                           where type T.Basis.cond = T.Basis.cond
+                             and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                             and type T.Basis.ext = T.Basis.ext
+                             and type T.Basis.fcond = T.Basis.fcond
+                             and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                             and type T.Constant.const = T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                             and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                             and type T.Region.region = T.Region.region
+                             and type T.ccexp = T.ccexp
+                             and type T.fexp = T.fexp
+                             (* and type T.labexp = T.labexp *)
+                             and type T.mlrisc = T.mlrisc
+                             and type T.oper = T.oper
+                             and type T.rep = T.rep
+                             and type T.rexp = T.rexp
+                             and type T.stm = T.stm
 
   ) : PSEUDO_OPS_BASIS = struct
 
diff --git a/x86/flowgraph/x86GasPseudoOps.sml b/x86/flowgraph/x86GasPseudoOps.sml
index 5b441e1..2e79f3e 100644
--- a/x86/flowgraph/x86GasPseudoOps.sml
+++ b/x86/flowgraph/x86GasPseudoOps.sml
@@ -5,7 +5,27 @@
  *)
 functor X86GasPseudoOps 
    ( structure T : MLTREE
-     structure MLTreeEval : MLTREE_EVAL  where T = T
+     structure MLTreeEval : MLTREE_EVAL (* where T = T *)
+                            where type T.Basis.cond = T.Basis.cond
+                              and type T.Basis.div_rounding_mode = T.Basis.div_rounding_mode
+                              and type T.Basis.ext = T.Basis.ext
+                              and type T.Basis.fcond = T.Basis.fcond
+                              and type T.Basis.rounding_mode = T.Basis.rounding_mode
+                              and type T.Constant.const = T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) T.Extension.sx
+                              and type T.I.div_rounding_mode = T.I.div_rounding_mode
+                              and type T.Region.region = T.Region.region
+                              and type T.ccexp = T.ccexp
+                              and type T.fexp = T.fexp
+                              (* and type T.labexp = T.labexp *)
+                              and type T.mlrisc = T.mlrisc
+                              and type T.oper = T.oper
+                              and type T.rep = T.rep
+                              and type T.rexp = T.rexp
+                              and type T.stm = T.stm
     ) : PSEUDO_OPS_BASIS = 
 
 struct
diff --git a/x86/instructions/x86Instr.sml b/x86/instructions/x86Instr.sml
index 1d125e6..97fb6ce 100644
--- a/x86/instructions/x86Instr.sml
+++ b/x86/instructions/x86Instr.sml
@@ -8,7 +8,16 @@
 signature X86INSTR =
 sig
    structure C : X86CELLS
-   structure CB : CELLS_BASIS = CellsBasis
+   structure CB : CELLS_BASIS (* = CellsBasis *)
+                  where type CellSet.cellset = CellsBasis.CellSet.cellset
+                    and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                    and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                    and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                    and type cell = CellsBasis.cell
+                    and type cellColor = CellsBasis.cellColor
+                    and type cellkind = CellsBasis.cellkind
+                    and type cellkindDesc = CellsBasis.cellkindDesc
+                    and type cellkindInfo = CellsBasis.cellkindInfo
    structure T : MLTREE
    structure Constant: CONSTANT
    structure Region : REGION
diff --git a/x86/instructions/x86Peephole.peep b/x86/instructions/x86Peephole.peep
index 0859bd3..2a335ac 100644
--- a/x86/instructions/x86Peephole.peep
+++ b/x86/instructions/x86Peephole.peep
@@ -20,7 +20,27 @@ in
 functor X86Peephole
    (structure Instr : X86INSTR
     structure Eval  : MLTREE_EVAL
-      sharing Instr.T = Eval.T
+      (* sharing Instr.T = Eval.T *)
+      where type T.Basis.cond = Instr.T.Basis.cond
+        and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+        and type T.Basis.ext = Instr.T.Basis.ext
+        and type T.Basis.fcond = Instr.T.Basis.fcond
+        and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+        and type T.Constant.const = Instr.T.Constant.const
+        and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+        and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+        and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+        and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+        and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+        and type T.Region.region = Instr.T.Region.region
+        and type T.ccexp = Instr.T.ccexp
+        and type T.fexp = Instr.T.fexp
+        (* and type T.labexp = Instr.T.labexp *)
+        and type T.mlrisc = Instr.T.mlrisc
+        and type T.oper = Instr.T.oper
+        and type T.rep = Instr.T.rep
+        and type T.rexp = Instr.T.rexp
+        and type T.stm = Instr.T.stm
    ) : PEEPHOLE =
 struct
    structure I = Instr
diff --git a/x86/instructions/x86Peephole.sml b/x86/instructions/x86Peephole.sml
index 66670c1..fe27654 100644
--- a/x86/instructions/x86Peephole.sml
+++ b/x86/instructions/x86Peephole.sml
@@ -12,7 +12,27 @@ functor X86Peephole(
                     structure Eval : MLTREE_EVAL
 
 (*#line 23.7 "x86Peephole.peep"*)
-                    sharing Instr.T = Eval.T
+                    (* sharing Instr.T = Eval.T *)
+                    where type T.Basis.cond = Instr.T.Basis.cond
+                      and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                      and type T.Basis.ext = Instr.T.Basis.ext
+                      and type T.Basis.fcond = Instr.T.Basis.fcond
+                      and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                      and type T.Constant.const = Instr.T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                      and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                      and type T.Region.region = Instr.T.Region.region
+                      and type T.ccexp = Instr.T.ccexp
+                      and type T.fexp = Instr.T.fexp
+                      (* and type T.labexp = Instr.T.labexp *)
+                      and type T.mlrisc = Instr.T.mlrisc
+                      and type T.oper = Instr.T.oper
+                      and type T.rep = Instr.T.rep
+                      and type T.rexp = Instr.T.rexp
+                      and type T.stm = Instr.T.stm
                    ): PEEPHOLE =
 struct
 
diff --git a/x86/instructions/x86Props.sml b/x86/instructions/x86Props.sml
index 6cd50da..31fba12 100644
--- a/x86/instructions/x86Props.sml
+++ b/x86/instructions/x86Props.sml
@@ -5,8 +5,48 @@
 
 functor X86Props
   (structure Instr : X86INSTR
-   structure MLTreeHash : MLTREE_HASH where T = Instr.T
-   structure MLTreeEval : MLTREE_EVAL where T = Instr.T
+   structure MLTreeHash : MLTREE_HASH (* where T = Instr.T *)
+                          where type T.Basis.cond = Instr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = Instr.T.Basis.ext
+                            and type T.Basis.fcond = Instr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                            and type T.Constant.const = Instr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                            and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                            and type T.Region.region = Instr.T.Region.region
+                            and type T.ccexp = Instr.T.ccexp
+                            and type T.fexp = Instr.T.fexp
+                            (* and type T.labexp = Instr.T.labexp *)
+                            and type T.mlrisc = Instr.T.mlrisc
+                            and type T.oper = Instr.T.oper
+                            and type T.rep = Instr.T.rep
+                            and type T.rexp = Instr.T.rexp
+                            and type T.stm = Instr.T.stm
+   structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                          where type T.Basis.cond = Instr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = Instr.T.Basis.ext
+                            and type T.Basis.fcond = Instr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                            and type T.Constant.const = Instr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                            and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                            and type T.Region.region = Instr.T.Region.region
+                            and type T.ccexp = Instr.T.ccexp
+                            and type T.fexp = Instr.T.fexp
+                            (* and type T.labexp = Instr.T.labexp *)
+                            and type T.mlrisc = Instr.T.mlrisc
+                            and type T.oper = Instr.T.oper
+                            and type T.rep = Instr.T.rep
+                            and type T.rexp = Instr.T.rexp
+                            and type T.stm = Instr.T.stm
   ) : INSN_PROPERTIES =
 struct
   structure I = Instr
diff --git a/x86/instructions/x86comp-instr-ext.sml b/x86/instructions/x86comp-instr-ext.sml
index d846378..7a0d5dd 100644
--- a/x86/instructions/x86comp-instr-ext.sml
+++ b/x86/instructions/x86comp-instr-ext.sml
@@ -6,11 +6,54 @@
  *)
 signature X86COMP_INSTR_EXT = sig
   structure I : X86INSTR
-  structure TS : MLTREE_STREAM
-		 where T = I.T
-  structure CFG : CONTROL_FLOW_GRAPH 
- 	         where I = I
-                   and P = TS.S.P
+  structure TS : MLTREE_STREAM (* where T = I.T *)
+                 where type T.Basis.cond = I.T.Basis.cond
+                   and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                   and type T.Basis.ext = I.T.Basis.ext
+                   and type T.Basis.fcond = I.T.Basis.fcond
+                   and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                   and type T.Constant.const = I.T.Constant.const
+                   and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                   and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                   and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                   and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                   and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                   and type T.Region.region = I.T.Region.region
+                   and type T.ccexp = I.T.ccexp
+                   and type T.fexp = I.T.fexp
+                   (* and type T.labexp = I.T.labexp *)
+                   and type T.mlrisc = I.T.mlrisc
+                   and type T.oper = I.T.oper
+                   and type T.rep = I.T.rep
+	           and type T.rexp = I.T.rexp
+                   and type T.stm = I.T.stm
+  structure CFG : CONTROL_FLOW_GRAPH (* where I = I and P = TS.S.P *)
+                  where type I.addressing_mode = I.addressing_mode
+                    and type I.ea = I.ea
+                    and type I.instr = I.instr
+                    and type I.instruction = I.instruction
+                    and type I.operand = I.operand
+                  where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                    and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                    and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                    and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                    and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                    and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                    and type P.T.Constant.const = TS.S.P.T.Constant.const
+                    and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                    and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                    and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                    and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                    and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                    and type P.T.Region.region = TS.S.P.T.Region.region
+                    and type P.T.ccexp = TS.S.P.T.ccexp
+                    and type P.T.fexp = TS.S.P.T.fexp
+                    (* and type P.T.labexp = TS.S.P.T.labexp *)
+                    and type P.T.mlrisc = TS.S.P.T.mlrisc
+                    and type P.T.oper = TS.S.P.T.oper
+                    and type P.T.rep = TS.S.P.T.rep
+                    and type P.T.rexp = TS.S.P.T.rexp
+                    and type P.T.stm = TS.S.P.T.stm
 
   type reducer = 
     (I.instruction, I.C.cellset, I.operand, I.addressing_mode, CFG.cfg) TS.reducer
@@ -27,11 +70,54 @@ end
 
 functor X86CompInstrExt
   ( structure I : X86INSTR
-    structure TS  : MLTREE_STREAM
-		   where T = I.T
-    structure CFG : CONTROL_FLOW_GRAPH 
-		   where P = TS.S.P
-		     and I = I
+    structure TS  : MLTREE_STREAM (* where T = I.T *)
+                    where type T.Basis.cond = I.T.Basis.cond
+                      and type T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                      and type T.Basis.ext = I.T.Basis.ext
+                      and type T.Basis.fcond = I.T.Basis.fcond
+                      and type T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                      and type T.Constant.const = I.T.Constant.const
+                      and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                      and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                      and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                      and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                      and type T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                      and type T.Region.region = I.T.Region.region
+                      and type T.ccexp = I.T.ccexp
+                      and type T.fexp = I.T.fexp
+                      (* and type T.labexp = I.T.labexp *)
+                      and type T.mlrisc = I.T.mlrisc
+                      and type T.oper = I.T.oper
+                      and type T.rep = I.T.rep
+                      and type T.rexp = I.T.rexp
+                      and type T.stm = I.T.stm
+    structure CFG : CONTROL_FLOW_GRAPH (* where P = TS.S.P and I = I *)
+                    where type P.Client.pseudo_op = TS.S.P.Client.pseudo_op
+                      and type P.T.Basis.cond = TS.S.P.T.Basis.cond
+                      and type P.T.Basis.div_rounding_mode = TS.S.P.T.Basis.div_rounding_mode
+                      and type P.T.Basis.ext = TS.S.P.T.Basis.ext
+                      and type P.T.Basis.fcond = TS.S.P.T.Basis.fcond
+                      and type P.T.Basis.rounding_mode = TS.S.P.T.Basis.rounding_mode
+                      and type P.T.Constant.const = TS.S.P.T.Constant.const
+                      and type ('s,'r,'f,'c) P.T.Extension.ccx = ('s,'r,'f,'c) TS.S.P.T.Extension.ccx
+                      and type ('s,'r,'f,'c) P.T.Extension.fx = ('s,'r,'f,'c) TS.S.P.T.Extension.fx
+                      and type ('s,'r,'f,'c) P.T.Extension.rx = ('s,'r,'f,'c) TS.S.P.T.Extension.rx
+                      and type ('s,'r,'f,'c) P.T.Extension.sx = ('s,'r,'f,'c) TS.S.P.T.Extension.sx
+                      and type P.T.I.div_rounding_mode = TS.S.P.T.I.div_rounding_mode
+                      and type P.T.Region.region = TS.S.P.T.Region.region
+                      and type P.T.ccexp = TS.S.P.T.ccexp
+                      and type P.T.fexp = TS.S.P.T.fexp
+                      (* and type P.T.labexp = TS.S.P.T.labexp *)
+                      and type P.T.mlrisc = TS.S.P.T.mlrisc
+                      and type P.T.oper = TS.S.P.T.oper
+                      and type P.T.rep = TS.S.P.T.rep
+                      and type P.T.rexp = TS.S.P.T.rexp
+                      and type P.T.stm = TS.S.P.T.stm
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
    ) : X86COMP_INSTR_EXT = 
 struct
   structure CFG = CFG
diff --git a/x86/mltree/x86-fp.sml b/x86/mltree/x86-fp.sml
index 60a8610..43977b8 100644
--- a/x86/mltree/x86-fp.sml
+++ b/x86/mltree/x86-fp.sml
@@ -53,27 +53,88 @@
  * -- Allen Leung (leunga@cs.nyu.edu)
  *) 
 
-local
+functor X86FP
+   (structure X86Instr  : X86INSTR
+    structure X86Props  : INSN_PROPERTIES (* where I = X86Instr *)
+                          where type I.addressing_mode = X86Instr.addressing_mode
+                            and type I.ea = X86Instr.ea
+                            and type I.instr = X86Instr.instr
+                            and type I.instruction = X86Instr.instruction
+                            and type I.operand = X86Instr.operand
+    structure Flowgraph : CONTROL_FLOW_GRAPH (* where I = X86Instr *)
+                          where type I.addressing_mode = X86Instr.addressing_mode
+                            and type I.ea = X86Instr.ea
+                            and type I.instr = X86Instr.instr
+                            and type I.instruction = X86Instr.instruction
+                            and type I.operand = X86Instr.operand
+    structure Liveness  : LIVENESS (* where CFG = Flowgraph *)
+                          where type CFG.I.addressing_mode = Flowgraph.I.addressing_mode
+                            and type CFG.I.ea = Flowgraph.I.ea
+                            and type CFG.I.instr = Flowgraph.I.instr
+                            and type CFG.I.instruction = Flowgraph.I.instruction
+                            and type CFG.I.operand = Flowgraph.I.operand
+                            and type CFG.P.Client.pseudo_op = Flowgraph.P.Client.pseudo_op
+                            and type CFG.P.T.Basis.cond = Flowgraph.P.T.Basis.cond
+                            and type CFG.P.T.Basis.div_rounding_mode = Flowgraph.P.T.Basis.div_rounding_mode
+                            and type CFG.P.T.Basis.ext = Flowgraph.P.T.Basis.ext
+                            and type CFG.P.T.Basis.fcond = Flowgraph.P.T.Basis.fcond
+                            and type CFG.P.T.Basis.rounding_mode = Flowgraph.P.T.Basis.rounding_mode
+                            and type CFG.P.T.Constant.const = Flowgraph.P.T.Constant.const
+                            and type ('s,'r,'f,'c) CFG.P.T.Extension.ccx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.ccx
+                            and type ('s,'r,'f,'c) CFG.P.T.Extension.fx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.fx
+                            and type ('s,'r,'f,'c) CFG.P.T.Extension.rx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.rx
+                            and type ('s,'r,'f,'c) CFG.P.T.Extension.sx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.sx
+                            and type CFG.P.T.I.div_rounding_mode = Flowgraph.P.T.I.div_rounding_mode
+                            and type CFG.P.T.Region.region = Flowgraph.P.T.Region.region
+                            and type CFG.P.T.ccexp = Flowgraph.P.T.ccexp
+                            and type CFG.P.T.fexp = Flowgraph.P.T.fexp
+                            (* and type CFG.P.T.labexp = Flowgraph.P.T.labexp *)
+                            and type CFG.P.T.mlrisc = Flowgraph.P.T.mlrisc
+                            and type CFG.P.T.oper = Flowgraph.P.T.oper
+                            and type CFG.P.T.rep = Flowgraph.P.T.rep
+                            and type CFG.P.T.rexp = Flowgraph.P.T.rexp
+                            and type CFG.P.T.stm = Flowgraph.P.T.stm
+                            and type CFG.block = Flowgraph.block
+                            and type CFG.block_kind = Flowgraph.block_kind
+                            and type CFG.edge_info = Flowgraph.edge_info
+                            and type CFG.edge_kind = Flowgraph.edge_kind
+                            and type CFG.info = Flowgraph.info
+    structure Asm       : INSTRUCTION_EMITTER (* where I = X86Instr and S.P = Flowgraph.P *)
+                          where type I.addressing_mode = X86Instr.addressing_mode
+                            and type I.ea = X86Instr.ea
+                            and type I.instr = X86Instr.instr
+                            and type I.instruction = X86Instr.instruction
+                            and type I.operand = X86Instr.operand
+                          where type S.P.Client.pseudo_op = Flowgraph.P.Client.pseudo_op
+                            and type S.P.T.Basis.cond = Flowgraph.P.T.Basis.cond
+                            and type S.P.T.Basis.div_rounding_mode = Flowgraph.P.T.Basis.div_rounding_mode
+                            and type S.P.T.Basis.ext = Flowgraph.P.T.Basis.ext
+                            and type S.P.T.Basis.fcond = Flowgraph.P.T.Basis.fcond
+                            and type S.P.T.Basis.rounding_mode = Flowgraph.P.T.Basis.rounding_mode
+                            and type S.P.T.Constant.const = Flowgraph.P.T.Constant.const
+                            and type ('s,'r,'f,'c) S.P.T.Extension.ccx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.ccx
+                            and type ('s,'r,'f,'c) S.P.T.Extension.fx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.fx
+                            and type ('s,'r,'f,'c) S.P.T.Extension.rx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.rx
+                            and type ('s,'r,'f,'c) S.P.T.Extension.sx = ('s,'r,'f,'c) Flowgraph.P.T.Extension.sx
+                            and type S.P.T.I.div_rounding_mode = Flowgraph.P.T.I.div_rounding_mode
+                            and type S.P.T.Region.region = Flowgraph.P.T.Region.region
+                            and type S.P.T.ccexp = Flowgraph.P.T.ccexp
+                            and type S.P.T.fexp = Flowgraph.P.T.fexp
+                            (* and type S.P.T.labexp = Flowgraph.P.T.labexp *)
+                            and type S.P.T.mlrisc = Flowgraph.P.T.mlrisc
+                            and type S.P.T.oper = Flowgraph.P.T.oper
+                            and type S.P.T.rep = Flowgraph.P.T.rep
+                            and type S.P.T.rexp = Flowgraph.P.T.rexp
+                            and type S.P.T.stm = Flowgraph.P.T.stm
+   ) : CFG_OPTIMIZATION =
+struct
    val debug = false         (* set this to true to debug this module 
                               * set this to false for production use.
                               *) 
    val debugLiveness = true (* debug liveness analysis *)
    val debugDead = false     (* debug dead code removal *)
    val sanityCheck = true
-in
-functor X86FP
-   (structure X86Instr  : X86INSTR
-    structure X86Props  : INSN_PROPERTIES 
-			      where I = X86Instr
-    structure Flowgraph : CONTROL_FLOW_GRAPH
-			      where I = X86Instr
-    structure Liveness  : LIVENESS 
-			      where CFG = Flowgraph
-    structure Asm       : INSTRUCTION_EMITTER 
-			      where I = X86Instr
-				and S.P = Flowgraph.P
-   ) : CFG_OPTIMIZATION = 
-struct
+
    structure CFG = Flowgraph
    structure G  = Graph
    structure I  = X86Instr
@@ -1670,5 +1731,3 @@ struct
        else repairCriticalEdges(Cfg)
    end 
 end (* functor *)
-
-end (* local *)
diff --git a/x86/mltree/x86.sml b/x86/mltree/x86.sml
index 16c7103..050be4a 100644
--- a/x86/mltree/x86.sml
+++ b/x86/mltree/x86.sml
@@ -32,19 +32,77 @@
  *
  * -- Allen
  *)
-local
-   val rewriteMemReg = true (* should we rewrite memRegs *)
-   val enableFastFPMode = true (* set this to false to disable the mode *)
-in
 
 functor X86
   (structure X86Instr : X86INSTR
-   structure MLTreeUtils : MLTREE_UTILS
-			where T = X86Instr.T
-   structure ExtensionComp : MLTREE_EXTENSION_COMP
-     			where I = X86Instr and T = X86Instr.T
-   structure MLTreeStream : MLTREE_STREAM
-			where T = ExtensionComp.T
+   structure MLTreeUtils : MLTREE_UTILS (* where T = X86Instr.T *)
+                           where type T.Basis.cond = X86Instr.T.Basis.cond
+                             and type T.Basis.div_rounding_mode = X86Instr.T.Basis.div_rounding_mode
+                             and type T.Basis.ext = X86Instr.T.Basis.ext
+                             and type T.Basis.fcond = X86Instr.T.Basis.fcond
+                             and type T.Basis.rounding_mode = X86Instr.T.Basis.rounding_mode
+                             and type T.Constant.const = X86Instr.T.Constant.const
+                             and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) X86Instr.T.Extension.ccx
+                             and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) X86Instr.T.Extension.fx
+                             and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) X86Instr.T.Extension.rx
+                             and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) X86Instr.T.Extension.sx
+                             and type T.I.div_rounding_mode = X86Instr.T.I.div_rounding_mode
+                             and type T.Region.region = X86Instr.T.Region.region
+                             and type T.ccexp = X86Instr.T.ccexp
+                             and type T.fexp = X86Instr.T.fexp
+                             (* and type T.labexp = X86Instr.T.labexp *)
+                             and type T.mlrisc = X86Instr.T.mlrisc
+                             and type T.oper = X86Instr.T.oper
+                             and type T.rep = X86Instr.T.rep
+                             and type T.rexp = X86Instr.T.rexp
+                             and type T.stm = X86Instr.T.stm
+   structure ExtensionComp : MLTREE_EXTENSION_COMP (* where I = X86Instr and T = X86Instr.T *)
+                             where type I.addressing_mode = X86Instr.addressing_mode
+                               and type I.ea = X86Instr.ea
+                               and type I.instr = X86Instr.instr
+                               and type I.instruction = X86Instr.instruction
+                               and type I.operand = X86Instr.operand
+                             where type T.Basis.cond = X86Instr.T.Basis.cond
+                               and type T.Basis.div_rounding_mode = X86Instr.T.Basis.div_rounding_mode
+                               and type T.Basis.ext = X86Instr.T.Basis.ext
+                               and type T.Basis.fcond = X86Instr.T.Basis.fcond
+                               and type T.Basis.rounding_mode = X86Instr.T.Basis.rounding_mode
+                               and type T.Constant.const = X86Instr.T.Constant.const
+                               and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) X86Instr.T.Extension.ccx
+                               and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) X86Instr.T.Extension.fx
+                               and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) X86Instr.T.Extension.rx
+                               and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) X86Instr.T.Extension.sx
+                               and type T.I.div_rounding_mode = X86Instr.T.I.div_rounding_mode
+                               and type T.Region.region = X86Instr.T.Region.region
+                               and type T.ccexp = X86Instr.T.ccexp
+                               and type T.fexp = X86Instr.T.fexp
+                               (* and type T.labexp = X86Instr.T.labexp *)
+                               and type T.mlrisc = X86Instr.T.mlrisc
+                               and type T.oper = X86Instr.T.oper
+                               and type T.rep = X86Instr.T.rep
+                               and type T.rexp = X86Instr.T.rexp
+                               and type T.stm = X86Instr.T.stm
+   structure MLTreeStream : MLTREE_STREAM (* where T = ExtensionComp.T *)
+                            where type T.Basis.cond = ExtensionComp.T.Basis.cond
+                              and type T.Basis.div_rounding_mode = ExtensionComp.T.Basis.div_rounding_mode
+                              and type T.Basis.ext = ExtensionComp.T.Basis.ext
+                              and type T.Basis.fcond = ExtensionComp.T.Basis.fcond
+                              and type T.Basis.rounding_mode = ExtensionComp.T.Basis.rounding_mode
+                              and type T.Constant.const = ExtensionComp.T.Constant.const
+                              and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) ExtensionComp.T.Extension.ccx
+                              and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) ExtensionComp.T.Extension.fx
+                              and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) ExtensionComp.T.Extension.rx
+                              and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) ExtensionComp.T.Extension.sx
+                              and type T.I.div_rounding_mode = ExtensionComp.T.I.div_rounding_mode
+                              and type T.Region.region = ExtensionComp.T.Region.region
+                              and type T.ccexp = ExtensionComp.T.ccexp
+                              and type T.fexp = ExtensionComp.T.fexp
+                              (* and type T.labexp = ExtensionComp.T.labexp *)
+                              and type T.mlrisc = ExtensionComp.T.mlrisc
+                              and type T.oper = ExtensionComp.T.oper
+                              and type T.rep = ExtensionComp.T.rep
+                              and type T.rexp = ExtensionComp.T.rexp
+                              and type T.stm = ExtensionComp.T.stm
     datatype arch = Pentium | PentiumPro | PentiumII | PentiumIII
     val arch : arch ref
     val cvti2f :
@@ -65,6 +123,9 @@ functor X86
           val rewriteMemReg : bool
       end =
 struct
+  val rewriteMemReg = true (* should we rewrite memRegs *)
+  val enableFastFPMode = true (* set this to false to disable the mode *)
+
   structure I = X86Instr
   structure T = I.T
   structure TS = ExtensionComp.TS
@@ -2014,5 +2075,3 @@ struct
   end
 
 end (* functor *)
-
-end (* local *)
diff --git a/x86/omit-frameptr/x86omit-frameptr.sml b/x86/omit-frameptr/x86omit-frameptr.sml
index f8d5bce..b892502 100644
--- a/x86/omit-frameptr/x86omit-frameptr.sml
+++ b/x86/omit-frameptr/x86omit-frameptr.sml
@@ -16,8 +16,50 @@
 
 functor X86OmitFramePointer (
     structure I : X86INSTR
-    structure CFG : CONTROL_FLOW_GRAPH where I = I
-    structure MemRegs : MEMORY_REGISTERS where I=I
+    structure CFG : CONTROL_FLOW_GRAPH (* where I = I *)
+                    where type I.addressing_mode = I.addressing_mode
+                      and type I.ea = I.ea
+                      and type I.instr = I.instr
+                      and type I.instruction = I.instruction
+                      and type I.operand = I.operand
+    structure MemRegs : MEMORY_REGISTERS (* where I = I *)
+                        where type I.Constant.const = I.Constant.const
+                          and type I.Region.region = I.Region.region
+                          and type I.T.Basis.cond = I.T.Basis.cond
+                          and type I.T.Basis.div_rounding_mode = I.T.Basis.div_rounding_mode
+                          and type I.T.Basis.ext = I.T.Basis.ext
+                          and type I.T.Basis.fcond = I.T.Basis.fcond
+                          and type I.T.Basis.rounding_mode = I.T.Basis.rounding_mode
+                          and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) I.T.Extension.ccx
+                          and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) I.T.Extension.fx
+                          and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) I.T.Extension.rx
+                          and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) I.T.Extension.sx
+                          and type I.T.I.div_rounding_mode = I.T.I.div_rounding_mode
+                          and type I.T.ccexp = I.T.ccexp
+                          and type I.T.fexp = I.T.fexp
+                          (* and type I.T.labexp = I.T.labexp *)
+                          and type I.T.mlrisc = I.T.mlrisc
+                          and type I.T.oper = I.T.oper
+                          and type I.T.rep = I.T.rep
+                          and type I.T.rexp = I.T.rexp
+                          and type I.T.stm = I.T.stm
+                          (* and type I.addressing_mode = I.addressing_mode *)
+                          and type I.binaryOp = I.binaryOp
+                          and type I.bitOp = I.bitOp
+                          and type I.cond = I.cond
+                          and type I.fbinOp = I.fbinOp
+                          and type I.fenvOp = I.fenvOp
+                          and type I.fibinOp = I.fibinOp
+                          and type I.fsize = I.fsize
+                          and type I.funOp = I.funOp
+                          and type I.instr = I.instr
+                          and type I.instruction = I.instruction
+                          and type I.isize = I.isize
+                          and type I.move = I.move
+                          and type I.multDivOp = I.multDivOp
+                          and type I.operand = I.operand
+                          and type I.shiftOp = I.shiftOp
+                          and type I.unaryOp = I.unaryOp
     val memRegBase : CellsBasis.cell option): OMIT_FRAME_POINTER =
 struct
   structure CFG = CFG
diff --git a/x86/ra/x86RA.sml b/x86/ra/x86RA.sml
index 806296f..20db98c 100644
--- a/x86/ra/x86RA.sml
+++ b/x86/ra/x86RA.sml
@@ -109,13 +109,45 @@
 
 functor X86RA 
   ( structure I          : X86INSTR
-    structure InsnProps  : INSN_PROPERTIES 
-			       where I = I
-    structure CFG        : CONTROL_FLOW_GRAPH 
-			       where I = I
-    structure Asm        : INSTRUCTION_EMITTER 
-			       where I = I 
-				 and S.P = CFG.P
+    structure InsnProps  : INSN_PROPERTIES (* where I = I *)
+                           where type I.addressing_mode = I.addressing_mode
+                             and type I.ea = I.ea
+                             and type I.instr = I.instr
+                             and type I.instruction = I.instruction
+                             and type I.operand = I.operand
+    structure CFG        : CONTROL_FLOW_GRAPH (* where I = I *)
+                           where type I.addressing_mode = I.addressing_mode
+                             and type I.ea = I.ea
+                             and type I.instr = I.instr
+                             and type I.instruction = I.instruction
+                             and type I.operand = I.operand
+    structure Asm        : INSTRUCTION_EMITTER (* where I = I and S.P = CFG.P *)
+                           where type I.addressing_mode = I.addressing_mode
+                             and type I.ea = I.ea
+                             and type I.instr = I.instr
+                             and type I.instruction = I.instruction
+                             and type I.operand = I.operand
+                           where type S.P.Client.pseudo_op = CFG.P.Client.pseudo_op
+                             and type S.P.T.Basis.cond = CFG.P.T.Basis.cond
+                             and type S.P.T.Basis.div_rounding_mode = CFG.P.T.Basis.div_rounding_mode
+                             and type S.P.T.Basis.ext = CFG.P.T.Basis.ext
+                             and type S.P.T.Basis.fcond = CFG.P.T.Basis.fcond
+                             and type S.P.T.Basis.rounding_mode = CFG.P.T.Basis.rounding_mode
+                             and type S.P.T.Constant.const = CFG.P.T.Constant.const
+                             and type ('s,'r,'f,'c) S.P.T.Extension.ccx = ('s,'r,'f,'c) CFG.P.T.Extension.ccx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.fx = ('s,'r,'f,'c) CFG.P.T.Extension.fx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.rx = ('s,'r,'f,'c) CFG.P.T.Extension.rx
+                             and type ('s,'r,'f,'c) S.P.T.Extension.sx = ('s,'r,'f,'c) CFG.P.T.Extension.sx
+                             and type S.P.T.I.div_rounding_mode = CFG.P.T.I.div_rounding_mode
+                             and type S.P.T.Region.region = CFG.P.T.Region.region
+                             and type S.P.T.ccexp = CFG.P.T.ccexp
+                             and type S.P.T.fexp = CFG.P.T.fexp
+                             (* and type S.P.T.labexp = CFG.P.T.labexp *)
+                             and type S.P.T.mlrisc = CFG.P.T.mlrisc
+                             and type S.P.T.oper = CFG.P.T.oper
+                             and type S.P.T.rep = CFG.P.T.rep
+                             and type S.P.T.rexp = CFG.P.T.rexp
+                             and type S.P.T.stm = CFG.P.T.stm
 
       (* Spilling heuristics determines which node should be spilled 
        * You can use Chaitin, ChowHenessey, or one of your own.
@@ -126,7 +158,12 @@ functor X86RA
        * spill code.  You can use RASpill, or RASpillWithRenaming,
        * or write your own if you are feeling adventurous.
        *)
-    structure Spill : RA_SPILL where I = I 
+    structure Spill : RA_SPILL (* where I = I *)
+                      where type I.addressing_mode = I.addressing_mode
+                        and type I.ea = I.ea
+                        and type I.instr = I.instr
+                        and type I.instruction = I.instruction
+                        and type I.operand = I.operand
 
 
     type spill_info (* user-defined abstract type *)
@@ -304,17 +341,16 @@ struct
     (* This is the generic register allocator *)
     structure Ra = 
       RegisterAllocator
-       (SpillHeur)
-       (MemoryRA             (* for memory coalescing *)
+       (structure SpillHeuristics = SpillHeur
+        structure Flowgraph = MemoryRA             (* for memory coalescing *)
          (RADeadCodeElim     (* do the funky dead code elimination stuff *)
-            (ClusterRA
+            (structure Flowgraph = ClusterRA
                (structure Flowgraph = CFG
                 structure Asm = Asm
                 structure InsnProps = InsnProps
                 structure Spill = Spill
                )
-            )
-            (fun cellkind CB.GP = true | cellkind _ = false
+             fun cellkind CB.GP = true | cellkind _ = false
              val deadRegs = deadRegs
              val affectedBlocks = affectedBlocks
              val spillInit = spillInit
diff --git a/x86/ra/x86Rewrite.sig b/x86/ra/x86Rewrite.sig
index 6574b41..dba9b4d 100644
--- a/x86/ra/x86Rewrite.sig
+++ b/x86/ra/x86Rewrite.sig
@@ -7,7 +7,16 @@
 signature X86REWRITE =
   sig
     structure I  : X86INSTR
-    structure CB : CELLS_BASIS = CellsBasis
+    structure CB : CELLS_BASIS (* = CellsBasis *)
+                   where type CellSet.cellset = CellsBasis.CellSet.cellset
+                     and type 'a ColorTable.hash_table = 'a CellsBasis.ColorTable.hash_table
+                     and type 'a HashTable.hash_table = 'a CellsBasis.HashTable.hash_table
+                     and type SortedCells.sorted_cells = CellsBasis.SortedCells.sorted_cells
+                     and type cell = CellsBasis.cell
+                     and type cellColor = CellsBasis.cellColor
+                     and type cellkind = CellsBasis.cellkind
+                     and type cellkindDesc = CellsBasis.cellkindDesc
+                     and type cellkindInfo = CellsBasis.cellkindInfo
     val rewriteUse : I.instruction * CB.cell * CB.cell -> I.instruction
     val rewriteDef : I.instruction * CB.cell * CB.cell -> I.instruction
     val frewriteUse : I.instruction * CB.cell * CB.cell -> I.instruction
diff --git a/x86/ra/x86SpillInstr.sml b/x86/ra/x86SpillInstr.sml
index 3783a6a..3e3a4ba 100644
--- a/x86/ra/x86SpillInstr.sml
+++ b/x86/ra/x86SpillInstr.sml
@@ -8,7 +8,12 @@
  * introduced before.
  *)
 functor X86SpillInstr(structure Instr: X86INSTR
-                 structure Props: INSN_PROPERTIES where I = Instr
+                      structure Props: INSN_PROPERTIES (* where I = Instr *)
+                                       where type I.addressing_mode = Instr.addressing_mode
+                                         and type I.ea = Instr.ea
+                                         and type I.instr = Instr.instr
+                                         and type I.instruction = Instr.instruction
+                                         and type I.operand = Instr.operand
 		) : ARCH_SPILL_INSTR = struct
 
   structure I  = Instr
diff --git a/x86/x86MC.sml b/x86/x86MC.sml
index f8a67ab..27df711 100644
--- a/x86/x86MC.sml
+++ b/x86/x86MC.sml
@@ -8,11 +8,111 @@
  *)
 functor X86MCEmitter
   (structure Instr : X86INSTR
-   structure Shuffle : X86SHUFFLE where I = Instr
-   structure MLTreeEval : MLTREE_EVAL where T = Instr.T
-   structure MemRegs : MEMORY_REGISTERS where I = Instr
+   structure Shuffle : X86SHUFFLE (* where I = Instr *)
+                       where type I.Constant.const = Instr.Constant.const
+                         and type I.Region.region = Instr.Region.region
+                         and type I.T.Basis.cond = Instr.T.Basis.cond
+                         and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                         and type I.T.Basis.ext = Instr.T.Basis.ext
+                         and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                         and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                         and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                         and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                         and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                         and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                         and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                         and type I.T.ccexp = Instr.T.ccexp
+                         and type I.T.fexp = Instr.T.fexp
+                         (* and type I.T.labexp = Instr.T.labexp *)
+                         and type I.T.mlrisc = Instr.T.mlrisc
+                         and type I.T.oper = Instr.T.oper
+                         and type I.T.rep = Instr.T.rep
+                         and type I.T.rexp = Instr.T.rexp
+                         and type I.T.stm = Instr.T.stm
+                         (* and type I.addressing_mode = Instr.addressing_mode *)
+                         and type I.binaryOp = Instr.binaryOp
+                         and type I.bitOp = Instr.bitOp
+                         and type I.cond = Instr.cond
+                         and type I.fbinOp = Instr.fbinOp
+                         and type I.fenvOp = Instr.fenvOp
+                         and type I.fibinOp = Instr.fibinOp
+                         and type I.fsize = Instr.fsize
+                         and type I.funOp = Instr.funOp
+                         and type I.instr = Instr.instr
+                         and type I.instruction = Instr.instruction
+                         and type I.isize = Instr.isize
+                         and type I.move = Instr.move
+                         and type I.multDivOp = Instr.multDivOp
+                         and type I.operand = Instr.operand
+                         and type I.shiftOp = Instr.shiftOp
+                         and type I.unaryOp = Instr.unaryOp
+   structure MLTreeEval : MLTREE_EVAL (* where T = Instr.T *)
+                          where type T.Basis.cond = Instr.T.Basis.cond
+                            and type T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                            and type T.Basis.ext = Instr.T.Basis.ext
+                            and type T.Basis.fcond = Instr.T.Basis.fcond
+                            and type T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                            and type T.Constant.const = Instr.T.Constant.const
+                            and type ('s,'r,'f,'c) T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                            and type ('s,'r,'f,'c) T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                            and type ('s,'r,'f,'c) T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                            and type ('s,'r,'f,'c) T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                            and type T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                            and type T.Region.region = Instr.T.Region.region
+                            and type T.ccexp = Instr.T.ccexp
+                            and type T.fexp = Instr.T.fexp
+                            (* and type T.labexp = Instr.T.labexp *)
+                            and type T.mlrisc = Instr.T.mlrisc
+                            and type T.oper = Instr.T.oper
+                            and type T.rep = Instr.T.rep
+                            and type T.rexp = Instr.T.rexp
+                            and type T.stm = Instr.T.stm
+   structure MemRegs : MEMORY_REGISTERS (* where I = Instr *)
+                       where type I.Constant.const = Instr.Constant.const
+                         and type I.Region.region = Instr.Region.region
+                         and type I.T.Basis.cond = Instr.T.Basis.cond
+                         and type I.T.Basis.div_rounding_mode = Instr.T.Basis.div_rounding_mode
+                         and type I.T.Basis.ext = Instr.T.Basis.ext
+                         and type I.T.Basis.fcond = Instr.T.Basis.fcond
+                         and type I.T.Basis.rounding_mode = Instr.T.Basis.rounding_mode
+                         and type ('s,'r,'f,'c) I.T.Extension.ccx = ('s,'r,'f,'c) Instr.T.Extension.ccx
+                         and type ('s,'r,'f,'c) I.T.Extension.fx = ('s,'r,'f,'c) Instr.T.Extension.fx
+                         and type ('s,'r,'f,'c) I.T.Extension.rx = ('s,'r,'f,'c) Instr.T.Extension.rx
+                         and type ('s,'r,'f,'c) I.T.Extension.sx = ('s,'r,'f,'c) Instr.T.Extension.sx
+                         and type I.T.I.div_rounding_mode = Instr.T.I.div_rounding_mode
+                         and type I.T.ccexp = Instr.T.ccexp
+                         and type I.T.fexp = Instr.T.fexp
+                         (* and type I.T.labexp = Instr.T.labexp *)
+                         and type I.T.mlrisc = Instr.T.mlrisc
+                         and type I.T.oper = Instr.T.oper
+                         and type I.T.rep = Instr.T.rep
+                         and type I.T.rexp = Instr.T.rexp
+                         and type I.T.stm = Instr.T.stm
+                         (* and type I.addressing_mode = Instr.addressing_mode *)
+                         and type I.binaryOp = Instr.binaryOp
+                         and type I.bitOp = Instr.bitOp
+                         and type I.cond = Instr.cond
+                         and type I.fbinOp = Instr.fbinOp
+                         and type I.fenvOp = Instr.fenvOp
+                         and type I.fibinOp = Instr.fibinOp
+                         and type I.fsize = Instr.fsize
+                         and type I.funOp = Instr.funOp
+                         and type I.instr = Instr.instr
+                         and type I.instruction = Instr.instruction
+                         and type I.isize = Instr.isize
+                         and type I.move = Instr.move
+                         and type I.multDivOp = Instr.multDivOp
+                         and type I.operand = Instr.operand
+                         and type I.shiftOp = Instr.shiftOp
+                         and type I.unaryOp = Instr.unaryOp
    val memRegBase : CellsBasis.cell option
-   structure AsmEmitter : INSTRUCTION_EMITTER where I = Instr) : MC_EMIT = 
+   structure AsmEmitter : INSTRUCTION_EMITTER (* where I = Instr *)
+                          where type I.addressing_mode = Instr.addressing_mode
+                            and type I.ea = Instr.ea
+                            and type I.instr = Instr.instr
+                            and type I.instruction = Instr.instruction
+                            and type I.operand = Instr.operand
+  ) : MC_EMIT =
 struct
   structure I = Instr
   structure C = I.C
